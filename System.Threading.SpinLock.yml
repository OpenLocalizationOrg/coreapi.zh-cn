items:
- uid: System.Threading.SpinLock
  commentId: T:System.Threading.SpinLock
  id: SpinLock
  parent: System.Threading
  children:
  - System.Threading.SpinLock.#ctor(System.Boolean)
  - System.Threading.SpinLock.Enter(System.Boolean@)
  - System.Threading.SpinLock.Exit
  - System.Threading.SpinLock.Exit(System.Boolean)
  - System.Threading.SpinLock.IsHeld
  - System.Threading.SpinLock.IsHeldByCurrentThread
  - System.Threading.SpinLock.IsThreadOwnerTrackingEnabled
  - System.Threading.SpinLock.TryEnter(System.Boolean@)
  - System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)
  - System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpinLock
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 56
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      [HostProtection(Synchronization = true, ExternalThreading = true)]

      [DebuggerTypeProxy(typeof (SpinLock.SystemThreading_SpinLockDebugView))]

      [DebuggerDisplay("IsHeld = {IsHeld}")]

      public struct SpinLock
    content.vb: >-
      <ComVisible(False)>

      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      <DebuggerTypeProxy(GetType(SpinLock.SystemThreading_SpinLockDebugView))>

      <DebuggerDisplay("IsHeld = {IsHeld}")>

      Public Structure SpinLock
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  nameWithType: SpinLock
- uid: System.Threading.SpinLock.#ctor(System.Boolean)
  commentId: M:System.Threading.SpinLock.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock.SpinLock(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 119
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.SpinLock\" data-throw-if-not-resolved=\"false\"></xref> structure with the option to track thread IDs to improve debugging.</p>\n"
  syntax:
    content: public SpinLock(bool enableThreadOwnerTracking)
    content.vb: Public Sub New(enableThreadOwnerTracking As Boolean)
    parameters:
    - id: enableThreadOwnerTracking
      type: System.Boolean
      description: "\n<p>Whether to capture and use thread IDs for debugging purposes.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: SpinLock.SpinLock(Boolean)
- uid: System.Threading.SpinLock.IsHeld
  commentId: P:System.Threading.SpinLock.IsHeld
  id: IsHeld
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock.IsHeld
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsHeld
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 635
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets whether the lock is currently held by any thread.</p>\n"
  syntax:
    content: >-
      public bool IsHeld

      {
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          get;
      }
    content.vb: Public ReadOnly Property IsHeld As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>true if the lock is currently held by any thread; otherwise false.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: SpinLock.IsHeld
- uid: System.Threading.SpinLock.IsHeldByCurrentThread
  commentId: P:System.Threading.SpinLock.IsHeldByCurrentThread
  id: IsHeldByCurrentThread
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock.IsHeldByCurrentThread
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsHeldByCurrentThread
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 661
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets whether the lock is held by the current thread.</p>\n"
  syntax:
    content: >-
      public bool IsHeldByCurrentThread

      {
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          get;
      }
    content.vb: Public ReadOnly Property IsHeldByCurrentThread As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>true if the lock is held by the current thread; otherwise false.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Thread ownership tracking is disabled.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: SpinLock.IsHeldByCurrentThread
- uid: System.Threading.SpinLock.IsThreadOwnerTrackingEnabled
  commentId: P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled
  id: IsThreadOwnerTrackingEnabled
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock.IsThreadOwnerTrackingEnabled
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsThreadOwnerTrackingEnabled
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 675
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets whether thread ownership tracking is enabled for this instance.</p>\n"
  syntax:
    content: >-
      public bool IsThreadOwnerTrackingEnabled

      {
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          get;
      }
    content.vb: Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>true if thread ownership tracking is enabled for this instance; otherwise false.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: SpinLock.IsThreadOwnerTrackingEnabled
- uid: System.Threading.SpinLock.Enter(System.Boolean@)
  commentId: M:System.Threading.SpinLock.Enter(System.Boolean@)
  id: Enter(System.Boolean@)
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock.Enter(ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Enter
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 157
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\n"
  syntax:
    content: public void Enter(ref bool lockTaken)
    content.vb: Public Sub Enter(ByRef lockTaken As Boolean)
    parameters:
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling Enter.</p>\n"
  - type: System.Threading.LockRecursionException
    commentId: T:System.Threading.LockRecursionException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.SpinLock.Enter(ByRef System.Boolean)
  name.vb: Enter(ByRef Boolean)
  nameWithType: SpinLock.Enter(ref Boolean)
  nameWithType.vb: SpinLock.Enter(ByRef Boolean)
- uid: System.Threading.SpinLock.Exit
  commentId: M:System.Threading.SpinLock.Exit
  id: Exit
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock.Exit()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exit
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 544
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the lock.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public void Exit()
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Sub Exit
  exceptions:
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: SpinLock.Exit()
- uid: System.Threading.SpinLock.Exit(System.Boolean)
  commentId: M:System.Threading.SpinLock.Exit(System.Boolean)
  id: Exit(System.Boolean)
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock.Exit(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exit
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 575
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the lock.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public void Exit(bool useMemoryBarrier)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Sub Exit(useMemoryBarrier As Boolean)
    parameters:
    - id: useMemoryBarrier
      type: System.Boolean
      description: "\n<p>A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</p>\n"
  exceptions:
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: SpinLock.Exit(Boolean)
- uid: System.Threading.SpinLock.TryEnter(System.Boolean@)
  commentId: M:System.Threading.SpinLock.TryEnter(System.Boolean@)
  id: TryEnter(System.Boolean@)
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock.TryEnter(ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 189
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\n"
  syntax:
    content: public void TryEnter(ref bool lockTaken)
    content.vb: Public Sub TryEnter(ByRef lockTaken As Boolean)
    parameters:
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\n"
  - type: System.Threading.LockRecursionException
    commentId: T:System.Threading.LockRecursionException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.SpinLock.TryEnter(ByRef System.Boolean)
  name.vb: TryEnter(ByRef Boolean)
  nameWithType: SpinLock.TryEnter(ref Boolean)
  nameWithType.vb: SpinLock.TryEnter(ByRef Boolean)
- uid: System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)
  commentId: M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)
  id: TryEnter(System.Int32,System.Boolean@)
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock.TryEnter(System.Int32, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 256
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\n"
  syntax:
    content: public void TryEnter(int millisecondsTimeout, ref bool lockTaken)
    content.vb: Public Sub TryEnter(millisecondsTimeout As Integer, ByRef lockTaken As Boolean)
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\n"
  - type: System.Threading.LockRecursionException
    commentId: T:System.Threading.LockRecursionException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.SpinLock.TryEnter(System.Int32, ByRef System.Boolean)
  name.vb: TryEnter(Int32, ByRef Boolean)
  nameWithType: SpinLock.TryEnter(Int32, ref Boolean)
  nameWithType.vb: SpinLock.TryEnter(Int32, ByRef Boolean)
- uid: System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)
  commentId: M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)
  id: TryEnter(System.TimeSpan,System.Boolean@)
  parent: System.Threading.SpinLock
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.SpinLock.TryEnter(System.TimeSpan, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinLock.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/SpinLock.cs
    startLine: 220
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\n"
  syntax:
    content: public void TryEnter(TimeSpan timeout, ref bool lockTaken)
    content.vb: Public Sub TryEnter(timeout As TimeSpan, ByRef lockTaken As Boolean)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n"
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> milliseconds.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\n"
  - type: System.Threading.LockRecursionException
    commentId: T:System.Threading.LockRecursionException
    description: "\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.SpinLock.TryEnter(System.TimeSpan, ByRef System.Boolean)
  name.vb: TryEnter(TimeSpan, ByRef Boolean)
  nameWithType: SpinLock.TryEnter(TimeSpan, ref Boolean)
  nameWithType.vb: SpinLock.TryEnter(TimeSpan, ByRef Boolean)
references:
- uid: System.Threading
  isExternal: false
  name: "XXX"
  fullName: System.Threading
  nameWithType: System.Threading
  commentId: N:System.Threading
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: "XXX"
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: "XXX"
    fullName: System.ValueType.Equals
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: "XXX"
    fullName: System.ValueType.Equals
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: ValueType.Equals(Object)
  commentId: M:System.ValueType.Equals(System.Object)
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: "XXX"
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: "XXX"
    fullName: System.ValueType.GetHashCode
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: "XXX"
    fullName: System.ValueType.GetHashCode
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: ValueType.GetHashCode()
  commentId: M:System.ValueType.GetHashCode
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: "XXX"
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: "XXX"
    fullName: System.ValueType.ToString
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: "XXX"
    fullName: System.ValueType.ToString
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: ValueType.ToString()
  commentId: M:System.ValueType.ToString
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.ValueType
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ValueType
  nameWithType: ValueType
  commentId: T:System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.TimeSpan
  nameWithType: TimeSpan
  commentId: T:System.TimeSpan
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Threading.LockRecursionException
  isExternal: false
  name: "XXX"
  fullName: System.Threading.LockRecursionException
  nameWithType: LockRecursionException
  commentId: T:System.Threading.LockRecursionException
- uid: System.Threading.SynchronizationLockException
  isExternal: false
  name: "XXX"
  fullName: System.Threading.SynchronizationLockException
  nameWithType: SynchronizationLockException
  commentId: T:System.Threading.SynchronizationLockException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException

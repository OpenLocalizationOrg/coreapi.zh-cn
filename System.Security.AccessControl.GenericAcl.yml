items:
- uid: System.Security.AccessControl.GenericAcl
  commentId: T:System.Security.AccessControl.GenericAcl
  id: GenericAcl
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.GenericAcl.#ctor
  - System.Security.AccessControl.GenericAcl.AclRevision
  - System.Security.AccessControl.GenericAcl.AclRevisionDS
  - System.Security.AccessControl.GenericAcl.BinaryLength
  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  - System.Security.AccessControl.GenericAcl.Count
  - System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAcl.GetEnumerator
  - System.Security.AccessControl.GenericAcl.IsSynchronized
  - System.Security.AccessControl.GenericAcl.Item(System.Int32)
  - System.Security.AccessControl.GenericAcl.MaxBinaryLength
  - System.Security.AccessControl.GenericAcl.Revision
  - System.Security.AccessControl.GenericAcl.SyncRoot
  - System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericAcl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 280
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents an access control list (ACL) and is the base class for the <xref href=\"System.Security.AccessControl.CommonAcl\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.AccessControl.DiscretionaryAcl\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.AccessControl.RawAcl\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.AccessControl.SystemAcl\" data-throw-if-not-resolved=\"false\"></xref> classes.</p>\n"
  syntax:
    content: 'public abstract class GenericAcl : ICollection, IEnumerable'
    content.vb: >-
      Public MustInherit Class GenericAcl
          Implements ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: GenericAcl
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
- uid: System.Security.AccessControl.GenericAcl.AclRevision
  commentId: F:System.Security.AccessControl.GenericAcl.AclRevision
  id: AclRevision
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.AclRevision
  type: Field
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AclRevision
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 282
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>The revision level of the current <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref>. This value is returned by the <xref href=\"System.Security.AccessControl.GenericAcl.Revision\" data-throw-if-not-resolved=\"false\"></xref> property for Access Control Lists (ACLs) that are not associated with Directory Services objects.</p>\n"
  syntax:
    content: public static readonly byte AclRevision
    content.vb: Public Shared ReadOnly AclRevision As Byte
    return:
      type: System.Byte
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: GenericAcl.AclRevision
- uid: System.Security.AccessControl.GenericAcl.AclRevisionDS
  commentId: F:System.Security.AccessControl.GenericAcl.AclRevisionDS
  id: AclRevisionDS
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.AclRevisionDS
  type: Field
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AclRevisionDS
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 283
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>The revision level of the current <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref>. This value is returned by the <xref href=\"System.Security.AccessControl.GenericAcl.Revision\" data-throw-if-not-resolved=\"false\"></xref> property for Access Control Lists (ACLs) that are associated with Directory Services objects.</p>\n"
  syntax:
    content: public static readonly byte AclRevisionDS
    content.vb: Public Shared ReadOnly AclRevisionDS As Byte
    return:
      type: System.Byte
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: GenericAcl.AclRevisionDS
- uid: System.Security.AccessControl.GenericAcl.MaxBinaryLength
  commentId: F:System.Security.AccessControl.GenericAcl.MaxBinaryLength
  id: MaxBinaryLength
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.MaxBinaryLength
  type: Field
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxBinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 284
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>The maximum allowed binary length of a <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static readonly int MaxBinaryLength
    content.vb: Public Shared ReadOnly MaxBinaryLength As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: GenericAcl.MaxBinaryLength
- uid: System.Security.AccessControl.GenericAcl.#ctor
  commentId: M:System.Security.AccessControl.GenericAcl.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.GenericAcl()
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 285
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected GenericAcl()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: GenericAcl.GenericAcl()
- uid: System.Security.AccessControl.GenericAcl.BinaryLength
  commentId: P:System.Security.AccessControl.GenericAcl.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.BinaryLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 286
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\"System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public abstract int BinaryLength { get; }
    content.vb: Public MustOverride ReadOnly Property BinaryLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  nameWithType: GenericAcl.BinaryLength
- uid: System.Security.AccessControl.GenericAcl.Count
  commentId: P:System.Security.AccessControl.GenericAcl.Count
  id: Count
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.Count
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 287
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the number of access control entries (ACEs) in the current <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public abstract int Count { get; }
    content.vb: Public MustOverride ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of ACEs in the current <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  nameWithType: GenericAcl.Count
- uid: System.Security.AccessControl.GenericAcl.IsSynchronized
  commentId: P:System.Security.AccessControl.GenericAcl.IsSynchronized
  id: IsSynchronized
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSynchronized
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 288
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>This property is always set to <strong>false</strong>. It is implemented only because it is required for the implementation of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: public bool IsSynchronized { get; }
    content.vb: Public ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Always <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: GenericAcl.IsSynchronized
- uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)
  commentId: P:System.Security.AccessControl.GenericAcl.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 289
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  syntax:
    content: public abstract GenericAce this[int index] { get; set; }
    content.vb: Public MustOverride Property Item(index As Integer) As GenericAce
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> to get or set.</p>\n"
    return:
      type: System.Security.AccessControl.GenericAce
      description: "\n<p>The <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.AccessControl.GenericAcl.Item(System.Int32)
  name.vb: Item(Int32)
  nameWithType: GenericAcl.Item[Int32]
  nameWithType.vb: GenericAcl.Item(Int32)
- uid: System.Security.AccessControl.GenericAcl.Revision
  commentId: P:System.Security.AccessControl.GenericAcl.Revision
  id: Revision
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.Revision
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Revision
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 290
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the revision level of the <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract byte Revision { get; }
    content.vb: Public MustOverride ReadOnly Property Revision As Byte
    parameters: []
    return:
      type: System.Byte
      description: "\n<p>A byte value that specifies the revision level of the <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  nameWithType: GenericAcl.Revision
- uid: System.Security.AccessControl.GenericAcl.SyncRoot
  commentId: P:System.Security.AccessControl.GenericAcl.SyncRoot
  id: SyncRoot
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SyncRoot
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 291
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>This property always returns <strong>null</strong>. It is implemented only because it is required for the implementation of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: public virtual object SyncRoot { get; }
    content.vb: Public Overridable ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>Always returns <strong>null</strong>.</p>\n"
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: GenericAcl.SyncRoot
- uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  commentId: M:System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  id: CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 292
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Copies each <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> of the current <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> into the specified array.</p>\n"
  syntax:
    content: public void CopyTo(GenericAce[] array, int index)
    content.vb: Public Sub CopyTo(array As GenericAce(), index As Integer)
    parameters:
    - id: array
      type: System.Security.AccessControl.GenericAce[]
      description: "\n<p>The array into which copies of the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> objects contained by the current <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> are placed.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of <em>array</em> where the copying begins.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce(), System.Int32)
  name.vb: CopyTo(GenericAce(), Int32)
  nameWithType: GenericAcl.CopyTo(GenericAce[], Int32)
  nameWithType.vb: GenericAcl.CopyTo(GenericAce(), Int32)
- uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 293
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Marshals the contents of the <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> object into the specified byte array beginning at the specified offset.</p>\n"
  syntax:
    content: public abstract void GetBinaryForm(byte[] binaryForm, int offset)
    content.vb: Public MustOverride Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "\n<p>The byte array into which the contents of the <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> is marshaled.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset at which to start marshaling.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> to be copied into <em>array</em>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  nameWithType: GenericAcl.GetBinaryForm(Byte[], Int32)
  nameWithType.vb: GenericAcl.GetBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.GenericAcl.GetEnumerator
  commentId: M:System.Security.AccessControl.GenericAcl.GetEnumerator
  id: GetEnumerator
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 294
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Retrieves an object that you can use to iterate through the access control entries (ACEs) in an access control list (ACL).</p>\n"
  syntax:
    content: public AceEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As AceEnumerator
    return:
      type: System.Security.AccessControl.AceEnumerator
      description: "\n<p>An enumerator object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: GenericAcl.GetEnumerator()
- uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.CopyTo
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 295
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Copies each <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> of the current <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> into the specified array.</p>\n"
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The array into which copies of the <xref href=\"System.Security.AccessControl.GenericAce\" data-throw-if-not-resolved=\"false\"></xref> objects contained by the current <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> are placed.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of <em>array</em> where the copying begins.</p>\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  nameWithType: GenericAcl.ICollection.CopyTo(Array, Int32)
  nameWithType.vb: GenericAcl.System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 296
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Returns a new instance of the <xref href=\"System.Security.AccessControl.AceEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class cast as an instance of the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>A new <xref href=\"System.Security.AccessControl.AceEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object, cast as an instance of the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: GenericAcl.IEnumerable.GetEnumerator()
  nameWithType.vb: GenericAcl.System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl
  commentId: N:System.Security.AccessControl
  nameWithType: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  nameWithType: ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  nameWithType: IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  nameWithType: Queryable.AsQueryable()
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel()
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Enumerable.Cast<TResult>()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Enumerable.OfType<TResult>()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections
  commentId: N:System.Collections
  nameWithType: System.Collections
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
- uid: System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  nameWithType: Queryable
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  nameWithType: ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
- uid: System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  nameWithType: Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
- uid: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq
  commentId: N:System.Linq
  nameWithType: System.Linq
- uid: System.Byte
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Byte
  commentId: T:System.Byte
  nameWithType: Byte
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  nameWithType: ICollection.Count
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  nameWithType: ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce
  commentId: T:System.Security.AccessControl.GenericAce
  nameWithType: GenericAce
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  nameWithType: ICollection.SyncRoot
- uid: System.Security.AccessControl.GenericAce[]
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce[]
  fullname.vb: System.Security.AccessControl.GenericAce()
  name.vb: GenericAce()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce
  - name: "XXX"
    fullName: ()
  nameWithType: GenericAce[]
  nameWithType.vb: GenericAce()
- uid: System.Byte[]
  name: "XXX"
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
- uid: System.Security.AccessControl.AceEnumerator
  parent: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AceEnumerator
  commentId: T:System.Security.AccessControl.AceEnumerator
  nameWithType: AceEnumerator
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: "XXX"
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: "XXX"
    fullName: System.Collections.ICollection.CopyTo
  - name: "XXX"
    fullName: (
  - uid: System.Array
    name: "XXX"
    fullName: System.Array
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: "XXX"
    fullName: System.Collections.ICollection.CopyTo
  - name: "XXX"
    fullName: (
  - uid: System.Array
    name: "XXX"
    fullName: System.Array
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Array
  commentId: T:System.Array
  nameWithType: Array
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  nameWithType: IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  nameWithType: IEnumerator
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException

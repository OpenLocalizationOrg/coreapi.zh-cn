items:
- uid: System.Diagnostics.Tracing.EventListener
  commentId: T:System.Diagnostics.Tracing.EventListener
  id: EventListener
  parent: System.Diagnostics.Tracing
  children:
  - System.Diagnostics.Tracing.EventListener.#ctor
  - System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.Dispose
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  - System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  - System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  - System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventListener
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EventListener
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4214
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Provides methods for enabling and disabling events from event sources.</p>\n"
  syntax:
    content: 'public class EventListener : IDisposable'
    content.vb: >-
      Public Class EventListener
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: EventListener
- uid: System.Diagnostics.Tracing.EventListener.#ctor
  commentId: M:System.Diagnostics.Tracing.EventListener.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventListener.EventListener()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4254
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventListener\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public EventListener()
    content.vb: Public Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: EventListener.EventListener()
- uid: System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  commentId: M:System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  id: DisableEvents(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventListener.DisableEvents(System.Diagnostics.Tracing.EventSource)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DisableEvents
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4364
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Disables all events for the specified event source.</p>\n"
  syntax:
    content: public void DisableEvents(EventSource eventSource)
    content.vb: Public Sub DisableEvents(eventSource As EventSource)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to disable events for.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventListener.DisableEvents(EventSource)
- uid: System.Diagnostics.Tracing.EventListener.Dispose
  commentId: M:System.Diagnostics.Tracing.EventListener.Dispose
  id: Dispose
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventListener.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4269
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Releases the resources used by the current instance of the <xref href=\"System.Diagnostics.Tracing.EventListener\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public virtual void Dispose()
    content.vb: Public Overridable Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: EventListener.Dispose()
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  commentId: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnableEvents
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4318
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Enables events for the specified event source that has the specified verbosity level or lower.</p>\n"
  syntax:
    content: public void EnableEvents(EventSource eventSource, EventLevel level)
    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to enable events for.</p>\n"
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The level of events to enable.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventListener.EnableEvents(EventSource, EventLevel)
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  commentId: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnableEvents
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4333
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Enables events for the specified event source that has the specified verbosity level or lower, and matching keyword flags.</p>\n"
  syntax:
    content: public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword)
    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel, matchAnyKeyword As EventKeywords)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to enable events for.</p>\n"
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The level of events to enable.</p>\n"
    - id: matchAnyKeyword
      type: System.Diagnostics.Tracing.EventKeywords
      description: "\n<p>The keyword flags necessary to enable the events.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventListener.EnableEvents(EventSource, EventLevel, EventKeywords)
- uid: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  id: EnableEvents(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnableEvents
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4349
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Enables events for the specified event source that has the specified verbosity level or lower, matching event keyword flag, and matching arguments.</p>\n"
  syntax:
    content: public void EnableEvents(EventSource eventSource, EventLevel level, EventKeywords matchAnyKeyword, IDictionary<string, string> arguments)
    content.vb: Public Sub EnableEvents(eventSource As EventSource, level As EventLevel, matchAnyKeyword As EventKeywords, arguments As IDictionary(Of String, String))
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to enable events for.</p>\n"
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The level of events to enable.</p>\n"
    - id: matchAnyKeyword
      type: System.Diagnostics.Tracing.EventKeywords
      description: "\n<p>The keyword flags necessary to enable the events.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "\n<p>The arguments to be matched to enable the events.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventListener.EnableEvents(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary(Of String, String))
  nameWithType: EventListener.EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary<String, String>)
  nameWithType.vb: EventListener.EnableEvents(EventSource, EventLevel, EventKeywords, IDictionary(Of String, String))
- uid: System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  commentId: M:System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  id: EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventListener.EventSourceIndex(System.Diagnostics.Tracing.EventSource)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EventSourceIndex
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4382
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets a small non-negative number that represents the specified event source.</p>\n"
  syntax:
    content: public static int EventSourceIndex(EventSource eventSource)
    content.vb: Public Shared Function EventSourceIndex(eventSource As EventSource) As Integer
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to find the index for.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A small non-negative number that represents the specified event source.</p>\n"
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  nameWithType: EventListener.EventSourceIndex(EventSource)
- uid: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  commentId: M:System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  id: OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventListener.OnEventSourceCreated(System.Diagnostics.Tracing.EventSource)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnEventSourceCreated
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4397
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Called for all existing event sources when the event listener is created and when a new event source is attached to the listener.</p>\n"
  syntax:
    content: protected virtual void OnEventSourceCreated(EventSource eventSource)
    content.vb: Protected Overridable Sub OnEventSourceCreated(eventSource As EventSource)
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: EventListener.OnEventSourceCreated(EventSource)
- uid: System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  commentId: M:System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  id: OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  parent: System.Diagnostics.Tracing.EventListener
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnEventWritten
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 4413
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Called whenever an event has been written by an event source for which the event listener has enabled events.</p>\n"
  syntax:
    content: protected virtual void OnEventWritten(EventWrittenEventArgs eventData)
    content.vb: Protected Overridable Sub OnEventWritten(eventData As EventWrittenEventArgs)
    parameters:
    - id: eventData
      type: System.Diagnostics.Tracing.EventWrittenEventArgs
      description: "\n<p>The event arguments that describe the event.</p>\n"
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  nameWithType: EventListener.OnEventWritten(EventWrittenEventArgs)
references:
- uid: System.Diagnostics.Tracing
  isExternal: false
  name: "XXX"
  fullName: System.Diagnostics.Tracing
  nameWithType: System.Diagnostics.Tracing
  commentId: N:System.Diagnostics.Tracing
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventSource
  nameWithType: EventSource
  commentId: T:System.Diagnostics.Tracing.EventSource
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: "XXX"
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: "XXX"
    fullName: System.IDisposable.Dispose
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: "XXX"
    fullName: System.IDisposable.Dispose
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IDisposable.Dispose()
  commentId: M:System.IDisposable.Dispose
- uid: System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventLevel
  nameWithType: EventLevel
  commentId: T:System.Diagnostics.Tracing.EventLevel
- uid: System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventKeywords
  nameWithType: EventKeywords
  commentId: T:System.Diagnostics.Tracing.EventKeywords
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: "XXX"
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: "XXX"
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: "XXX"
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary<String, String>
  nameWithType.vb: IDictionary(Of String, String)
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: "XXX"
    fullName: System.Collections.Generic.IDictionary
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TKey
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: "XXX"
    fullName: System.Collections.Generic.IDictionary
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TKey
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TValue
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  commentId: T:System.Collections.Generic.IDictionary`2
- uid: System.Collections.Generic
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Diagnostics.Tracing.EventWrittenEventArgs
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: "XXX"
  fullName: System.Diagnostics.Tracing.EventWrittenEventArgs
  nameWithType: EventWrittenEventArgs
  commentId: T:System.Diagnostics.Tracing.EventWrittenEventArgs

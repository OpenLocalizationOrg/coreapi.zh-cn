items:
- uid: System.StringComparer
  commentId: T:System.StringComparer
  id: StringComparer
  parent: System
  children:
  - System.StringComparer.#ctor
  - System.StringComparer.Compare(System.String,System.String)
  - System.StringComparer.CurrentCulture
  - System.StringComparer.CurrentCultureIgnoreCase
  - System.StringComparer.Equals(System.String,System.String)
  - System.StringComparer.GetHashCode(System.String)
  - System.StringComparer.Ordinal
  - System.StringComparer.OrdinalIgnoreCase
  - System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)
  - System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)
  - System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/StringComparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringComparer
    path: src/mscorlib/src/System/StringComparer.cs
    startLine: 14
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public abstract class StringComparer : IComparer, IEqualityComparer, IComparer<string>, IEqualityComparer<string>
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public MustInherit Class StringComparer
          Implements IComparer, IEqualityComparer, IComparer(Of String), IEqualityComparer(Of String)
  seealso:
  - type: System.String
    commentId: T:System.String
  - type: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IComparer{System.String}
  - System.Collections.Generic.IEqualityComparer{System.String}
  - System.Collections.IComparer
  - System.Collections.IEqualityComparer
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: StringComparer
- uid: System.StringComparer.#ctor
  commentId: M:System.StringComparer.#ctor
  id: '#ctor'
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.StringComparer()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 557
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: protected StringComparer()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: StringComparer.StringComparer()
- uid: System.StringComparer.CurrentCulture
  commentId: P:System.StringComparer.CurrentCulture
  id: CurrentCulture
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.CurrentCulture
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/StringComparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentCulture
    path: src/mscorlib/src/System/StringComparer.cs
    startLine: 36
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</p>\n"
  syntax:
    content: public static StringComparer CurrentCulture { get; }
    content.vb: Public Shared ReadOnly Property CurrentCulture As StringComparer
    parameters: []
    return:
      type: System.StringComparer
      description: "\n<p>A new <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: StringComparer.CurrentCulture
- uid: System.StringComparer.CurrentCultureIgnoreCase
  commentId: P:System.StringComparer.CurrentCultureIgnoreCase
  id: CurrentCultureIgnoreCase
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.CurrentCultureIgnoreCase
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/StringComparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentCultureIgnoreCase
    path: src/mscorlib/src/System/StringComparer.cs
    startLine: 43
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</p>\n"
  syntax:
    content: public static StringComparer CurrentCultureIgnoreCase { get; }
    content.vb: Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer
    parameters: []
    return:
      type: System.StringComparer
      description: "\n<p>A new <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: StringComparer.CurrentCultureIgnoreCase
- uid: System.StringComparer.Ordinal
  commentId: P:System.StringComparer.Ordinal
  id: Ordinal
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.Ordinal
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/StringComparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Ordinal
    path: src/mscorlib/src/System/StringComparer.cs
    startLine: 50
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object that performs a case-sensitive ordinal string comparison.</p>\n"
  syntax:
    content: public static StringComparer Ordinal { get; }
    content.vb: Public Shared ReadOnly Property Ordinal As StringComparer
    parameters: []
    return:
      type: System.StringComparer
      description: "\n<p>A <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: StringComparer.Ordinal
- uid: System.StringComparer.OrdinalIgnoreCase
  commentId: P:System.StringComparer.OrdinalIgnoreCase
  id: OrdinalIgnoreCase
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.OrdinalIgnoreCase
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/StringComparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OrdinalIgnoreCase
    path: src/mscorlib/src/System/StringComparer.cs
    startLine: 57
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object that performs a case-insensitive ordinal string comparison.</p>\n"
  syntax:
    content: public static StringComparer OrdinalIgnoreCase { get; }
    content.vb: Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer
    parameters: []
    return:
      type: System.StringComparer
      description: "\n<p>A <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: StringComparer.OrdinalIgnoreCase
- uid: System.StringComparer.Compare(System.String,System.String)
  commentId: M:System.StringComparer.Compare(System.String,System.String)
  id: Compare(System.String,System.String)
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.Compare(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/StringComparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/StringComparer.cs
    startLine: 123
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</p>\n"
  syntax:
    content: public abstract int Compare(string x, string y)
    content.vb: Public MustOverride Function Compare(x As String, y As String) As Integer
    parameters:
    - id: x
      type: System.String
      description: "\n<p>A string to compare to <em>y</em>.</p>\n"
    - id: y
      type: System.String
      description: "\n<p>A string to compare to <em>x</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\n<p>Value</p>\n<p>Meaning</p>\n<table><tbody><tr><td>\n<p>Less than zero</p>\n</td><td>\n<p>\n<em>x</em> precedes <em>y</em> in the sort order.</p>\n<p>-or-</p>\n<p>\n<em>x</em> is <strong>null</strong> and <em>y</em> is not <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>\n<em>x</em> is equal to <em>y</em>.</p>\n<p>-or-</p>\n<p>\n<em>x</em> and <em>y</em> are both <strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>Greater than zero</p>\n</td><td>\n<p>\n<em>x</em> follows <em>y</em> in the sort order.</p>\n<p>-or-</p>\n<p>\n<em>y</em> is <strong>null</strong> and <em>x</em> is not <strong>null</strong>. </p>\n</td></tr></tbody></table>\n"
  implements:
  - System.Collections.Generic.IComparer{System.String}.Compare(System.String,System.String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  nameWithType: StringComparer.Compare(String, String)
- uid: System.StringComparer.Equals(System.String,System.String)
  commentId: M:System.StringComparer.Equals(System.String,System.String)
  id: Equals(System.String,System.String)
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.Equals(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/StringComparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/StringComparer.cs
    startLine: 124
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>When overridden in a derived class, indicates whether two strings are equal.</p>\n"
  syntax:
    content: public abstract bool Equals(string x, string y)
    content.vb: Public MustOverride Function Equals(x As String, y As String) As Boolean
    parameters:
    - id: x
      type: System.String
      description: "\n<p>A string to compare to <em>y</em>.</p>\n"
    - id: y
      type: System.String
      description: "\n<p>A string to compare to <em>x</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>x</em> and <em>y</em> refer to the same object, or <em>x</em> and <em>y</em> are equal, or <em>x</em> and <em>y</em> are <strong>null</strong>; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.Generic.IEqualityComparer{System.String}.Equals(System.String,System.String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  nameWithType: StringComparer.Equals(String, String)
- uid: System.StringComparer.GetHashCode(System.String)
  commentId: M:System.StringComparer.GetHashCode(System.String)
  id: GetHashCode(System.String)
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.GetHashCode(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/StringComparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/StringComparer.cs
    startLine: 125
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>When overridden in a derived class, gets the hash code for the specified string.</p>\n"
  syntax:
    content: public abstract int GetHashCode(string obj)
    content.vb: Public MustOverride Function GetHashCode(obj As String) As Integer
    parameters:
    - id: obj
      type: System.String
      description: "\n<p>A string.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed hash code calculated from the value of the <em>obj</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Not enough memory is available to allocate the buffer that is required to compute the hash code.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>obj</em> is <strong>null</strong>. </p>\n"
  implements:
  - System.Collections.Generic.IEqualityComparer{System.String}.GetHashCode(System.String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  nameWithType: StringComparer.GetHashCode(String)
- uid: System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)
  commentId: M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)
  id: System#Collections#IComparer#Compare(System.Object,System.Object)
  isEii: true
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.System.Collections.IComparer.Compare(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IComparer.Compare
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 565
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  syntax:
    content: int IComparer.Compare(object x, object y)
    content.vb: Function System.Collections.IComparer.Compare(x As Object, y As Object) As Integer Implements IComparer.Compare
    parameters:
    - id: x
      type: System.Object
    - id: y
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.Collections.IComparer.Compare(System.Object,System.Object)
  name.vb: System.Collections.IComparer.Compare(Object, Object)
  nameWithType: StringComparer.IComparer.Compare(Object, Object)
  nameWithType.vb: StringComparer.System.Collections.IComparer.Compare(Object, Object)
- uid: System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)
  commentId: M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)
  id: System#Collections#IEqualityComparer#Equals(System.Object,System.Object)
  isEii: true
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.System.Collections.IEqualityComparer.Equals(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEqualityComparer.Equals
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 566
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  syntax:
    content: bool IEqualityComparer.Equals(object x, object y)
    content.vb: Function System.Collections.IEqualityComparer.Equals(x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals
    parameters:
    - id: x
      type: System.Object
    - id: y
      type: System.Object
    return:
      type: System.Boolean
  implements:
  - System.Collections.IEqualityComparer.Equals(System.Object,System.Object)
  name.vb: System.Collections.IEqualityComparer.Equals(Object, Object)
  nameWithType: StringComparer.IEqualityComparer.Equals(Object, Object)
  nameWithType.vb: StringComparer.System.Collections.IEqualityComparer.Equals(Object, Object)
- uid: System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)
  commentId: M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)
  id: System#Collections#IEqualityComparer#GetHashCode(System.Object)
  isEii: true
  parent: System.StringComparer
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.StringComparer.System.Collections.IEqualityComparer.GetHashCode(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEqualityComparer.GetHashCode
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 567
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  syntax:
    content: int IEqualityComparer.GetHashCode(object obj)
    content.vb: Function System.Collections.IEqualityComparer.GetHashCode(obj As Object) As Integer Implements IEqualityComparer.GetHashCode
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.Collections.IEqualityComparer.GetHashCode(System.Object)
  name.vb: System.Collections.IEqualityComparer.GetHashCode(Object)
  nameWithType: StringComparer.IEqualityComparer.GetHashCode(Object)
  nameWithType.vb: StringComparer.System.Collections.IEqualityComparer.GetHashCode(Object)
references:
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Collections.Generic.IComparer{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: "XXX"
  fullName: System.Collections.Generic.IComparer<System.String>
  fullname.vb: System.Collections.Generic.IComparer(Of System.String)
  name.vb: IComparer(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: "XXX"
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: "XXX"
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IComparer<String>
  nameWithType.vb: IComparer(Of String)
  commentId: T:System.Collections.Generic.IComparer{System.String}
- uid: System.Collections.Generic.IEqualityComparer{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: "XXX"
  fullName: System.Collections.Generic.IEqualityComparer<System.String>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of System.String)
  name.vb: IEqualityComparer(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IEqualityComparer<String>
  nameWithType.vb: IEqualityComparer(Of String)
  commentId: T:System.Collections.Generic.IEqualityComparer{System.String}
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IComparer
  nameWithType: IComparer
  commentId: T:System.Collections.IComparer
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEqualityComparer
  nameWithType: IEqualityComparer
  commentId: T:System.Collections.IEqualityComparer
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System.Collections.Generic.IComparer`1
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic.IComparer<T>
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: "XXX"
    fullName: System.Collections.Generic.IComparer
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: "XXX"
    fullName: System.Collections.Generic.IComparer
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: IComparer<T>
  nameWithType.vb: IComparer(Of T)
  commentId: T:System.Collections.Generic.IComparer`1
- uid: System.Collections.Generic
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  commentId: T:System.Collections.Generic.IEqualityComparer`1
- uid: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections
  nameWithType: System.Collections
  commentId: N:System.Collections
- uid: System.StringComparer
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.StringComparer
  nameWithType: StringComparer
  commentId: T:System.StringComparer
- uid: System.Collections.Generic.IComparer{System.String}.Compare(System.String,System.String)
  parent: System.Collections.Generic.IComparer{System.String}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: "XXX"
  fullName: System.Collections.Generic.IComparer<System.String>.Compare(System.String, System.String)
  fullname.vb: System.Collections.Generic.IComparer(Of System.String).Compare(System.String, System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: "XXX"
    fullName: System.Collections.Generic.IComparer<System.String>.Compare
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: "XXX"
    fullName: System.Collections.Generic.IComparer(Of System.String).Compare
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IComparer<String>.Compare(String, String)
  nameWithType.vb: IComparer(Of String).Compare(String, String)
  commentId: M:System.Collections.Generic.IComparer{System.String}.Compare(System.String,System.String)
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: "XXX"
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  fullname.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: "XXX"
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: T
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: "XXX"
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: T
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
- uid: System.Collections.Generic.IEqualityComparer{System.String}.Equals(System.String,System.String)
  parent: System.Collections.Generic.IEqualityComparer{System.String}
  definition: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  name: "XXX"
  fullName: System.Collections.Generic.IEqualityComparer<System.String>.Equals(System.String, System.String)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of System.String).Equals(System.String, System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer<System.String>.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer(Of System.String).Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IEqualityComparer<String>.Equals(String, String)
  nameWithType.vb: IEqualityComparer(Of String).Equals(String, String)
  commentId: M:System.Collections.Generic.IEqualityComparer{System.String}.Equals(System.String,System.String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
  isExternal: true
  name: "XXX"
  fullName: System.Collections.Generic.IEqualityComparer<T>.Equals(T, T)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).Equals(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer<T>.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: T
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer(Of T).Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: T
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: IEqualityComparer<T>.Equals(T, T)
  nameWithType.vb: IEqualityComparer(Of T).Equals(T, T)
  commentId: M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)
- uid: System.Collections.Generic.IEqualityComparer{System.String}.GetHashCode(System.String)
  parent: System.Collections.Generic.IEqualityComparer{System.String}
  definition: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  name: "XXX"
  fullName: System.Collections.Generic.IEqualityComparer<System.String>.GetHashCode(System.String)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of System.String).GetHashCode(System.String)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer<System.String>.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer(Of System.String).GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IEqualityComparer<String>.GetHashCode(String)
  nameWithType.vb: IEqualityComparer(Of String).GetHashCode(String)
  commentId: M:System.Collections.Generic.IEqualityComparer{System.String}.GetHashCode(System.String)
- uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
  isExternal: true
  name: "XXX"
  fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T)
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode(T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer<T>.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
    name: "XXX"
    fullName: System.Collections.Generic.IEqualityComparer(Of T).GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: IEqualityComparer<T>.GetHashCode(T)
  nameWithType.vb: IEqualityComparer(Of T).GetHashCode(T)
  commentId: M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)
- uid: System.Collections.IComparer.Compare(System.Object,System.Object)
  parent: System.Collections.IComparer
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IComparer.Compare(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)
    name: "XXX"
    fullName: System.Collections.IComparer.Compare
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)
    name: "XXX"
    fullName: System.Collections.IComparer.Compare
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IComparer.Compare(Object, Object)
  commentId: M:System.Collections.IComparer.Compare(System.Object,System.Object)
- uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)
  parent: System.Collections.IEqualityComparer
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IEqualityComparer.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Collections.IEqualityComparer.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IEqualityComparer.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Collections.IEqualityComparer.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IEqualityComparer.Equals(Object, Object)
  commentId: M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)
- uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)
  parent: System.Collections.IEqualityComparer
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IEqualityComparer.GetHashCode(System.Object)
  spec.csharp:
  - uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)
    name: "XXX"
    fullName: System.Collections.IEqualityComparer.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IEqualityComparer.GetHashCode(System.Object)
    name: "XXX"
    fullName: System.Collections.IEqualityComparer.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IEqualityComparer.GetHashCode(Object)
  commentId: M:System.Collections.IEqualityComparer.GetHashCode(System.Object)
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException

items:
- uid: System.Collections.Specialized.OrderedDictionary
  commentId: T:System.Collections.Specialized.OrderedDictionary
  id: OrderedDictionary
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.OrderedDictionary.#ctor
  - System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)
  - System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)
  - System.Collections.Specialized.OrderedDictionary.AsReadOnly
  - System.Collections.Specialized.OrderedDictionary.Clear
  - System.Collections.Specialized.OrderedDictionary.Contains(System.Object)
  - System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.OrderedDictionary.Count
  - System.Collections.Specialized.OrderedDictionary.GetEnumerator
  - System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  - System.Collections.Specialized.OrderedDictionary.IsReadOnly
  - System.Collections.Specialized.OrderedDictionary.Item(System.Int32)
  - System.Collections.Specialized.OrderedDictionary.Item(System.Object)
  - System.Collections.Specialized.OrderedDictionary.Keys
  - System.Collections.Specialized.OrderedDictionary.Remove(System.Object)
  - System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)
  - System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#IsSynchronized
  - System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#SyncRoot
  - System.Collections.Specialized.OrderedDictionary.System#Collections#IDictionary#IsFixedSize
  - System.Collections.Specialized.OrderedDictionary.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Specialized.OrderedDictionary.Values
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary
  type: Class
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderedDictionary
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 18
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Represents a collection of key/value pairs that are accessible by the key or index.</p>\n"
  syntax:
    content: 'public class OrderedDictionary : IOrderedDictionary, IDictionary, ICollection, IEnumerable'
    content.vb: >-
      Public Class OrderedDictionary
          Implements IOrderedDictionary, IDictionary, ICollection, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Specialized.IOrderedDictionary
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: OrderedDictionary
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
- uid: System.Collections.Specialized.OrderedDictionary.#ctor
  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 27
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public OrderedDictionary()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.OrderedDictionary()
- uid: System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary(System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 35
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class using the specified comparer.</p>\n"
  syntax:
    content: public OrderedDictionary(IEqualityComparer comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer)
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> to use to determine whether two keys are equal.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the default comparer, which is each key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.OrderedDictionary(IEqualityComparer)
- uid: System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)
  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 31
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class using the specified initial capacity.</p>\n"
  syntax:
    content: public OrderedDictionary(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection can contain.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.OrderedDictionary(Int32)
- uid: System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary(System.Int32, System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 39
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class using the specified initial capacity and comparer.</p>\n"
  syntax:
    content: public OrderedDictionary(int capacity, IEqualityComparer comparer)
    content.vb: Public Sub New(capacity As Integer, comparer As IEqualityComparer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection can contain.</p>\n"
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> to use to determine whether two keys are equal.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the default comparer, which is each key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.OrderedDictionary(Int32, IEqualityComparer)
- uid: System.Collections.Specialized.OrderedDictionary.Count
  commentId: P:System.Collections.Specialized.OrderedDictionary.Count
  id: Count
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 59
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the number of key/values pairs contained in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OrderedDictionary.Count
- uid: System.Collections.Specialized.OrderedDictionary.IsReadOnly
  commentId: P:System.Collections.Specialized.OrderedDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 81
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OrderedDictionary.IsReadOnly
- uid: System.Collections.Specialized.OrderedDictionary.Item(System.Int32)
  commentId: P:System.Collections.Specialized.OrderedDictionary.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 153
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the value at the specified index.</p>\n"
  syntax:
    content: public object this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the value to get or set.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value of the item at the specified index. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is being set and the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.Specialized.OrderedDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.OrderedDictionary.Item(System.Int32)
  name.vb: Item(Int32)
  nameWithType: OrderedDictionary.Item[Int32]
  nameWithType.vb: OrderedDictionary.Item(Int32)
- uid: System.Collections.Specialized.OrderedDictionary.Item(System.Object)
  commentId: P:System.Collections.Specialized.OrderedDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 178
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the value with the specified key.</p>\n"
  syntax:
    content: public object this[object key] { get; set; }
    content.vb: Public Property Item(key As Object) As Object
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the value to get or set.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with the specified key. If the specified key is not found, attempting to get it returns <strong>null</strong>, and attempting to set it creates a new element using the specified key.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is being set and the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  implements:
  - System.Collections.IDictionary.Item(System.Object)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.OrderedDictionary.Item(System.Object)
  name.vb: Item(Object)
  nameWithType: OrderedDictionary.Item[Object]
  nameWithType.vb: OrderedDictionary.Item(Object)
- uid: System.Collections.Specialized.OrderedDictionary.Keys
  commentId: P:System.Collections.Specialized.OrderedDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 103
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: public ICollection Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  implements:
  - System.Collections.IDictionary.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OrderedDictionary.Keys
- uid: System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 92
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> object is synchronized (thread-safe).</p>\n"
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>This method always returns <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
  nameWithType: OrderedDictionary.ICollection.IsSynchronized
  nameWithType.vb: OrderedDictionary.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 138
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
  nameWithType: OrderedDictionary.ICollection.SyncRoot
  nameWithType.vb: OrderedDictionary.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Specialized.OrderedDictionary.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.Collections.Specialized.OrderedDictionary.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.System.Collections.IDictionary.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.IsFixedSize
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 70
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  syntax:
    content: bool IDictionary.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.IsFixedSize
  nameWithType: OrderedDictionary.IDictionary.IsFixedSize
  nameWithType.vb: OrderedDictionary.System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.Specialized.OrderedDictionary.Values
  commentId: P:System.Collections.Specialized.OrderedDictionary.Values
  id: Values
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.Values
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 205
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: public ICollection Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  implements:
  - System.Collections.IDictionary.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OrderedDictionary.Values
- uid: System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)
  commentId: M:System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 216
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Adds an entry with the specified key and value into the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection with the lowest available index.</p>\n"
  syntax:
    content: public void Add(object key, object value)
    content.vb: Public Sub Add(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the entry to add.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the entry to add. This value can be <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  implements:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.Add(Object, Object)
- uid: System.Collections.Specialized.OrderedDictionary.AsReadOnly
  commentId: M:System.Collections.Specialized.OrderedDictionary.AsReadOnly
  id: AsReadOnly
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.AsReadOnly()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsReadOnly
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 242
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns a read-only copy of the current <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: public OrderedDictionary AsReadOnly()
    content.vb: Public Function AsReadOnly As OrderedDictionary
    return:
      type: System.Collections.Specialized.OrderedDictionary
      description: "\n<p>A read-only copy of the current <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.AsReadOnly()
- uid: System.Collections.Specialized.OrderedDictionary.Clear
  commentId: M:System.Collections.Specialized.OrderedDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 229
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes all elements from the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  implements:
  - System.Collections.IDictionary.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.Clear()
- uid: System.Collections.Specialized.OrderedDictionary.Contains(System.Object)
  commentId: M:System.Collections.Specialized.OrderedDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 250
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection contains a specific key.</p>\n"
  syntax:
    content: public bool Contains(object key)
    content.vb: Public Function Contains(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection contains an element with the specified key; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.Contains(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.Contains(Object)
- uid: System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 258
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Copies the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> elements to a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> object at the specified index.</p>\n"
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> object that is the destination of the <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> objects copied from <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.CopyTo(Array, Int32)
- uid: System.Collections.Specialized.OrderedDictionary.GetEnumerator
  commentId: M:System.Collections.Specialized.OrderedDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 346
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that iterates through the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: public virtual IDictionaryEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object for the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  implements:
  - System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  - System.Collections.IDictionary.GetEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: OrderedDictionary.GetEnumerator()
- uid: System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  commentId: M:System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  id: Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.Insert(System.Int32, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 289
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Inserts a new entry into the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection with the specified key and value at the specified index.</p>\n"
  syntax:
    content: public void Insert(int index, object key, object value)
    content.vb: Public Sub Insert(index As Integer, key As Object, value As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which the element should be inserted.</p>\n"
    - id: key
      type: System.Object
      description: "\n<p>The key of the entry to add.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the entry to add. The value can be <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is out of range.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This collection is read-only.</p>\n"
  implements:
  - System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.Insert(Int32, Object, Object)
- uid: System.Collections.Specialized.OrderedDictionary.Remove(System.Object)
  commentId: M:System.Collections.Specialized.OrderedDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 324
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes the entry with the specified key from the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: public void Remove(object key)
    content.vb: Public Sub Remove(key As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the entry to remove.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.Remove(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.Remove(Object)
- uid: System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)
  commentId: M:System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 306
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes the entry at the specified index from the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the entry to remove.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>- or -</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.Specialized.OrderedDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OrderedDictionary.RemoveAt(Int32)
- uid: System.Collections.Specialized.OrderedDictionary.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Specialized.OrderedDictionary.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 353
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that iterates through the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object for the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: OrderedDictionary.IEnumerable.GetEnumerator()
  nameWithType.vb: OrderedDictionary.System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Collections.Specialized.IOrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Specialized.IOrderedDictionary
  nameWithType: IOrderedDictionary
  commentId: T:System.Collections.Specialized.IOrderedDictionary
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IDictionary
  nameWithType: IDictionary
  commentId: T:System.Collections.IDictionary
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection
  nameWithType: ICollection
  commentId: T:System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerable
  nameWithType: IEnumerable
  commentId: T:System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Queryable.AsQueryable()
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: ParallelEnumerable.AsParallel()
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Enumerable.Cast<TResult>()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Enumerable.OfType<TResult>()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections
  nameWithType: System.Collections
  commentId: N:System.Collections
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Queryable.AsQueryable(IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
- uid: System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.Queryable
  nameWithType: Queryable
  commentId: T:System.Linq.Queryable
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
- uid: System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable
  nameWithType: ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
- uid: System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.Enumerable
  nameWithType: Enumerable
  commentId: T:System.Linq.Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
- uid: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq
  nameWithType: System.Linq
  commentId: N:System.Linq
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEqualityComparer
  nameWithType: IEqualityComparer
  commentId: T:System.Collections.IEqualityComparer
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.Count
  nameWithType: ICollection.Count
  commentId: P:System.Collections.ICollection.Count
- uid: System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.IsReadOnly
  nameWithType: IDictionary.IsReadOnly
  commentId: P:System.Collections.IDictionary.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.Specialized.IOrderedDictionary.Item[System.Int32]
  fullname.vb: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
    name: "XXX"
    fullName: System.Collections.Specialized.IOrderedDictionary.Item
  - name: 'XXX'
    fullName: '['
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: 'XXX'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
    name: "XXX"
    fullName: System.Collections.Specialized.IOrderedDictionary.Item
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IOrderedDictionary.Item[Int32]
  nameWithType.vb: IOrderedDictionary.Item(Int32)
  commentId: P:System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
- uid: System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Item[System.Object]
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: 'XXX'
    fullName: '['
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.Item[Object]
  nameWithType.vb: IDictionary.Item(Object)
  commentId: P:System.Collections.IDictionary.Item(System.Object)
- uid: System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Keys
  nameWithType: IDictionary.Keys
  commentId: P:System.Collections.IDictionary.Keys
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.IsSynchronized
  nameWithType: ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.SyncRoot
  nameWithType: ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
- uid: System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.IsFixedSize
  nameWithType: IDictionary.IsFixedSize
  commentId: P:System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Values
  nameWithType: IDictionary.Values
  commentId: P:System.Collections.IDictionary.Values
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.Add(Object, Object)
  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
- uid: System.Collections.Specialized.OrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Specialized.OrderedDictionary
  nameWithType: OrderedDictionary
  commentId: T:System.Collections.Specialized.OrderedDictionary
- uid: System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: "XXX"
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: "XXX"
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.Clear()
  commentId: M:System.Collections.IDictionary.Clear
- uid: System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.Contains(Object)
  commentId: M:System.Collections.IDictionary.Contains(System.Object)
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: "XXX"
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: "XXX"
    fullName: System.Collections.ICollection.CopyTo
  - name: "XXX"
    fullName: (
  - uid: System.Array
    name: "XXX"
    fullName: System.Array
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: "XXX"
    fullName: System.Collections.ICollection.CopyTo
  - name: "XXX"
    fullName: (
  - uid: System.Array
    name: "XXX"
    fullName: System.Array
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: ICollection.CopyTo(Array, Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Array
  nameWithType: Array
  commentId: T:System.Array
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
    name: "XXX"
    fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
    name: "XXX"
    fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IOrderedDictionary.GetEnumerator()
  commentId: M:System.Collections.Specialized.IOrderedDictionary.GetEnumerator
- uid: System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.GetEnumerator()
  commentId: M:System.Collections.IDictionary.GetEnumerator
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  commentId: T:System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32, System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
    name: "XXX"
    fullName: System.Collections.Specialized.IOrderedDictionary.Insert
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
    name: "XXX"
    fullName: System.Collections.Specialized.IOrderedDictionary.Insert
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IOrderedDictionary.Insert(Int32, Object, Object)
  commentId: M:System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
- uid: System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.Remove(Object)
  commentId: M:System.Collections.IDictionary.Remove(System.Object)
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
    name: "XXX"
    fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
    name: "XXX"
    fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IOrderedDictionary.RemoveAt(Int32)
  commentId: M:System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable.GetEnumerator()
  commentId: M:System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerator
  nameWithType: IEnumerator
  commentId: T:System.Collections.IEnumerator
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException

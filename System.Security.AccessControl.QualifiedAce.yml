items:
- uid: System.Security.AccessControl.QualifiedAce
  commentId: T:System.Security.AccessControl.QualifiedAce
  id: QualifiedAce
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.QualifiedAce.AceQualifier
  - System.Security.AccessControl.QualifiedAce.GetOpaque
  - System.Security.AccessControl.QualifiedAce.IsCallback
  - System.Security.AccessControl.QualifiedAce.OpaqueLength
  - System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.QualifiedAce
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: QualifiedAce
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 455
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents an Access Control Entry (ACE) that contains a qualifier. The qualifier, represented by an <xref href=\"System.Security.AccessControl.AceQualifier\" data-throw-if-not-resolved=\"false\"></xref> object, specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms. The <xref href=\"System.Security.AccessControl.QualifiedAce\" data-throw-if-not-resolved=\"false\"></xref> class is the abstract base class for the <xref href=\"System.Security.AccessControl.CommonAce\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.AccessControl.ObjectAce\" data-throw-if-not-resolved=\"false\"></xref> classes.</p>\n"
  syntax:
    content: 'public abstract class QualifiedAce : KnownAce'
    content.vb: >-
      Public MustInherit Class QualifiedAce
          Inherits KnownAce
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAce
  - System.Security.AccessControl.KnownAce
  inheritedMembers:
  - System.Security.AccessControl.KnownAce.AccessMask
  - System.Security.AccessControl.KnownAce.SecurityIdentifier
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.BinaryLength
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.PropagationFlags
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: QualifiedAce
- uid: System.Security.AccessControl.QualifiedAce.AceQualifier
  commentId: P:System.Security.AccessControl.QualifiedAce.AceQualifier
  id: AceQualifier
  parent: System.Security.AccessControl.QualifiedAce
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.QualifiedAce.AceQualifier
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AceQualifier
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 458
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets a value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.</p>\n"
  syntax:
    content: public AceQualifier AceQualifier { get; }
    content.vb: Public ReadOnly Property AceQualifier As AceQualifier
    parameters: []
    return:
      type: System.Security.AccessControl.AceQualifier
      description: "\n<p>A value that specifies whether the ACE allows access, denies access, causes system audits, or causes system alarms.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: QualifiedAce.AceQualifier
- uid: System.Security.AccessControl.QualifiedAce.IsCallback
  commentId: P:System.Security.AccessControl.QualifiedAce.IsCallback
  id: IsCallback
  parent: System.Security.AccessControl.QualifiedAce
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.QualifiedAce.IsCallback
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsCallback
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 459
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies whether this <xref href=\"System.Security.AccessControl.QualifiedAce\" data-throw-if-not-resolved=\"false\"></xref> object contains callback data.</p>\n"
  syntax:
    content: public bool IsCallback { get; }
    content.vb: Public ReadOnly Property IsCallback As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this <xref href=\"System.Security.AccessControl.QualifiedAce\" data-throw-if-not-resolved=\"false\"></xref> object contains callback data; otherwise, false.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: QualifiedAce.IsCallback
- uid: System.Security.AccessControl.QualifiedAce.OpaqueLength
  commentId: P:System.Security.AccessControl.QualifiedAce.OpaqueLength
  id: OpaqueLength
  parent: System.Security.AccessControl.QualifiedAce
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.QualifiedAce.OpaqueLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpaqueLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 460
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the length of the opaque callback data associated with this <xref href=\"System.Security.AccessControl.QualifiedAce\" data-throw-if-not-resolved=\"false\"></xref> object. This property is valid only for callback Access Control Entries (ACEs).</p>\n"
  syntax:
    content: public int OpaqueLength { get; }
    content.vb: Public ReadOnly Property OpaqueLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The length of the opaque callback data.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: QualifiedAce.OpaqueLength
- uid: System.Security.AccessControl.QualifiedAce.GetOpaque
  commentId: M:System.Security.AccessControl.QualifiedAce.GetOpaque
  id: GetOpaque
  parent: System.Security.AccessControl.QualifiedAce
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.QualifiedAce.GetOpaque()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOpaque
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 461
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Returns the opaque callback data associated with this <xref href=\"System.Security.AccessControl.QualifiedAce\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  syntax:
    content: public byte[] GetOpaque()
    content.vb: Public Function GetOpaque As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>An array of byte values that represents the opaque callback data associated with this <xref href=\"System.Security.AccessControl.QualifiedAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: QualifiedAce.GetOpaque()
- uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  commentId: M:System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  id: SetOpaque(System.Byte[])
  parent: System.Security.AccessControl.QualifiedAce
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetOpaque
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 462
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the opaque callback data associated with this <xref href=\"System.Security.AccessControl.QualifiedAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public void SetOpaque(byte[] opaque)
    content.vb: Public Sub SetOpaque(opaque As Byte())
    parameters:
    - id: opaque
      type: System.Byte[]
      description: "\n<p>An array of byte values that represents the opaque callback data for this <xref href=\"System.Security.AccessControl.QualifiedAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte())
  name.vb: SetOpaque(Byte())
  nameWithType: QualifiedAce.SetOpaque(Byte[])
  nameWithType.vb: QualifiedAce.SetOpaque(Byte())
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl
  commentId: N:System.Security.AccessControl
  nameWithType: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce
  commentId: T:System.Security.AccessControl.GenericAce
  nameWithType: GenericAce
- uid: System.Security.AccessControl.KnownAce
  parent: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.KnownAce
  commentId: T:System.Security.AccessControl.KnownAce
  nameWithType: KnownAce
- uid: System.Security.AccessControl.KnownAce.AccessMask
  parent: System.Security.AccessControl.KnownAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.KnownAce.AccessMask
  commentId: P:System.Security.AccessControl.KnownAce.AccessMask
  nameWithType: KnownAce.AccessMask
- uid: System.Security.AccessControl.KnownAce.SecurityIdentifier
  parent: System.Security.AccessControl.KnownAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.KnownAce.SecurityIdentifier
  commentId: P:System.Security.AccessControl.KnownAce.SecurityIdentifier
  nameWithType: KnownAce.SecurityIdentifier
- uid: System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.AceFlags
  commentId: P:System.Security.AccessControl.GenericAce.AceFlags
  nameWithType: GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.AceType
  commentId: P:System.Security.AccessControl.GenericAce.AceType
  nameWithType: GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
  commentId: P:System.Security.AccessControl.GenericAce.AuditFlags
  nameWithType: GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
  commentId: P:System.Security.AccessControl.GenericAce.BinaryLength
  nameWithType: GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
  commentId: P:System.Security.AccessControl.GenericAce.InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.IsInherited
  commentId: P:System.Security.AccessControl.GenericAce.IsInherited
  nameWithType: GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
  commentId: P:System.Security.AccessControl.GenericAce.PropagationFlags
  nameWithType: GenericAce.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.Copy()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Security.AccessControl.GenericAce.Copy
  nameWithType: GenericAce.Copy()
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)
  name.vb: CreateFromBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: "XXX"
    fullName: (
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: "XXX"
    fullName: (
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: "XXX"
    fullName: ()
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  nameWithType: GenericAce.CreateFromBinaryForm(Byte[], Int32)
  nameWithType.vb: GenericAce.CreateFromBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Security.AccessControl.GenericAce.Equals(System.Object)
  nameWithType: GenericAce.Equals(Object)
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: "XXX"
    fullName: (
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: "XXX"
    fullName: (
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: "XXX"
    fullName: ()
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  nameWithType: GenericAce.GetBinaryForm(Byte[], Int32)
  nameWithType.vb: GenericAce.GetBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: "XXX"
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Security.AccessControl.GenericAce.GetHashCode
  nameWithType: GenericAce.GetHashCode()
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Security.AccessControl.AceQualifier
  parent: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AceQualifier
  commentId: T:System.Security.AccessControl.AceQualifier
  nameWithType: AceQualifier
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.Byte[]
  name: "XXX"
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()

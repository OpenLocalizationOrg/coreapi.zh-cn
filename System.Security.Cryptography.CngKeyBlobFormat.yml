items:
- uid: System.Security.Cryptography.CngKeyBlobFormat
  commentId: T:System.Security.Cryptography.CngKeyBlobFormat
  id: CngKeyBlobFormat
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)
  - System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob
  - System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob
  - System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob
  - System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob
  - System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)
  - System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)
  - System.Security.Cryptography.CngKeyBlobFormat.Format
  - System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob
  - System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob
  - System.Security.Cryptography.CngKeyBlobFormat.GetHashCode
  - System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)
  - System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)
  - System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob
  - System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob
  - System.Security.Cryptography.CngKeyBlobFormat.ToString
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CngKeyBlobFormat
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 137
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Specifies a key BLOB format for use with Microsoft Cryptography Next Generation (CNG) objects. </p>\n"
  syntax:
    content: 'public sealed class CngKeyBlobFormat : IEquatable<CngKeyBlobFormat>'
    content.vb: >-
      Public NotInheritable Class CngKeyBlobFormat
          Implements IEquatable(Of CngKeyBlobFormat)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: CngKeyBlobFormat
- uid: System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)
  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.CngKeyBlobFormat(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 139
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> class by using the specified format.</p>\n"
  syntax:
    content: public CngKeyBlobFormat(string format)
    content.vb: Public Sub New(format As String)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>The key BLOB format to initialize.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>format</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>format</em> parameter length is 0 (zero).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: CngKeyBlobFormat.CngKeyBlobFormat(String)
- uid: System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob
  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob
  id: EccFullPrivateBlob
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EccFullPrivateBlob
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 140
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  syntax:
    content: public static CngKeyBlobFormat EccFullPrivateBlob { get; }
    content.vb: Public Shared ReadOnly Property EccFullPrivateBlob As CngKeyBlobFormat
    parameters: []
    return:
      type: System.Security.Cryptography.CngKeyBlobFormat
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: CngKeyBlobFormat.EccFullPrivateBlob
- uid: System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob
  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob
  id: EccFullPublicBlob
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EccFullPublicBlob
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 141
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  syntax:
    content: public static CngKeyBlobFormat EccFullPublicBlob { get; }
    content.vb: Public Shared ReadOnly Property EccFullPublicBlob As CngKeyBlobFormat
    parameters: []
    return:
      type: System.Security.Cryptography.CngKeyBlobFormat
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: CngKeyBlobFormat.EccFullPublicBlob
- uid: System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob
  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob
  id: EccPrivateBlob
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EccPrivateBlob
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 142
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object that specifies a private key BLOB for an elliptic curve cryptography (ECC) key.</p>\n"
  syntax:
    content: public static CngKeyBlobFormat EccPrivateBlob { get; }
    content.vb: Public Shared ReadOnly Property EccPrivateBlob As CngKeyBlobFormat
    parameters: []
    return:
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>An object that specifies an ECC private key BLOB.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: CngKeyBlobFormat.EccPrivateBlob
- uid: System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob
  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob
  id: EccPublicBlob
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EccPublicBlob
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 143
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object that specifies a public key BLOB for an elliptic curve cryptography (ECC) key.</p>\n"
  syntax:
    content: public static CngKeyBlobFormat EccPublicBlob { get; }
    content.vb: Public Shared ReadOnly Property EccPublicBlob As CngKeyBlobFormat
    parameters: []
    return:
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>An object that specifies an ECC public key BLOB.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: CngKeyBlobFormat.EccPublicBlob
- uid: System.Security.Cryptography.CngKeyBlobFormat.Format
  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.Format
  id: Format
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.Format
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Format
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 144
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the name of the key BLOB format that the current <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  syntax:
    content: public string Format { get; }
    content.vb: Public ReadOnly Property Format As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The embedded key BLOB format name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: CngKeyBlobFormat.Format
- uid: System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob
  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob
  id: GenericPrivateBlob
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericPrivateBlob
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 145
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object that specifies a generic private key BLOB.</p>\n"
  syntax:
    content: public static CngKeyBlobFormat GenericPrivateBlob { get; }
    content.vb: Public Shared ReadOnly Property GenericPrivateBlob As CngKeyBlobFormat
    parameters: []
    return:
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>An object that specifies a generic private key BLOB.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: CngKeyBlobFormat.GenericPrivateBlob
- uid: System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob
  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob
  id: GenericPublicBlob
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericPublicBlob
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 146
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object that specifies a generic public key BLOB.</p>\n"
  syntax:
    content: public static CngKeyBlobFormat GenericPublicBlob { get; }
    content.vb: Public Shared ReadOnly Property GenericPublicBlob As CngKeyBlobFormat
    parameters: []
    return:
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>An object that specifies a generic public key BLOB.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: CngKeyBlobFormat.GenericPublicBlob
- uid: System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob
  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob
  id: OpaqueTransportBlob
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpaqueTransportBlob
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 147
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object that specifies an opaque transport key BLOB.</p>\n"
  syntax:
    content: public static CngKeyBlobFormat OpaqueTransportBlob { get; }
    content.vb: Public Shared ReadOnly Property OpaqueTransportBlob As CngKeyBlobFormat
    parameters: []
    return:
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>An object that specifies an opaque transport key BLOB.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: CngKeyBlobFormat.OpaqueTransportBlob
- uid: System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob
  commentId: P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob
  id: Pkcs8PrivateBlob
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pkcs8PrivateBlob
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 148
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object that specifies a Private Key Information Syntax Standard (PKCS #8) key BLOB.</p>\n"
  syntax:
    content: public static CngKeyBlobFormat Pkcs8PrivateBlob { get; }
    content.vb: Public Shared ReadOnly Property Pkcs8PrivateBlob As CngKeyBlobFormat
    parameters: []
    return:
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>An object that specifies a PKCS #8 private key BLOB.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: CngKeyBlobFormat.Pkcs8PrivateBlob
- uid: System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)
  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 149
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Compares the specified object to the current <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to be compared to the current <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the same key BLOB format as the current object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: CngKeyBlobFormat.Equals(Object)
- uid: System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)
  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)
  id: Equals(System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 150
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Compares the specified <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object to the current <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public bool Equals(CngKeyBlobFormat other)
    content.vb: Public Function Equals(other As CngKeyBlobFormat) As Boolean
    parameters:
    - id: other
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>An object to be compared to the current <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>other</em> parameter specifies the same key BLOB format as the current object; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}.Equals(System.Security.Cryptography.CngKeyBlobFormat)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: CngKeyBlobFormat.Equals(CngKeyBlobFormat)
- uid: System.Security.Cryptography.CngKeyBlobFormat.GetHashCode
  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode
  id: GetHashCode
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 151
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Generates a hash value for the embedded key BLOB format in the current <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash value of the embedded key BLOB format. </p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: CngKeyBlobFormat.GetHashCode()
- uid: System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)
  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)
  id: op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.Equality(System.Security.Cryptography.CngKeyBlobFormat, System.Security.Cryptography.CngKeyBlobFormat)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 152
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> objects specify the same key BLOB format.</p>\n"
  syntax:
    content: public static bool operator ==(CngKeyBlobFormat left, CngKeyBlobFormat right)
    content.vb: Public Shared Operator =(left As CngKeyBlobFormat, right As CngKeyBlobFormat) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>An object that specifies a key BLOB format.</p>\n"
    - id: right
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>A second object, to be compared to the object identified by the <em>left</em> parameter.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects specify the same key BLOB format; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CngKeyBlobFormat.Equality(CngKeyBlobFormat, CngKeyBlobFormat)
- uid: System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)
  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)
  id: op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.Inequality(System.Security.Cryptography.CngKeyBlobFormat, System.Security.Cryptography.CngKeyBlobFormat)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 153
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> objects do not specify the same key BLOB format.</p>\n"
  syntax:
    content: public static bool operator !=(CngKeyBlobFormat left, CngKeyBlobFormat right)
    content.vb: Public Shared Operator <>(left As CngKeyBlobFormat, right As CngKeyBlobFormat) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>An object that specifies a key BLOB format.</p>\n"
    - id: right
      type: System.Security.Cryptography.CngKeyBlobFormat
      description: "\n<p>A second object, to be compared to the object identified by the <em>left</em> parameter.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects do not specify the same key BLOB format; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CngKeyBlobFormat.Inequality(CngKeyBlobFormat, CngKeyBlobFormat)
- uid: System.Security.Cryptography.CngKeyBlobFormat.ToString
  commentId: M:System.Security.Cryptography.CngKeyBlobFormat.ToString
  id: ToString
  parent: System.Security.Cryptography.CngKeyBlobFormat
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 154
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the name of the key BLOB format that the current <xref href=\"System.Security.Cryptography.CngKeyBlobFormat\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The embedded key BLOB format name.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: CngKeyBlobFormat.ToString()
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: "XXX"
  fullName: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  nameWithType: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}
  parent: System
  definition: System.IEquatable`1
  name: "XXX"
  fullName: System.IEquatable<System.Security.Cryptography.CngKeyBlobFormat>
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngKeyBlobFormat)
  name.vb: IEquatable(Of CngKeyBlobFormat)
  spec.csharp:
  - uid: System.IEquatable`1
    name: "XXX"
    fullName: System.IEquatable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Security.Cryptography.CngKeyBlobFormat
    name: "XXX"
    fullName: System.Security.Cryptography.CngKeyBlobFormat
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: "XXX"
    fullName: System.IEquatable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Security.Cryptography.CngKeyBlobFormat
    name: "XXX"
    fullName: System.Security.Cryptography.CngKeyBlobFormat
  - name: "XXX"
    fullName: )
  commentId: T:System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}
  nameWithType: IEquatable<CngKeyBlobFormat>
  nameWithType.vb: IEquatable(Of CngKeyBlobFormat)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.IEquatable`1
  isExternal: false
  name: "XXX"
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: "XXX"
    fullName: System.IEquatable
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: "XXX"
    fullName: System.IEquatable
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  commentId: T:System.IEquatable`1
  nameWithType: IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Security.Cryptography.CngKeyBlobFormat
  parent: System.Security.Cryptography
  isExternal: false
  name: "XXX"
  fullName: System.Security.Cryptography.CngKeyBlobFormat
  commentId: T:System.Security.Cryptography.CngKeyBlobFormat
  nameWithType: CngKeyBlobFormat
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}.Equals(System.Security.Cryptography.CngKeyBlobFormat)
  parent: System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}
  definition: System.IEquatable`1.Equals(`0)
  name: "XXX"
  fullName: System.IEquatable<System.Security.Cryptography.CngKeyBlobFormat>.Equals(System.Security.Cryptography.CngKeyBlobFormat)
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngKeyBlobFormat).Equals(System.Security.Cryptography.CngKeyBlobFormat)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: "XXX"
    fullName: System.IEquatable<System.Security.Cryptography.CngKeyBlobFormat>.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Security.Cryptography.CngKeyBlobFormat
    name: "XXX"
    fullName: System.Security.Cryptography.CngKeyBlobFormat
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: "XXX"
    fullName: System.IEquatable(Of System.Security.Cryptography.CngKeyBlobFormat).Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Security.Cryptography.CngKeyBlobFormat
    name: "XXX"
    fullName: System.Security.Cryptography.CngKeyBlobFormat
  - name: "XXX"
    fullName: )
  commentId: M:System.IEquatable{System.Security.Cryptography.CngKeyBlobFormat}.Equals(System.Security.Cryptography.CngKeyBlobFormat)
  nameWithType: IEquatable<CngKeyBlobFormat>.Equals(CngKeyBlobFormat)
  nameWithType.vb: IEquatable(Of CngKeyBlobFormat).Equals(CngKeyBlobFormat)
- uid: System.IEquatable`1.Equals(`0)
  isExternal: false
  name: "XXX"
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: "XXX"
    fullName: System.IEquatable<T>.Equals
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: "XXX"
    fullName: System.IEquatable(Of T).Equals
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  commentId: M:System.IEquatable`1.Equals(`0)
  nameWithType: IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException

items:
- uid: System.Security.Cryptography.CngProperty
  commentId: T:System.Security.Cryptography.CngProperty
  id: CngProperty
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)
  - System.Security.Cryptography.CngProperty.Equals(System.Object)
  - System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)
  - System.Security.Cryptography.CngProperty.GetHashCode
  - System.Security.Cryptography.CngProperty.GetValue
  - System.Security.Cryptography.CngProperty.Name
  - System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)
  - System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)
  - System.Security.Cryptography.CngProperty.Options
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty
  type: Struct
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CngProperty
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 197
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Encapsulates a property of a Cryptography Next Generation (CNG) key or provider.</p>\n"
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct CngProperty : IEquatable<CngProperty>
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure CngProperty
          Implements IEquatable(Of CngProperty)
  implements:
  - System.IEquatable{System.Security.Cryptography.CngProperty}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  nameWithType: CngProperty
- uid: System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)
  commentId: M:System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)
  id: '#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)'
  parent: System.Security.Cryptography.CngProperty
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty.CngProperty(System.String, System.Byte[], System.Security.Cryptography.CngPropertyOptions)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 200
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public CngProperty(string name, byte[] value, CngPropertyOptions options)
    content.vb: Public Sub New(name As String, value As Byte(), options As CngPropertyOptions)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The property name to initialize.</p>\n"
    - id: value
      type: System.Byte[]
      description: "\n<p>The property value to initialize.</p>\n"
    - id: options
      type: System.Security.Cryptography.CngPropertyOptions
      description: "\n<p>A bitwise combination of the enumeration values that specify how the property is stored.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.CngProperty.CngProperty(System.String, System.Byte(), System.Security.Cryptography.CngPropertyOptions)
  name.vb: CngProperty(String, Byte(), CngPropertyOptions)
  nameWithType: CngProperty.CngProperty(String, Byte[], CngPropertyOptions)
  nameWithType.vb: CngProperty.CngProperty(String, Byte(), CngPropertyOptions)
- uid: System.Security.Cryptography.CngProperty.Name
  commentId: P:System.Security.Cryptography.CngProperty.Name
  id: Name
  parent: System.Security.Cryptography.CngProperty
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty.Name
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 201
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the property name that the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The property name that is set in the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: CngProperty.Name
- uid: System.Security.Cryptography.CngProperty.Options
  commentId: P:System.Security.Cryptography.CngProperty.Options
  id: Options
  parent: System.Security.Cryptography.CngProperty
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty.Options
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Options
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 202
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the property options that the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  syntax:
    content: public CngPropertyOptions Options { get; }
    content.vb: Public ReadOnly Property Options As CngPropertyOptions
    parameters: []
    return:
      type: System.Security.Cryptography.CngPropertyOptions
      description: "\n<p>An object that specifies the options that are set in the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: CngProperty.Options
- uid: System.Security.Cryptography.CngProperty.Equals(System.Object)
  commentId: M:System.Security.Cryptography.CngProperty.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Cryptography.CngProperty
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 203
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Compares the specified object to the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to be compared to the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the same property as the current object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: CngProperty.Equals(Object)
- uid: System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)
  commentId: M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)
  id: Equals(System.Security.Cryptography.CngProperty)
  parent: System.Security.Cryptography.CngProperty
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 204
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Compares the specified <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object to the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public bool Equals(CngProperty other)
    content.vb: Public Function Equals(other As CngProperty) As Boolean
    parameters:
    - id: other
      type: System.Security.Cryptography.CngProperty
      description: "\n<p>An object to be compared to the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>other</em> parameter represents the same property as the current object; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.Security.Cryptography.CngProperty}.Equals(System.Security.Cryptography.CngProperty)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: CngProperty.Equals(CngProperty)
- uid: System.Security.Cryptography.CngProperty.GetHashCode
  commentId: M:System.Security.Cryptography.CngProperty.GetHashCode
  id: GetHashCode
  parent: System.Security.Cryptography.CngProperty
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 205
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Generates a hash value for the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash value of the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: CngProperty.GetHashCode()
- uid: System.Security.Cryptography.CngProperty.GetValue
  commentId: M:System.Security.Cryptography.CngProperty.GetValue
  id: GetValue
  parent: System.Security.Cryptography.CngProperty
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty.GetValue()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 206
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the property value that the current <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  syntax:
    content: public byte[] GetValue()
    content.vb: Public Function GetValue As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>An array that represents the value stored in the property.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: CngProperty.GetValue()
- uid: System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)
  commentId: M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)
  id: op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)
  parent: System.Security.Cryptography.CngProperty
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty.Equality(System.Security.Cryptography.CngProperty, System.Security.Cryptography.CngProperty)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 207
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> objects specify the same property name, value, and options.</p>\n"
  syntax:
    content: public static bool operator ==(CngProperty left, CngProperty right)
    content.vb: Public Shared Operator =(left As CngProperty, right As CngProperty) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.CngProperty
      description: "\n<p>An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</p>\n"
    - id: right
      type: System.Security.Cryptography.CngProperty
      description: "\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects specify the same property; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CngProperty.Equality(CngProperty, CngProperty)
- uid: System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)
  commentId: M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)
  id: op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)
  parent: System.Security.Cryptography.CngProperty
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty.Inequality(System.Security.Cryptography.CngProperty, System.Security.Cryptography.CngProperty)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 208
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> objects do not specify the same property name, value, and options.</p>\n"
  syntax:
    content: public static bool operator !=(CngProperty left, CngProperty right)
    content.vb: Public Shared Operator <>(left As CngProperty, right As CngProperty) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.CngProperty
      description: "\n<p>An object that specifies a property of a Cryptography Next Generation (CNG) key or provider.</p>\n"
    - id: right
      type: System.Security.Cryptography.CngProperty
      description: "\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects do not specify the same property; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CngProperty.Inequality(CngProperty, CngProperty)
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: "XXX"
  fullName: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  nameWithType: System.Security.Cryptography
- uid: System.IEquatable{System.Security.Cryptography.CngProperty}
  parent: System
  definition: System.IEquatable`1
  name: "XXX"
  fullName: System.IEquatable<System.Security.Cryptography.CngProperty>
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngProperty)
  name.vb: IEquatable(Of CngProperty)
  spec.csharp:
  - uid: System.IEquatable`1
    name: "XXX"
    fullName: System.IEquatable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Security.Cryptography.CngProperty
    name: "XXX"
    fullName: System.Security.Cryptography.CngProperty
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: "XXX"
    fullName: System.IEquatable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Security.Cryptography.CngProperty
    name: "XXX"
    fullName: System.Security.Cryptography.CngProperty
  - name: "XXX"
    fullName: )
  commentId: T:System.IEquatable{System.Security.Cryptography.CngProperty}
  nameWithType: IEquatable<CngProperty>
  nameWithType.vb: IEquatable(Of CngProperty)
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: "XXX"
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: "XXX"
    fullName: System.ValueType.ToString
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: "XXX"
    fullName: System.ValueType.ToString
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.ValueType.ToString
  nameWithType: ValueType.ToString()
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.IEquatable`1
  isExternal: false
  name: "XXX"
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: "XXX"
    fullName: System.IEquatable
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: "XXX"
    fullName: System.IEquatable
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  commentId: T:System.IEquatable`1
  nameWithType: IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.ValueType
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ValueType
  commentId: T:System.ValueType
  nameWithType: ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Byte[]
  name: "XXX"
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
- uid: System.Security.Cryptography.CngPropertyOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: "XXX"
  fullName: System.Security.Cryptography.CngPropertyOptions
  commentId: T:System.Security.Cryptography.CngPropertyOptions
  nameWithType: CngPropertyOptions
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: "XXX"
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: "XXX"
    fullName: System.ValueType.Equals
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: "XXX"
    fullName: System.ValueType.Equals
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.ValueType.Equals(System.Object)
  nameWithType: ValueType.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.IEquatable{System.Security.Cryptography.CngProperty}.Equals(System.Security.Cryptography.CngProperty)
  parent: System.IEquatable{System.Security.Cryptography.CngProperty}
  definition: System.IEquatable`1.Equals(`0)
  name: "XXX"
  fullName: System.IEquatable<System.Security.Cryptography.CngProperty>.Equals(System.Security.Cryptography.CngProperty)
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngProperty).Equals(System.Security.Cryptography.CngProperty)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: "XXX"
    fullName: System.IEquatable<System.Security.Cryptography.CngProperty>.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Security.Cryptography.CngProperty
    name: "XXX"
    fullName: System.Security.Cryptography.CngProperty
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: "XXX"
    fullName: System.IEquatable(Of System.Security.Cryptography.CngProperty).Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Security.Cryptography.CngProperty
    name: "XXX"
    fullName: System.Security.Cryptography.CngProperty
  - name: "XXX"
    fullName: )
  commentId: M:System.IEquatable{System.Security.Cryptography.CngProperty}.Equals(System.Security.Cryptography.CngProperty)
  nameWithType: IEquatable<CngProperty>.Equals(CngProperty)
  nameWithType.vb: IEquatable(Of CngProperty).Equals(CngProperty)
- uid: System.Security.Cryptography.CngProperty
  parent: System.Security.Cryptography
  isExternal: false
  name: "XXX"
  fullName: System.Security.Cryptography.CngProperty
  commentId: T:System.Security.Cryptography.CngProperty
  nameWithType: CngProperty
- uid: System.IEquatable`1.Equals(`0)
  isExternal: false
  name: "XXX"
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: "XXX"
    fullName: System.IEquatable<T>.Equals
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: "XXX"
    fullName: System.IEquatable(Of T).Equals
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  commentId: M:System.IEquatable`1.Equals(`0)
  nameWithType: IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: "XXX"
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: "XXX"
    fullName: System.ValueType.GetHashCode
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: "XXX"
    fullName: System.ValueType.GetHashCode
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.ValueType.GetHashCode
  nameWithType: ValueType.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException

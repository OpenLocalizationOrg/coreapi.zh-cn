items:
- uid: System.Threading.Tasks.ParallelLoopState
  commentId: T:System.Threading.Tasks.ParallelLoopState
  id: ParallelLoopState
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.ParallelLoopState.Break
  - System.Threading.Tasks.ParallelLoopState.IsExceptional
  - System.Threading.Tasks.ParallelLoopState.IsStopped
  - System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  - System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  - System.Threading.Tasks.ParallelLoopState.Stop
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.ParallelLoopState
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ParallelLoopState
    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 28
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> class to each loop; you can not create instances in your code. </p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      [DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")]

      public class ParallelLoopState
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      <DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")>

      Public Class ParallelLoopState
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: ParallelLoopState
- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional
  commentId: P:System.Threading.Tasks.ParallelLoopState.IsExceptional
  id: IsExceptional
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.ParallelLoopState.IsExceptional
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsExceptional
    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 91
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration. </p>\n"
  syntax:
    content: public bool IsExceptional { get; }
    content.vb: Public ReadOnly Property IsExceptional As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an unhandled exception was thrown; otherwise, <strong>false</strong>.  </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ParallelLoopState.IsExceptional
- uid: System.Threading.Tasks.ParallelLoopState.IsStopped
  commentId: P:System.Threading.Tasks.ParallelLoopState.IsStopped
  id: IsStopped
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.ParallelLoopState.IsStopped
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsStopped
    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 79
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets whether any iteration of the loop has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  syntax:
    content: public bool IsStopped { get; }
    content.vb: Public ReadOnly Property IsStopped As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if any iteration has stopped the loop by calling the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ParallelLoopState.IsStopped
- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  commentId: P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  id: LowestBreakIteration
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LowestBreakIteration
    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 118
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the lowest iteration of the loop from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> was called. </p>\n"
  syntax:
    content: public long ? LowestBreakIteration { get; }
    content.vb: Public ReadOnly Property LowestBreakIteration As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The lowest iteration from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> was called. In the case of a <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> loop, the value is based on an internally-generated index. </p>\n"
  seealso:
  - type: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
    commentId: P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  - type: System.Threading.Tasks.ParallelLoopState.Break
    commentId: M:System.Threading.Tasks.ParallelLoopState.Break
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ParallelLoopState.LowestBreakIteration
- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  commentId: P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  id: ShouldExitCurrentIteration
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ShouldExitCurrentIteration
    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 68
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</p>\n"
  syntax:
    content: public bool ShouldExitCurrentIteration { get; }
    content.vb: Public ReadOnly Property ShouldExitCurrentIteration As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current iteration should exit; otherwise, <strong>false</strong>. </p>\n"
  seealso:
  - type: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
    commentId: P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  - type: System.Threading.Tasks.ParallelLoopState.Break
    commentId: M:System.Threading.Tasks.ParallelLoopState.Break
  - type: System.Threading.Tasks.ParallelLoopState.Stop
    commentId: M:System.Threading.Tasks.ParallelLoopState.Stop
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ParallelLoopState.ShouldExitCurrentIteration
- uid: System.Threading.Tasks.ParallelLoopState.Break
  commentId: M:System.Threading.Tasks.ParallelLoopState.Break
  id: Break
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.ParallelLoopState.Break()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Break
    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 185
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Communicates that the <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience. </p>\n"
  syntax:
    content: public void Break()
    content.vb: Public Sub Break
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method was previously called. <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> may not be used in combination by iterations of the same loop.</p>\n"
  seealso:
  - type: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
    commentId: P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  - type: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
    commentId: P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ParallelLoopState.Break()
- uid: System.Threading.Tasks.ParallelLoopState.Stop
  commentId: M:System.Threading.Tasks.ParallelLoopState.Stop
  id: Stop
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.ParallelLoopState.Stop()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Stop
    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 146
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Communicates that the <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> loop should cease execution at the system's earliest convenience.</p>\n"
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method was called previously. <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> may not be used in combination by iterations of the same loop.</p>\n"
  seealso:
  - type: System.Threading.Tasks.ParallelLoopState.IsStopped
    commentId: P:System.Threading.Tasks.ParallelLoopState.IsStopped
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ParallelLoopState.Stop()
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: "XXX"
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: "XXX"
    fullName: System.Nullable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Int64
    name: "XXX"
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: "XXX"
    fullName: System.Nullable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Int64
    name: "XXX"
    fullName: System.Int64
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Nullable<Int64>
  nameWithType.vb: Nullable(Of Int64)
  commentId: T:System.Nullable{System.Int64}
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: "XXX"
    fullName: System.Nullable
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: "XXX"
    fullName: System.Nullable
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: Nullable<T>
  nameWithType.vb: Nullable(Of T)
  commentId: T:System.Nullable`1
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException

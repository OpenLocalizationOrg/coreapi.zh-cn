items:
- uid: System.Xml.XmlNodeChangedEventArgs
  commentId: T:System.Xml.XmlNodeChangedEventArgs
  id: XmlNodeChangedEventArgs
  parent: System.Xml
  children:
  - System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)
  - System.Xml.XmlNodeChangedEventArgs.Action
  - System.Xml.XmlNodeChangedEventArgs.NewParent
  - System.Xml.XmlNodeChangedEventArgs.NewValue
  - System.Xml.XmlNodeChangedEventArgs.Node
  - System.Xml.XmlNodeChangedEventArgs.OldParent
  - System.Xml.XmlNodeChangedEventArgs.OldValue
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNodeChangedEventArgs
  type: Class
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlNodeChangedEventArgs
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 290
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Provides data for the <xref href=\"System.Xml.XmlDocument.NodeChanged\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlDocument.NodeChanging\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlDocument.NodeInserted\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlDocument.NodeInserting\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlDocument.NodeRemoved\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlDocument.NodeRemoving\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n"
  syntax:
    content: 'public class XmlNodeChangedEventArgs : EventArgs'
    content.vb: >-
      Public Class XmlNodeChangedEventArgs
          Inherits EventArgs
  seealso:
  - type: System.Xml.XmlNodeChangedEventHandler
    commentId: T:System.Xml.XmlNodeChangedEventHandler
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: XmlNodeChangedEventArgs
- uid: System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)
  commentId: M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)
  id: '#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)'
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNodeChangedEventArgs.XmlNodeChangedEventArgs(System.Xml.XmlNode, System.Xml.XmlNode, System.Xml.XmlNode, System.String, System.String, System.Xml.XmlNodeChangedAction)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 292
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlNodeChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public XmlNodeChangedEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action)
    content.vb: Public Sub New(node As XmlNode, oldParent As XmlNode, newParent As XmlNode, oldValue As String, newValue As String, action As XmlNodeChangedAction)
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "\n<p>The <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> that generated the event.</p>\n"
    - id: oldParent
      type: System.Xml.XmlNode
      description: "\n<p>The old parent <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> that generated the event.</p>\n"
    - id: newParent
      type: System.Xml.XmlNode
      description: "\n<p>The new parent <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> that generated the event.</p>\n"
    - id: oldValue
      type: System.String
      description: "\n<p>The old value of the <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> that generated the event.</p>\n"
    - id: newValue
      type: System.String
      description: "\n<p>The new value of the <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> that generated the event.</p>\n"
    - id: action
      type: System.Xml.XmlNodeChangedAction
      description: "\n<p>The <xref href=\"System.Xml.XmlNodeChangedAction\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlNodeChangedEventArgs.XmlNodeChangedEventArgs(XmlNode, XmlNode, XmlNode, String, String, XmlNodeChangedAction)
- uid: System.Xml.XmlNodeChangedEventArgs.Action
  commentId: P:System.Xml.XmlNodeChangedEventArgs.Action
  id: Action
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNodeChangedEventArgs.Action
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Action
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 293
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating what type of node change event is occurring.</p>\n"
  syntax:
    content: public XmlNodeChangedAction Action { get; }
    content.vb: Public ReadOnly Property Action As XmlNodeChangedAction
    parameters: []
    return:
      type: System.Xml.XmlNodeChangedAction
      description: "\n<p>An <strong>XmlNodeChangedAction</strong> value describing the node change event.</p>\n<p>XmlNodeChangedAction Value </p>\n<p>Description </p>\n<table><tbody><tr><td>\n<p>Insert </p>\n</td><td>\n<p>A node has been or will be inserted. </p>\n</td></tr><tr><td>\n<p>Remove </p>\n</td><td>\n<p>A node has been or will be removed. </p>\n</td></tr><tr><td>\n<p>Change </p>\n</td><td>\n<p>A node has been or will be changed. </p>\n</td></tr></tbody></table>\n<p>The <strong>Action</strong> value does not differentiate between when the event occurred (before or after). You can create separate event handlers to handle both instances.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XmlNodeChangedEventArgs.Action
- uid: System.Xml.XmlNodeChangedEventArgs.NewParent
  commentId: P:System.Xml.XmlNodeChangedEventArgs.NewParent
  id: NewParent
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNodeChangedEventArgs.NewParent
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewParent
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 294
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the value of the <xref href=\"System.Xml.XmlNode.ParentNode\" data-throw-if-not-resolved=\"false\"></xref> after the operation completes.</p>\n"
  syntax:
    content: public XmlNode NewParent { get; }
    content.vb: Public ReadOnly Property NewParent As XmlNode
    parameters: []
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The value of the <strong>ParentNode</strong> after the operation completes. This property returns <strong>null</strong> if the node is being removed.</p>\n<p>For attribute nodes this property returns the <xref href=\"System.Xml.XmlAttribute.OwnerElement\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XmlNodeChangedEventArgs.NewParent
- uid: System.Xml.XmlNodeChangedEventArgs.NewValue
  commentId: P:System.Xml.XmlNodeChangedEventArgs.NewValue
  id: NewValue
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNodeChangedEventArgs.NewValue
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewValue
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 295
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the new value of the node.</p>\n"
  syntax:
    content: public string NewValue { get; }
    content.vb: Public ReadOnly Property NewValue As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The new value of the node. This property returns <strong>null</strong> if the node is neither an attribute nor a text node, or if the node is being removed.</p>\n<p>If called in a <xref href=\"System.Xml.XmlDocument.NodeChanging\" data-throw-if-not-resolved=\"false\"></xref> event, <strong>NewValue</strong> returns the value of the node if the change is successful. If called in a <xref href=\"System.Xml.XmlDocument.NodeChanged\" data-throw-if-not-resolved=\"false\"></xref> event, <strong>NewValue</strong> returns the current value of the node.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XmlNodeChangedEventArgs.NewValue
- uid: System.Xml.XmlNodeChangedEventArgs.Node
  commentId: P:System.Xml.XmlNodeChangedEventArgs.Node
  id: Node
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNodeChangedEventArgs.Node
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Node
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 296
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> that is being added, removed or changed.</p>\n"
  syntax:
    content: public XmlNode Node { get; }
    content.vb: Public ReadOnly Property Node As XmlNode
    parameters: []
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The <strong>XmlNode</strong> that is being added, removed or changed; this property never returns <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XmlNodeChangedEventArgs.Node
- uid: System.Xml.XmlNodeChangedEventArgs.OldParent
  commentId: P:System.Xml.XmlNodeChangedEventArgs.OldParent
  id: OldParent
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNodeChangedEventArgs.OldParent
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OldParent
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 297
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the value of the <xref href=\"System.Xml.XmlNode.ParentNode\" data-throw-if-not-resolved=\"false\"></xref> before the operation began.</p>\n"
  syntax:
    content: public XmlNode OldParent { get; }
    content.vb: Public ReadOnly Property OldParent As XmlNode
    parameters: []
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The value of the <strong>ParentNode</strong> before the operation began. This property returns <strong>null</strong> if the node did not have a parent.</p>\n<p>For attribute nodes this property returns the <xref href=\"System.Xml.XmlAttribute.OwnerElement\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XmlNodeChangedEventArgs.OldParent
- uid: System.Xml.XmlNodeChangedEventArgs.OldValue
  commentId: P:System.Xml.XmlNodeChangedEventArgs.OldValue
  id: OldValue
  parent: System.Xml.XmlNodeChangedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNodeChangedEventArgs.OldValue
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OldValue
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 298
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the original value of the node.</p>\n"
  syntax:
    content: public string OldValue { get; }
    content.vb: Public ReadOnly Property OldValue As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The original value of the node. This property returns <strong>null</strong> if the node is neither an attribute nor a text node, or if the node is being inserted.</p>\n<p>If called in a <xref href=\"System.Xml.XmlDocument.NodeChanging\" data-throw-if-not-resolved=\"false\"></xref> event, <strong>OldValue</strong> returns the current value of the node that will be replaced if the change is successful. If called in a <xref href=\"System.Xml.XmlDocument.NodeChanged\" data-throw-if-not-resolved=\"false\"></xref> event, <strong>OldValue</strong> returns the value of node prior to the change.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XmlNodeChangedEventArgs.OldValue
references:
- uid: System.Xml
  isExternal: false
  name: "XXX"
  fullName: System.Xml
  commentId: N:System.Xml
  nameWithType: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.EventArgs
  commentId: T:System.EventArgs
  nameWithType: EventArgs
- uid: System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: "XXX"
  fullName: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  nameWithType: EventArgs.Empty
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: "XXX"
  fullName: System.Xml.XmlNode
  commentId: T:System.Xml.XmlNode
  nameWithType: XmlNode
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Xml.XmlNodeChangedAction
  parent: System.Xml
  isExternal: false
  name: "XXX"
  fullName: System.Xml.XmlNodeChangedAction
  commentId: T:System.Xml.XmlNodeChangedAction
  nameWithType: XmlNodeChangedAction

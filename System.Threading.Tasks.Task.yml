items:
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  id: Task
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.Task.#ctor(System.Action)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.AsyncState
  - System.Threading.Tasks.Task.CompletedTask
  - System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.CreationOptions
  - System.Threading.Tasks.Task.CurrentId
  - System.Threading.Tasks.Task.Delay(System.Int32)
  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Exception
  - System.Threading.Tasks.Task.Factory
  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromException(System.Exception)
  - System.Threading.Tasks.Task.FromException``1(System.Exception)
  - System.Threading.Tasks.Task.FromResult``1(``0)
  - System.Threading.Tasks.Task.GetAwaiter
  - System.Threading.Tasks.Task.Id
  - System.Threading.Tasks.Task.IsCanceled
  - System.Threading.Tasks.Task.IsCompleted
  - System.Threading.Tasks.Task.IsFaulted
  - System.Threading.Tasks.Task.Run(System.Action)
  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{``0})
  - System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.RunSynchronously
  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Start
  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Status
  - System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  - System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  - System.Threading.Tasks.Task.Wait
  - System.Threading.Tasks.Task.Wait(System.Int32)
  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.Yield
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Task
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 139
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Represents an asynchronous operation.</p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      [DebuggerTypeProxy(typeof (SystemThreadingTasks_TaskDebugView))]

      [DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")]

      public class Task : IThreadPoolWorkItem, IAsyncResult, IDisposable
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      <DebuggerTypeProxy(GetType(SystemThreadingTasks_TaskDebugView))>

      <DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")>

      Public Class Task
          Implements IThreadPoolWorkItem, IAsyncResult, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: Task
- uid: System.Threading.Tasks.Task.#ctor(System.Action)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action)
  id: '#ctor(System.Action)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Task(System.Action)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 368
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> with the specified action.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task(Action action)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(action As Action)
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The delegate that represents the code to execute in the task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Threading.Tasks.Task.Run(System.Action)
    commentId: M:System.Threading.Tasks.Task.Run(System.Action)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Task(Action)
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  id: '#ctor(System.Action,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 386
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> with the specified action and <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task(Action action, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(action As Action, cancellationToken As CancellationToken)
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The delegate that represents the code to execute in the task.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the new  task will observe.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Task(Action, CancellationToken)
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 436
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> with the specified action and creation options.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(action As Action, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The delegate that represents the code to execute in the task.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the new task will observe.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> used to customize the task's behavior.</p>\n<p></p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Task(Action, CancellationToken, TaskCreationOptions)
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 409
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> with the specified action and creation options.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task(Action action, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(action As Action, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The delegate that represents the code to execute in the task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> used to customize the task's behavior. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Task(Action, TaskCreationOptions)
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  id: '#ctor(System.Action{System.Object},System.Object)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 453
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> with the specified action and state.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task(Action<object> action, object state)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(action As Action(Of Object), state As Object)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The delegate that represents the code to execute in the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the action.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is null.</p>\n"
  seealso:
  - type: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
    commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object)
  name.vb: Task(Action(Of Object), Object)
  nameWithType: Task.Task(Action<Object>, Object)
  nameWithType.vb: Task.Task(Action(Of Object), Object)
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 473
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> with the specified action, state, and options.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task(Action<object> action, object state, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(action As Action(Of Object), state As Object, cancellationToken As CancellationToken)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The delegate that represents the code to execute in the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the action.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that that the new task will observe.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken)
  name.vb: Task(Action(Of Object), Object, CancellationToken)
  nameWithType: Task.Task(Action<Object>, Object, CancellationToken)
  nameWithType.vb: Task.Task(Action(Of Object), Object, CancellationToken)
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 525
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> with the specified action, state, and options.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(action As Action(Of Object), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The delegate that represents the code to execute in the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the action.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that that the new task will observe..</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> used to customize the task's behavior.</p>\n<p></p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)
  name.vb: Task(Action(Of Object), Object, CancellationToken, TaskCreationOptions)
  nameWithType: Task.Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)
  nameWithType.vb: Task.Task(Action(Of Object), Object, CancellationToken, TaskCreationOptions)
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 497
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> with the specified action, state, and options.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task(Action<object> action, object state, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The delegate that represents the code to execute in the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the action.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> used to customize the task's behavior.</p>\n<p></p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: Task(Action(Of Object), Object, TaskCreationOptions)
  nameWithType: Task.Task(Action<Object>, Object, TaskCreationOptions)
  nameWithType.vb: Task.Task(Action(Of Object), Object, TaskCreationOptions)
- uid: System.Threading.Tasks.Task.AsyncState
  commentId: P:System.Threading.Tasks.Task.AsyncState
  id: AsyncState
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.AsyncState
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AsyncState
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1587
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the state object supplied when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> was created, or null if none was supplied.</p>\n"
  syntax:
    content: public object AsyncState { get; }
    content.vb: Public ReadOnly Property AsyncState As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the state data that was passed in to the task when it was created.</p>\n"
  implements:
  - System.IAsyncResult.AsyncState
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Task.AsyncState
- uid: System.Threading.Tasks.Task.CompletedTask
  commentId: P:System.Threading.Tasks.Task.CompletedTask
  id: CompletedTask
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.CompletedTask
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompletedTask
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1627
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets a task that has already completed successfully. </p>\n"
  syntax:
    content: public static Task CompletedTask { get; }
    content.vb: Public Shared ReadOnly Property CompletedTask As Task
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The successfully completed task. </p>\n"
  seealso:
  - type: System.Threading.Tasks.Task.FromResult``1(``0)
    commentId: M:System.Threading.Tasks.Task.FromResult``1(``0)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: Task.CompletedTask
- uid: System.Threading.Tasks.Task.CreationOptions
  commentId: P:System.Threading.Tasks.Task.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.CreationOptions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreationOptions
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1551
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> used to create this task.</p>\n"
  syntax:
    content: public TaskCreationOptions CreationOptions { get; }
    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> used to create this task.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Task.CreationOptions
- uid: System.Threading.Tasks.Task.CurrentId
  commentId: P:System.Threading.Tasks.Task.CurrentId
  id: CurrentId
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.CurrentId
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentId
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1332
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Returns the ID of the currently executing <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static int ? CurrentId { get; }
    content.vb: Public Shared ReadOnly Property CurrentId As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>An integer that was assigned by the system to the currently-executing task.</p>\n"
  seealso:
  - type: System.Threading.Tasks.Task.Id
    commentId: P:System.Threading.Tasks.Task.Id
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: Task.CurrentId
- uid: System.Threading.Tasks.Task.Exception
  commentId: P:System.Threading.Tasks.Task.Exception
  id: Exception
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Exception
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exception
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1393
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> that caused the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to end prematurely. If the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completed successfully or has not yet thrown any exceptions, this will return <strong>null</strong>.</p>\n"
  syntax:
    content: public AggregateException Exception { get; }
    content.vb: Public ReadOnly Property Exception As AggregateException
    parameters: []
    return:
      type: System.AggregateException
      description: "\n<p>The <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> that caused the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to end prematurely.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Task.Exception
- uid: System.Threading.Tasks.Task.Factory
  commentId: P:System.Threading.Tasks.Task.Factory
  id: Factory
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Factory
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Factory
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1620
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Provides access to factory methods for creating and configuring <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static TaskFactory Factory { get; }
    content.vb: Public Shared ReadOnly Property Factory As TaskFactory
    parameters: []
    return:
      type: System.Threading.Tasks.TaskFactory
      description: "\n<p>A factory object that can create a variety of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n"
  seealso:
  - type: System.Threading.Tasks.TaskFactory
    commentId: T:System.Threading.Tasks.TaskFactory
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: Task.Factory
- uid: System.Threading.Tasks.Task.Id
  commentId: P:System.Threading.Tasks.Task.Id
  id: Id
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Id
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Id
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1315
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets an ID for this <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The identifier that is assigned by the system to this <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance. </p>\n"
  seealso:
  - type: System.Threading.Tasks.Task.CurrentId
    commentId: P:System.Threading.Tasks.Task.CurrentId
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Task.Id
- uid: System.Threading.Tasks.Task.IsCanceled
  commentId: P:System.Threading.Tasks.Task.IsCanceled
  id: IsCanceled
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.IsCanceled
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsCanceled
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1449
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets whether this <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance has completed execution due to being canceled.</p>\n"
  syntax:
    content: public bool IsCanceled { get; }
    content.vb: Public ReadOnly Property IsCanceled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the task has completed due to being canceled; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Task.IsCanceled
- uid: System.Threading.Tasks.Task.IsCompleted
  commentId: P:System.Threading.Tasks.Task.IsCompleted
  id: IsCompleted
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.IsCompleted
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsCompleted
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1525
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets whether this <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has completed.</p>\n"
  syntax:
    content: public bool IsCompleted { get; }
    content.vb: Public ReadOnly Property IsCompleted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the task has completed; otherwise <strong>false</strong>.</p>\n"
  implements:
  - System.IAsyncResult.IsCompleted
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Task.IsCompleted
- uid: System.Threading.Tasks.Task.IsFaulted
  commentId: P:System.Threading.Tasks.Task.IsFaulted
  id: IsFaulted
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.IsFaulted
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFaulted
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1718
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets whether the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completed due to an unhandled exception.</p>\n"
  syntax:
    content: public bool IsFaulted { get; }
    content.vb: Public ReadOnly Property IsFaulted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the task has thrown an unhandled exception; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Task.IsFaulted
- uid: System.Threading.Tasks.Task.Status
  commentId: P:System.Threading.Tasks.Task.Status
  id: Status
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Status
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Status
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1414
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the <xref href=\"System.Threading.Tasks.TaskStatus\" data-throw-if-not-resolved=\"false\"></xref> of this task.</p>\n"
  syntax:
    content: public TaskStatus Status { get; }
    content.vb: Public ReadOnly Property Status As TaskStatus
    parameters: []
    return:
      type: System.Threading.Tasks.TaskStatus
      description: "\n<p>The current <xref href=\"System.Threading.Tasks.TaskStatus\" data-throw-if-not-resolved=\"false\"></xref> of this task instance.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Task.Status
- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  commentId: P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  isEii: true
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.AsyncWaitHandle
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IAsyncResult.AsyncWaitHandle
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1568
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> that can be used to wait for the task to complete.</p>\n"
  syntax:
    content: WaitHandle IAsyncResult.AsyncWaitHandle { get; }
    content.vb: ReadOnly WriteOnly Property System.IAsyncResult.AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle
    parameters: []
    return:
      type: System.Threading.WaitHandle
      description: "\n<p>A <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> that can be used to wait for the task to complete.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  implements:
  - System.IAsyncResult.AsyncWaitHandle
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.IAsyncResult.AsyncWaitHandle
  nameWithType: Task.IAsyncResult.AsyncWaitHandle
  nameWithType.vb: Task.System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  commentId: P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  isEii: true
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.CompletedSynchronously
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IAsyncResult.CompletedSynchronously
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1596
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets an indication of whether the operation completed synchronously.</p>\n"
  syntax:
    content: bool IAsyncResult.CompletedSynchronously { get; }
    content.vb: ReadOnly WriteOnly Property System.IAsyncResult.CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation completed synchronously; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IAsyncResult.CompletedSynchronously
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.IAsyncResult.CompletedSynchronously
  nameWithType: Task.IAsyncResult.CompletedSynchronously
  nameWithType.vb: Task.System.IAsyncResult.CompletedSynchronously
- uid: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  commentId: M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  id: ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConfigureAwait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 2914
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Configures an awaiter used to await this <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext)
    content.vb: Public Function ConfigureAwait(continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable
    parameters:
    - id: continueOnCapturedContext
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to attempt to marshal the continuation back to the original context captured; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
      description: "\n<p>An object used to await this task.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.ConfigureAwait(Boolean)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3928
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWith(Action<Task, object> continuationAction, object state)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: "\n<p>An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments. </p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the continuation action. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A new continuation task. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object)
  name.vb: ContinueWith(Action(Of Task, Object), Object)
  nameWithType: Task.ContinueWith(Action<Task, Object>, Object)
  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3956
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, cancellationToken As CancellationToken) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: "\n<p>An action to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the continuation action.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.CancellationToken)
  name.vb: ContinueWith(Action(Of Task, Object), Object, CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, CancellationToken)
  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4068
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: "\n<p>An action to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the continuation action.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\" data-throw-if-not-resolved=\"false\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to associate with the continuation task and to use for its  execution.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Action(Of Task, Object), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4022
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. The continuation executes based on a set of specified conditions. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: "\n<p>An action to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the continuation action.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\" data-throw-if-not-resolved=\"false\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWith(Action(Of Task, Object), Object, TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)
  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3986
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. The continuation uses a specified scheduler. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: "\n<p>An action to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the continuation action.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to associate with the continuation task and to use for its execution.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Action(Of Task, Object), Object, TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, TaskScheduler)
  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  id: ContinueWith(System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3730
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWith(Action<Task> continuationAction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(continuationAction As Action(Of Task)) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>An action to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task))
  name.vb: ContinueWith(Action(Of Task))
  nameWithType: Task.ContinueWith(Action<Task>)
  nameWithType.vb: Task.ContinueWith(Action(Of Task))
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3757
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that receives a cancellation token and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(continuationAction As Action(Of Task), cancellationToken As CancellationToken) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>An action to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created the token has already been disposed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationAction</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ContinueWith(Action(Of Task), CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken)
  nameWithType.vb: Task.ContinueWith(Action(Of Task), CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3866
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes when the target task competes according to the specified <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>. The continuation receives a cancellation token and uses a specified scheduler. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(continuationAction As Action(Of Task), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>An action to run according to the specified <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\" data-throw-if-not-resolved=\"false\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to associate with the continuation task and to use for its execution.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created the token has already been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationAction</em> argument is null.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType.vb: Task.ContinueWith(Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3821
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes when the target task completes according to the specified <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWith(Action<Task> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>An action to run according to the specified <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\" data-throw-if-not-resolved=\"false\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationAction</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWith(Action(Of Task), TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task>, TaskContinuationOptions)
  nameWithType.vb: Task.ContinueWith(Action(Of Task), TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3786
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. The continuation uses a specified scheduler. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWith(Action<Task> continuationAction, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>An action to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to associate with the continuation task and to use for its execution.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Action(Of Task), TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>, TaskScheduler)
  nameWithType.vb: Task.ContinueWith(Action(Of Task), TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4133
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> completes and returns a value. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>A function to run when the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>  completes. When run, the delegate will be passed the completed task as an argument.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p> The type of the result produced by the continuation.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A new continuation task. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationFunction</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult))
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult))
  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>)
  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult))
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4165
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes and returns a value. The continuation receives a cancellation token. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>A function to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p> The type of the result produced by the continuation.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created the token has already been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationFunction</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken)
  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)
  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4283
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>A function to run according to the specified <em>continuationOptions.</em> When run, the delegate will be passed the completed task as an argument.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\" data-throw-if-not-resolved=\"false\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to associate with the continuation task and to use for its execution.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p> The type of the result produced by the continuation.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created the token has already been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationFunction</em> argument is null.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4235
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes according to the specified continuation options and returns a value. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>A function to run according to the condition specified in <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\" data-throw-if-not-resolved=\"false\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p> The type of the result produced by the continuation.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskContinuationOptions)
  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)
  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4197
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes and returns a value. The continuation uses a specified scheduler. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>A function to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to associate with the continuation task and to use for its execution.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p> The type of the result produced by the continuation.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationFunction</em> argument is null.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskScheduler)
  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)
  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4348
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes and returns a value. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: "\n<p>A function to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments. </p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the continuation function.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result produced by the continuation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object)
  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object)
  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4381
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: "\n<p>A function to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the continuation function.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result produced by the continuation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken)
  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)
  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4502
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes based on the specified task continuation options when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: "\n<p>A function to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the continuation function.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\" data-throw-if-not-resolved=\"false\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to associate with the continuation task and to use for its  execution.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result produced by the continuation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4453
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes based on the specified task continuation options when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. The continuation receives caller-supplied state information. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: "\n<p>A function to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the continuation function.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\" data-throw-if-not-resolved=\"false\"></xref>, as well as execution options, such as <xref href=\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result produced by the continuation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskContinuationOptions)
  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)
  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4414
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation that executes asynchronously when the target <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes. The continuation receives caller-supplied state information and uses a specified scheduler. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: "\n<p>A function to run when the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object representing data to be used by the continuation function.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to associate with the continuation task and to use for its execution.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result produced by the continuation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskScheduler)
  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)
  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskScheduler)
- uid: System.Threading.Tasks.Task.Delay(System.Int32)
  commentId: M:System.Threading.Tasks.Task.Delay(System.Int32)
  id: Delay(System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Delay(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delay
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5825
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that completes after a time delay. </p>\n"
  syntax:
    content: public static Task Delay(int millisecondsDelay)
    content.vb: Public Shared Function Delay(millisecondsDelay As Integer) As Task
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the time delay. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>millisecondsDelay</em> argument is less than -1.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Task.Delay(Int32)
- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  id: Delay(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Delay(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delay
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5847
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a cancellable task that completes after a time delay. </p>\n"
  syntax:
    content: public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken)
    content.vb: Public Shared Function Delay(millisecondsDelay As Integer, cancellationToken As CancellationToken) As Task
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely. </p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be checked prior to completing the returned task. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the time delay. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>millisecondsDelay</em> argument is less than -1. </p>\n"
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: "\n<p>The task has been canceled. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <em>cancellationToken</em> has already been disposed. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Task.Delay(Int32, CancellationToken)
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  commentId: M:System.Threading.Tasks.Task.Delay(System.TimeSpan)
  id: Delay(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delay
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5781
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that completes after a specified time interval. </p>\n"
  syntax:
    content: public static Task Delay(TimeSpan delay)
    content.vb: Public Shared Function Delay(delay As TimeSpan) As Task
    parameters:
    - id: delay
      type: System.TimeSpan
      description: "\n<p>The time span to wait before completing the returned task, or <strong>TimeSpan.FromMilliseconds(-1)</strong> to wait indefinitely. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the time delay. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>delay</em> represents a negative time interval other than <strong>TimeSpan.FromMillseconds(-1)</strong>. </p>\n<p>-or-</p>\n<p>The <em>delay</em> argument's <xref href=\"System.TimeSpan.TotalMilliseconds\" data-throw-if-not-resolved=\"false\"></xref> property is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Task.Delay(TimeSpan)
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  id: Delay(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Delay(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delay
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5803
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a cancellable task that completes after a specified time interval. </p>\n"
  syntax:
    content: public static Task Delay(TimeSpan delay, CancellationToken cancellationToken)
    content.vb: Public Shared Function Delay(delay As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: delay
      type: System.TimeSpan
      description: "\n<p>The time span to wait before completing the returned task, or <strong>TimeSpan.FromMilliseconds(-1)</strong> to wait indefinitely. </p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be checked prior to completing the returned task. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the time delay. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>delay</em> represents a negative time interval other than <strong>TimeSpan.FromMillseconds(-1)</strong>. </p>\n<p>-or-</p>\n<p>The <em>delay</em> argument's <xref href=\"System.TimeSpan.TotalMilliseconds\" data-throw-if-not-resolved=\"false\"></xref> property is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: "\n<p>The task has been canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <em>cancellationToken</em> has already been disposed. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Task.Delay(TimeSpan, CancellationToken)
- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  id: FromCanceled(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromCanceled
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5530
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that's completed due to cancellation with a specified cancellation token.</p>\n"
  syntax:
    content: public static Task FromCanceled(CancellationToken cancellationToken)
    content.vb: Public Shared Function FromCanceled(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token with which to complete the task. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The canceled task. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Cancellation has not been requested for <em>cancellationToken</em>; its <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Task.FromCanceled(CancellationToken)
- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  id: FromCanceled``1(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.FromCanceled<TResult>(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromCanceled
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5542
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that's completed due to cancellation with a specified cancellation token.</p>\n"
  syntax:
    content: public static Task<TResult> FromCanceled<TResult>(CancellationToken cancellationToken)
    content.vb: Public Shared Function FromCanceled(Of TResult)(cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token with which to complete the task. </p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result returned by the task. </p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The canceled task. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Cancellation has not been requested for <em>cancellationToken</em>; its <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.FromCanceled(Of TResult)(System.Threading.CancellationToken)
  name.vb: FromCanceled(Of TResult)(CancellationToken)
  nameWithType: Task.FromCanceled<TResult>(CancellationToken)
  nameWithType.vb: Task.FromCanceled(Of TResult)(CancellationToken)
- uid: System.Threading.Tasks.Task.FromException(System.Exception)
  commentId: M:System.Threading.Tasks.Task.FromException(System.Exception)
  id: FromException(System.Exception)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.FromException(System.Exception)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromException
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5507
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that has completed with a specified exception. </p>\n"
  syntax:
    content: public static Task FromException(Exception exception)
    content.vb: Public Shared Function FromException(exception As Exception) As Task
    parameters:
    - id: exception
      type: System.Exception
      description: "\n<p>The exception with which to complete the task. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The faulted task. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Task.FromException(Exception)
- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)
  commentId: M:System.Threading.Tasks.Task.FromException``1(System.Exception)
  id: FromException``1(System.Exception)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.FromException<TResult>(System.Exception)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromException
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5516
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that's completed with a specified exception. </p>\n"
  syntax:
    content: public static Task<TResult> FromException<TResult>(Exception exception)
    content.vb: Public Shared Function FromException(Of TResult)(exception As Exception) As Task(Of TResult)
    parameters:
    - id: exception
      type: System.Exception
      description: "\n<p>The exception with which to complete the task. </p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result returned by the task. </p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The faulted task. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.FromException(Of TResult)(System.Exception)
  name.vb: FromException(Of TResult)(Exception)
  nameWithType: Task.FromException<TResult>(Exception)
  nameWithType.vb: Task.FromException(Of TResult)(Exception)
- uid: System.Threading.Tasks.Task.FromResult``1(``0)
  commentId: M:System.Threading.Tasks.Task.FromResult``1(``0)
  id: FromResult``1(``0)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.FromResult<TResult>(TResult)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromResult
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5498
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that's completed successfully with the specified result.</p>\n"
  syntax:
    content: public static Task<TResult> FromResult<TResult>(TResult result)
    content.vb: Public Shared Function FromResult(Of TResult)(result As TResult) As Task(Of TResult)
    parameters:
    - id: result
      type: '{TResult}'
      description: "\n<p>The result to store into the completed task. </p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result returned by the task. </p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The successfully completed task.</p>\n"
  seealso:
  - type: System.Threading.Tasks.Task.CompletedTask
    commentId: P:System.Threading.Tasks.Task.CompletedTask
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.FromResult(Of TResult)(TResult)
  name.vb: FromResult(Of TResult)(TResult)
  nameWithType: Task.FromResult<TResult>(TResult)
  nameWithType.vb: Task.FromResult(Of TResult)(TResult)
- uid: System.Threading.Tasks.Task.GetAwaiter
  commentId: M:System.Threading.Tasks.Task.GetAwaiter
  id: GetAwaiter
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.GetAwaiter()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetAwaiter
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 2904
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets an awaiter used to await this <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public TaskAwaiter GetAwaiter()
    content.vb: Public Function GetAwaiter As TaskAwaiter
    return:
      type: System.Runtime.CompilerServices.TaskAwaiter
      description: "\n<p>An awaiter instance.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.GetAwaiter()
- uid: System.Threading.Tasks.Task.Run(System.Action)
  commentId: M:System.Threading.Tasks.Task.Run(System.Action)
  id: Run(System.Action)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Run(System.Action)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5597
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> object that represents that work.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static Task Run(Action action)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function Run(action As Action) As Task
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The work to execute asynchronously</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the work queued to execute in the ThreadPool.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> parameter was <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Task.Run(Action)
- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  id: Run(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Run(System.Action, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5617
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> object that represents that work. A cancellation token allows the work to be cancelled.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static Task Run(Action action, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function Run(action As Action, cancellationToken As CancellationToken) As Task
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The work to execute asynchronously</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that can be used to cancel the work</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the work queued to execute in the thread pool.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> parameter was <strong>null</strong>.</p>\n"
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: "\n<p>The task has been canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with <em>cancellationToken</em> was disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Task.Run(Action, CancellationToken)
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  id: Run(System.Func{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Run(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5670
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <em>function</em>.</p>\n"
  syntax:
    content: public static Task Run(Func<Task> function)
    content.vb: Public Shared Function Run(function As Func(Of Task)) As Task
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task}
      description: "\n<p>The work to execute asynchronously</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents a proxy for the task returned by <em>function</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(System.Func(Of System.Threading.Tasks.Task))
  name.vb: Run(Func(Of Task))
  nameWithType: Task.Run(Func<Task>)
  nameWithType.vb: Task.Run(Func(Of Task))
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Run(System.Func<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5689
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Queues the specified work to run on the thread pool and returns a proxy for the task returned by <em>function</em>.</p>\n"
  syntax:
    content: public static Task Run(Func<Task> function, CancellationToken cancellationToken)
    content.vb: Public Shared Function Run(function As Func(Of Task), cancellationToken As CancellationToken) As Task
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task}
      description: "\n<p>The work to execute asynchronously. </p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that should be used to cancel the work. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents a proxy for the task returned by <em>function</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\n"
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: "\n<p>The task has been canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with <em>cancellationToken</em> was disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(System.Func(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: Run(Func(Of Task), CancellationToken)
  nameWithType: Task.Run(Func<Task>, CancellationToken)
  nameWithType.vb: Task.Run(Func(Of Task), CancellationToken)
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})
  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0})
  id: Run``1(System.Func{``0})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5633
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Queues the specified work to run on the thread pool and returns a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object that represents that work. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static Task<TResult> Run<TResult>(Func<TResult> function)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function Run(Of TResult)(function As Func(Of TResult)) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>The work to execute asynchronously. </p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The return type of the task. </p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A task object that represents the work queued to execute in the thread pool. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> parameter is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult))
  name.vb: Run(Of TResult)(Func(Of TResult))
  nameWithType: Task.Run<TResult>(Func<TResult>)
  nameWithType.vb: Task.Run(Of TResult)(Func(Of TResult))
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  id: Run``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5653
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Queues the specified work to run on the thread pool and returns a <strong>Task(TResult)</strong> object that represents that work. A cancellation token allows the work to be cancelled.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static Task<TResult> Run<TResult>(Func<TResult> function, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function Run(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>The work to execute asynchronously</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that should be used to cancel the work</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The result type of the task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <strong>Task(TResult)</strong> that represents the work queued to execute in the thread pool.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: "\n<p>The task has been canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with <em>cancellationToken</em> was disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)
  name.vb: Run(Of TResult)(Func(Of TResult), CancellationToken)
  nameWithType: Task.Run<TResult>(Func<TResult>, CancellationToken)
  nameWithType.vb: Task.Run(Of TResult)(Func(Of TResult), CancellationToken)
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5724
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Queues the specified work to run on the thread pool and returns a proxy for the <strong>Task(TResult)</strong> returned by <em>function</em>.</p>\n"
  syntax:
    content: public static Task<TResult> Run<TResult>(Func<Task<TResult>> function)
    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of Task(Of TResult))) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: "\n<p>The work to execute asynchronously</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result returned by the proxy task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <strong>Task(TResult)</strong> that represents a proxy for the <strong>Task(TResult)</strong> returned by <em>function</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)))
  nameWithType: Task.Run<TResult>(Func<Task<TResult>>)
  nameWithType.vb: Task.Run(Of TResult)(Func(Of Task(Of TResult)))
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5740
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Queues the specified work to run on the thread pool and returns a proxy for the <strong>Task(TResult)</strong> returned by <em>function</em>.</p>\n"
  syntax:
    content: public static Task<TResult> Run<TResult>(Func<Task<TResult>> function, CancellationToken cancellationToken)
    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of Task(Of TResult)), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: "\n<p>The work to execute asynchronously</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token that should be used to cancel the work</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result returned by the proxy task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <strong>Task(TResult)</strong> that represents a proxy for the <strong>Task(TResult)</strong> returned by <em>function</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\n"
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: "\n<p>The task has been canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with <em>cancellationToken</em> was disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)
  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)
  nameWithType: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)
  nameWithType.vb: Task.Run(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)
- uid: System.Threading.Tasks.Task.RunSynchronously
  commentId: M:System.Threading.Tasks.Task.RunSynchronously
  id: RunSynchronously
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.RunSynchronously()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RunSynchronously
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1121
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Runs the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> synchronously on the current <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void RunSynchronously()
    content.vb: Public Sub RunSynchronously
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.RunSynchronously()
- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  id: RunSynchronously(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RunSynchronously
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1149
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Runs the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> synchronously on the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> provided.</p>\n"
  syntax:
    content: public void RunSynchronously(TaskScheduler scheduler)
    content.vb: Public Sub RunSynchronously(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The scheduler on which to attempt to run this task inline.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</p>\n"
  seealso:
  - type: System.Threading.Tasks.TaskScheduler
    commentId: T:System.Threading.Tasks.TaskScheduler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.RunSynchronously(TaskScheduler)
- uid: System.Threading.Tasks.Task.Start
  commentId: M:System.Threading.Tasks.Task.Start
  id: Start
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Start()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Start
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1036
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Starts the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>, scheduling it for execution to the current <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Start()
- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  id: Start(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Start
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1061
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Starts the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>, scheduling it for execution to the specified <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Start(TaskScheduler scheduler)
    content.vb: Public Sub Start(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> with which to associate and execute this task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instance has been disposed.</p>\n"
  - type: System.Threading.Tasks.TaskSchedulerException
    commentId: T:System.Threading.Tasks.TaskSchedulerException
    description: "\n<p>The scheduler was unable to queue this task.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Start(TaskScheduler)
- uid: System.Threading.Tasks.Task.Wait
  commentId: M:System.Threading.Tasks.Task.Wait
  id: Wait
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Wait()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3013
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to complete execution.</p>\n"
  syntax:
    content: public void Wait()
    content.vb: Public Sub Wait
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>-or-</p>\n<p>An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection contains information about the exception or exceptions. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Wait()
- uid: System.Threading.Tasks.Task.Wait(System.Int32)
  commentId: M:System.Threading.Tasks.Task.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Wait(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3092
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to complete execution within a specified number of milliseconds.</p>\n"
  syntax:
    content: public bool Wait(int millisecondsTimeout)
    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>-or-</p>\n<p>An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection contains information about the exception or exceptions. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Wait(Int32)
- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Wait(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3122
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes. </p>\n"
  syntax:
    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely. </p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to observe while waiting for the task to complete. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <em>cancellationToken</em> was canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>-or-</p>\n<p>An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection contains information about the exception or exceptions. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Wait(Int32, CancellationToken)
- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3069
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to complete execution. The wait terminates if a cancellation token is canceled before the task completes. </p>\n"
  syntax:
    content: public void Wait(CancellationToken cancellationToken)
    content.vb: Public Sub Wait(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to observe while waiting for the task to complete. </p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <em>cancellationToken</em> was canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The task has been disposed.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>-or-</p>\n<p>An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection contains information about the exception or exceptions. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Wait(CancellationToken)
- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  commentId: M:System.Threading.Tasks.Task.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3044
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to complete execution within a specified time interval.</p>\n"
  syntax:
    content: public bool Wait(TimeSpan timeout)
    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\n<p>-or-</p>\n<p>\n<em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The task was canceled. The <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection contains a <xref href=\"System.Threading.Tasks.TaskCanceledException\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>-or-</p>\n<p>An exception was thrown during the execution of the task. The <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection contains information about the exception or exceptions. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Task.Wait(TimeSpan)
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  id: WaitAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4866
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects to complete execution.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoOptimization)]

      public static void WaitAll(params Task[] tasks)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoOptimization)>

      Public Shared Sub WaitAll(ParamArray tasks As Task())
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>An array of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances on which to wait.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One or more of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects in <em>tasks</em> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> argument contains a null element.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> argument is an empty array.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>At least one of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> exception contains an <xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref> exception in its <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n<p>-or-</p>\n<p>An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task())
  name.vb: WaitAll(Task())
  nameWithType: Task.WaitAll(Task[])
  nameWithType.vb: Task.WaitAll(Task())
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  id: WaitAll(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4947
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects to complete execution within a specified number of milliseconds.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoOptimization)]

      public static bool WaitAll(Task[] tasks, int millisecondsTimeout)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoOptimization)>

      Public Shared Function WaitAll(tasks As Task(), millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>An array of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances on which to wait.</p>\n<p></p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if all of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One or more of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects in <em>tasks</em> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>At least one of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> contains an <xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n<p>-or-</p>\n<p>An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> argument contains a null element.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> argument is an empty array.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Int32)
  name.vb: WaitAll(Task(), Int32)
  nameWithType: Task.WaitAll(Task[], Int32)
  nameWithType.vb: Task.WaitAll(Task(), Int32)
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  id: WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5019
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoOptimization)]

      public static bool WaitAll(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoOptimization)>

      Public Shared Function WaitAll(tasks As Task(), millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>An array of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances on which to wait.</p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the tasks to complete.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if all of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One or more of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects in <em>tasks</em> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>At least one of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> contains an <xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n<p>-or-</p>\n<p>An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> argument contains a null element.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> argument is an empty array.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <em>cancellationToken</em> was canceled. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Int32, System.Threading.CancellationToken)
  name.vb: WaitAll(Task(), Int32, CancellationToken)
  nameWithType: Task.WaitAll(Task[], Int32, CancellationToken)
  nameWithType.vb: Task.WaitAll(Task(), Int32, CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  id: WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4979
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for all of the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects to complete execution unless the wait is cancelled. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoOptimization)]

      public static void WaitAll(Task[] tasks, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoOptimization)>

      Public Shared Sub WaitAll(tasks As Task(), cancellationToken As CancellationToken)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>An array of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances on which to wait.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for the tasks to complete.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <em>cancellationToken</em> was canceled. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>At least one of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> contains an <xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n<p>-or-</p>\n<p>An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> argument contains a null element.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> argument is an empty array.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One or more of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects in <em>tasks</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Threading.CancellationToken)
  name.vb: WaitAll(Task(), CancellationToken)
  nameWithType: Task.WaitAll(Task[], CancellationToken)
  nameWithType.vb: Task.WaitAll(Task(), CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  id: WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4908
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for all of the provided cancellable <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects to complete execution within a specified time interval.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoOptimization)]

      public static bool WaitAll(Task[] tasks, TimeSpan timeout)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoOptimization)>

      Public Shared Function WaitAll(tasks As Task(), timeout As TimeSpan) As Boolean
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>An array of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances on which to wait.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if all of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One or more of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects in <em>tasks</em> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument is <strong>null</strong>. </p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>At least one of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances was canceled. If a task was canceled, the <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref> contains an <xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref> in its <xref href=\"System.AggregateException.InnerExceptions\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n<p>-or-</p>\n<p>An exception was thrown during the execution of at least one of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\n<p>-or-</p>\n<p>\n<em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> argument contains a null element.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> argument is an empty array.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.TimeSpan)
  name.vb: WaitAll(Task(), TimeSpan)
  nameWithType: Task.WaitAll(Task[], TimeSpan)
  nameWithType.vb: Task.WaitAll(Task(), TimeSpan)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  id: WaitAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5302
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects to complete execution.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoOptimization)]

      public static int WaitAny(params Task[] tasks)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoOptimization)>

      Public Shared Function WaitAny(ParamArray tasks As Task()) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>An array of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances on which to wait.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the completed <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> object in the <em>tasks</em> array.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> argument contains a null element.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task())
  name.vb: WaitAny(Task())
  nameWithType: Task.WaitAny(Task[])
  nameWithType.vb: Task.WaitAny(Task())
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  id: WaitAny(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5398
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects to complete execution within a specified number of milliseconds.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoOptimization)]

      public static int WaitAny(Task[] tasks, int millisecondsTimeout)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoOptimization)>

      Public Shared Function WaitAny(tasks As Task(), millisecondsTimeout As Integer) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>An array of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances on which to wait.</p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> argument contains a null element.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Int32)
  name.vb: WaitAny(Task(), Int32)
  nameWithType: Task.WaitAny(Task[], Int32)
  nameWithType.vb: Task.WaitAny(Task(), Int32)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  id: WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5434
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoOptimization)]

      public static int WaitAny(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoOptimization)>

      Public Shared Function WaitAny(tasks As Task(), millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>An array of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances on which to wait. </p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely. </p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for a task to complete. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> argument contains a null element.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <em>cancellationToken</em> was canceled. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Int32, System.Threading.CancellationToken)
  name.vb: WaitAny(Task(), Int32, CancellationToken)
  nameWithType: Task.WaitAny(Task[], Int32, CancellationToken)
  nameWithType.vb: Task.WaitAny(Task(), Int32, CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  id: WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5368
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects to complete execution unless the wait is cancelled.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoOptimization)]

      public static int WaitAny(Task[] tasks, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoOptimization)>

      Public Shared Function WaitAny(tasks As Task(), cancellationToken As CancellationToken) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>An array of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances on which to wait. </p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe while waiting for a task to complete. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the completed task in the <em>tasks</em> array argument.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> argument contains a null element.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <em>cancellationToken</em> was canceled.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Threading.CancellationToken)
  name.vb: WaitAny(Task(), CancellationToken)
  nameWithType: Task.WaitAny(Task[], CancellationToken)
  nameWithType.vb: Task.WaitAny(Task(), CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  id: WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5335
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Waits for any of the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects to complete execution within a specified time interval.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoOptimization)]

      public static int WaitAny(Task[] tasks, TimeSpan timeout)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoOptimization)>

      Public Shared Function WaitAny(tasks As Task(), timeout As TimeSpan) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>An array of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances on which to wait.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\n<p>-or-</p>\n<p>\n<em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> argument contains a null element.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.TimeSpan)
  name.vb: WaitAny(Task(), TimeSpan)
  nameWithType: Task.WaitAny(Task[], TimeSpan)
  nameWithType.vb: Task.WaitAny(Task(), TimeSpan)
- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5967
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects in an enumerable collection have completed.</p>\n"
  syntax:
    content: public static Task WhenAll(IEnumerable<Task> tasks)
    content.vb: Public Shared Function WhenAll(tasks As IEnumerable(Of Task)) As Task
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: "\n<p>The tasks to wait on for completion.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the completion of all of the supplied tasks. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument was <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> collection contained a <strong>null</strong> task.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))
  name.vb: WhenAll(IEnumerable(Of Task))
  nameWithType: Task.WhenAll(IEnumerable<Task>)
  nameWithType.vb: Task.WhenAll(IEnumerable(Of Task))
- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  commentId: M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  id: WhenAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6030
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects in an array have completed. </p>\n"
  syntax:
    content: public static Task WhenAll(params Task[] tasks)
    content.vb: Public Shared Function WhenAll(ParamArray tasks As Task()) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The tasks to wait on for completion.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the completion of all of the supplied tasks.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument was <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contained a <strong>null</strong> task. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task())
  name.vb: WhenAll(Task())
  nameWithType: Task.WhenAll(Task[])
  nameWithType.vb: Task.WhenAll(Task())
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6218
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects in an enumerable collection have completed. </p>\n"
  syntax:
    content: public static Task<TResult[]> WhenAll<TResult>(IEnumerable<Task<TResult>> tasks)
    content.vb: Public Shared Function WhenAll(Of TResult)(tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
      description: "\n<p>The tasks to wait on for completion. </p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the completed task. </p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}[]}
      description: "\n<p>A task that represents the completion of all of the supplied tasks. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> collection contained a <strong>null</strong> task. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))
  nameWithType: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)
  nameWithType.vb: Task.WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  id: WhenAll``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Threading.Tasks.Task<TResult>[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6284
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that will complete when all of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects in an array have completed. </p>\n"
  syntax:
    content: public static Task<TResult[]> WhenAll<TResult>(params Task<TResult>[] tasks)
    content.vb: Public Shared Function WhenAll(Of TResult)(ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TResult}}[]
      description: "\n<p>The tasks to wait on for completion.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the completed task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}[]}
      description: "\n<p>A task that represents the completion of all of the supplied tasks.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contained a <strong>null</strong> task.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Threading.Tasks.Task(Of TResult)())
  name.vb: WhenAll(Of TResult)(Task(Of TResult)())
  nameWithType: Task.WhenAll<TResult>(Task<TResult>[])
  nameWithType.vb: Task.WhenAll(Of TResult)(Task(Of TResult)())
- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6496
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n"
  syntax:
    content: public static Task<Task> WhenAny(IEnumerable<Task> tasks)
    content.vb: Public Shared Function WhenAny(tasks As IEnumerable(Of Task)) As Task(Of Task)
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: "\n<p>The tasks to wait on for completion.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: "\n<p>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))
  name.vb: WhenAny(IEnumerable(Of Task))
  nameWithType: Task.WhenAny(IEnumerable<Task>)
  nameWithType.vb: Task.WhenAny(IEnumerable(Of Task))
- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  commentId: M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  id: WhenAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6457
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n"
  syntax:
    content: public static Task<Task> WhenAny(params Task[] tasks)
    content.vb: Public Shared Function WhenAny(ParamArray tasks As Task()) As Task(Of Task)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The tasks to wait on for completion.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: "\n<p>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument was null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task())
  name.vb: WhenAny(Task())
  nameWithType: Task.WhenAny(Task[])
  nameWithType.vb: Task.WhenAny(Task())
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6563
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n"
  syntax:
    content: public static Task<Task<TResult>> WhenAny<TResult>(IEnumerable<Task<TResult>> tasks)
    content.vb: Public Shared Function WhenAny(Of TResult)(tasks As IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
      description: "\n<p>The tasks to wait on for completion.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the completed task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}
      description: "\n<p>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))
  nameWithType: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)
  nameWithType.vb: Task.WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  id: WhenAny``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Threading.Tasks.Task<TResult>[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6534
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that will complete when any of the supplied tasks have completed.</p>\n"
  syntax:
    content: public static Task<Task<TResult>> WhenAny<TResult>(params Task<TResult>[] tasks)
    content.vb: Public Shared Function WhenAny(Of TResult)(ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TResult}}[]
      description: "\n<p>The tasks to wait on for completion.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the completed task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}
      description: "\n<p>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> argument was null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Threading.Tasks.Task(Of TResult)())
  name.vb: WhenAny(Of TResult)(Task(Of TResult)())
  nameWithType: Task.WhenAny<TResult>(Task<TResult>[])
  nameWithType.vb: Task.WhenAny(Of TResult)(Task(Of TResult)())
- uid: System.Threading.Tasks.Task.Yield
  commentId: M:System.Threading.Tasks.Task.Yield
  id: Yield
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.Task.Yield()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Yield
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3000
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates an awaitable task that asynchronously yields back to the current context when awaited.</p>\n"
  syntax:
    content: public static YieldAwaitable Yield()
    content.vb: Public Shared Function Yield As YieldAwaitable
    return:
      type: System.Runtime.CompilerServices.YieldAwaitable
      description: "\n<p>A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Task.Yield()
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.IAsyncResult
  nameWithType: IAsyncResult
  commentId: T:System.IAsyncResult
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Action
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Action
  nameWithType: Action
  commentId: T:System.Action
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: "XXX"
  fullName: System.Threading.CancellationToken
  nameWithType: CancellationToken
  commentId: T:System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: "XXX"
  fullName: System.Threading
  nameWithType: System.Threading
  commentId: N:System.Threading
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskCreationOptions
  nameWithType: TaskCreationOptions
  commentId: T:System.Threading.Tasks.TaskCreationOptions
- uid: System.Action{System.Object}
  parent: System
  definition: System.Action`1
  name: "XXX"
  fullName: System.Action<System.Object>
  fullname.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: "XXX"
    fullName: System.Action
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: "XXX"
    fullName: System.Action
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Action<Object>
  nameWithType.vb: Action(Of Object)
  commentId: T:System.Action{System.Object}
- uid: System.Action`1
  isExternal: false
  name: "XXX"
  fullName: System.Action<T>
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: "XXX"
    fullName: System.Action
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: "XXX"
    fullName: System.Action
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: Action<T>
  nameWithType.vb: Action(Of T)
  commentId: T:System.Action`1
- uid: System.IAsyncResult.AsyncState
  parent: System.IAsyncResult
  isExternal: true
  name: "XXX"
  fullName: System.IAsyncResult.AsyncState
  nameWithType: IAsyncResult.AsyncState
  commentId: P:System.IAsyncResult.AsyncState
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.Task
  nameWithType: Task
  commentId: T:System.Threading.Tasks.Task
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: "XXX"
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: "XXX"
    fullName: System.Nullable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: "XXX"
    fullName: System.Nullable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Nullable<Int32>
  nameWithType.vb: Nullable(Of Int32)
  commentId: T:System.Nullable{System.Int32}
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: "XXX"
    fullName: System.Nullable
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: "XXX"
    fullName: System.Nullable
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: Nullable<T>
  nameWithType.vb: Nullable(Of T)
  commentId: T:System.Nullable`1
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.AggregateException
  nameWithType: AggregateException
  commentId: T:System.AggregateException
- uid: System.Threading.Tasks.TaskFactory
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory
  nameWithType: TaskFactory
  commentId: T:System.Threading.Tasks.TaskFactory
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.IAsyncResult.IsCompleted
  parent: System.IAsyncResult
  isExternal: true
  name: "XXX"
  fullName: System.IAsyncResult.IsCompleted
  nameWithType: IAsyncResult.IsCompleted
  commentId: P:System.IAsyncResult.IsCompleted
- uid: System.Threading.Tasks.TaskStatus
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskStatus
  nameWithType: TaskStatus
  commentId: T:System.Threading.Tasks.TaskStatus
- uid: System.IAsyncResult.AsyncWaitHandle
  parent: System.IAsyncResult
  isExternal: true
  name: "XXX"
  fullName: System.IAsyncResult.AsyncWaitHandle
  nameWithType: IAsyncResult.AsyncWaitHandle
  commentId: P:System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: "XXX"
  fullName: System.Threading.WaitHandle
  nameWithType: WaitHandle
  commentId: T:System.Threading.WaitHandle
- uid: System.IAsyncResult.CompletedSynchronously
  parent: System.IAsyncResult
  isExternal: true
  name: "XXX"
  fullName: System.IAsyncResult.CompletedSynchronously
  nameWithType: IAsyncResult.CompletedSynchronously
  commentId: P:System.IAsyncResult.CompletedSynchronously
- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
  nameWithType: ConfiguredTaskAwaitable
  commentId: T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.CompilerServices
  nameWithType: System.Runtime.CompilerServices
  commentId: N:System.Runtime.CompilerServices
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  definition: System.Action`2
  name: "XXX"
  fullName: System.Action<System.Threading.Tasks.Task, System.Object>
  fullname.vb: System.Action(Of System.Threading.Tasks.Task, System.Object)
  name.vb: Action(Of Task, Object)
  spec.csharp:
  - uid: System.Action`2
    name: "XXX"
    fullName: System.Action
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: "XXX"
    fullName: System.Action
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Action<Task, Object>
  nameWithType.vb: Action(Of Task, Object)
  commentId: T:System.Action{System.Threading.Tasks.Task,System.Object}
- uid: System.Action`2
  isExternal: false
  name: "XXX"
  fullName: System.Action<T1, T2>
  fullname.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: "XXX"
    fullName: System.Action
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: "XXX"
    fullName: System.Action
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: "XXX"
    fullName: )
  nameWithType: Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  commentId: T:System.Action`2
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  commentId: T:System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler
  nameWithType: TaskScheduler
  commentId: T:System.Threading.Tasks.TaskScheduler
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  definition: System.Action`1
  name: "XXX"
  fullName: System.Action<System.Threading.Tasks.Task>
  fullname.vb: System.Action(Of System.Threading.Tasks.Task)
  name.vb: Action(Of Task)
  spec.csharp:
  - uid: System.Action`1
    name: "XXX"
    fullName: System.Action
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: "XXX"
    fullName: System.Action
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "XXX"
    fullName: )
  nameWithType: Action<Task>
  nameWithType.vb: Action(Of Task)
  commentId: T:System.Action{System.Threading.Tasks.Task}
- uid: System.Func{System.Threading.Tasks.Task,{TResult}}
  parent: System
  definition: System.Func`2
  name: "XXX"
  fullName: System.Func<System.Threading.Tasks.Task, TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task, TResult)
  name.vb: Func(Of Task, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<Task, TResult>
  nameWithType.vb: Func(Of Task, TResult)
  commentId: T:System.Func{System.Threading.Tasks.Task,``0}
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: "XXX"
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Task<TResult>
  nameWithType.vb: Task(Of TResult)
  commentId: T:System.Threading.Tasks.Task{`0}
- uid: System.Func`2
  isExternal: false
  name: "XXX"
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  commentId: T:System.Func`2
- uid: System.Threading.Tasks.Task`1
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Task<TResult>
  nameWithType.vb: Task(Of TResult)
  commentId: T:System.Threading.Tasks.Task`1
- uid: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
  parent: System
  definition: System.Func`3
  name: "XXX"
  fullName: System.Func<System.Threading.Tasks.Task, System.Object, TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task, System.Object, TResult)
  name.vb: Func(Of Task, Object, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<Task, Object, TResult>
  nameWithType.vb: Func(Of Task, Object, TResult)
  commentId: T:System.Func{System.Threading.Tasks.Task,System.Object,``0}
- uid: System.Func`3
  isExternal: false
  name: "XXX"
  fullName: System.Func<T1, T2, TResult>
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: "XXX"
    fullName: System.Func
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: "XXX"
    fullName: System.Func
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  commentId: T:System.Func`3
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.TimeSpan
  nameWithType: TimeSpan
  commentId: T:System.TimeSpan
- uid: System.Exception
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Exception
  nameWithType: Exception
  commentId: T:System.Exception
- uid: '{TResult}'
  definition: TResult
  name: "XXX"
  fullName: TResult
  nameWithType: TResult
  commentId: '!:TResult'
- uid: TResult
  isExternal: false
  name: "XXX"
  fullName: TResult
  nameWithType: TResult
- uid: System.Runtime.CompilerServices.TaskAwaiter
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.CompilerServices.TaskAwaiter
  nameWithType: TaskAwaiter
  commentId: T:System.Runtime.CompilerServices.TaskAwaiter
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  name: "XXX"
  fullName: System.Func<System.Threading.Tasks.Task>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "XXX"
    fullName: )
  nameWithType: Func<Task>
  nameWithType.vb: Func(Of Task)
  commentId: T:System.Func{System.Threading.Tasks.Task}
- uid: System.Func`1
  isExternal: false
  name: "XXX"
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<TResult>
  nameWithType.vb: Func(Of TResult)
  commentId: T:System.Func`1
- uid: System.Func{{TResult}}
  parent: System
  definition: System.Func`1
  name: "XXX"
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<TResult>
  nameWithType.vb: Func(Of TResult)
  commentId: T:System.Func{``0}
- uid: System.Func{System.Threading.Tasks.Task{{TResult}}}
  parent: System
  definition: System.Func`1
  name: "XXX"
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of Task(Of TResult))
  spec.csharp:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  - name: "XXX"
    fullName: )
  nameWithType: Func<Task<TResult>>
  nameWithType.vb: Func(Of Task(Of TResult))
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
- uid: System.Threading.Tasks.Task[]
  name: "XXX"
  fullName: System.Threading.Tasks.Task[]
  fullname.vb: System.Threading.Tasks.Task()
  name.vb: Task()
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "XXX"
    fullName: ()
  nameWithType: Task[]
  nameWithType.vb: Task()
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task)
  name.vb: IEnumerable(Of Task)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable<Task>
  nameWithType.vb: IEnumerable(Of Task)
  commentId: T:System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections.Generic
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult))
  name.vb: IEnumerable(Of Task(Of TResult))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable<Task<TResult>>
  nameWithType.vb: IEnumerable(Of Task(Of TResult))
  commentId: T:System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}}
- uid: System.Threading.Tasks.Task{{TResult}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: "XXX"
  fullName: System.Threading.Tasks.Task<TResult[]>
  fullname.vb: System.Threading.Tasks.Task(Of TResult())
  name.vb: Task(Of TResult())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: 'XXX'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: ()
  - name: "XXX"
    fullName: )
  nameWithType: Task<TResult[]>
  nameWithType.vb: Task(Of TResult())
  commentId: T:System.Threading.Tasks.Task{``0[]}
- uid: System.Threading.Tasks.Task{{TResult}}[]
  name: "XXX"
  fullName: System.Threading.Tasks.Task<TResult>[]
  fullname.vb: System.Threading.Tasks.Task(Of TResult)()
  name.vb: Task(Of TResult)()
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  - name: "XXX"
    fullName: ()
  nameWithType: Task<TResult>[]
  nameWithType.vb: Task(Of TResult)()
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: "XXX"
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>
  fullname.vb: System.Threading.Tasks.Task(Of System.Threading.Tasks.Task)
  name.vb: Task(Of Task)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "XXX"
    fullName: )
  nameWithType: Task<Task>
  nameWithType.vb: Task(Of Task)
  commentId: T:System.Threading.Tasks.Task{System.Threading.Tasks.Task}
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: "XXX"
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>
  fullname.vb: System.Threading.Tasks.Task(Of System.Threading.Tasks.Task(Of TResult))
  name.vb: Task(Of Task(Of TResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  - name: "XXX"
    fullName: )
  nameWithType: Task<Task<TResult>>
  nameWithType.vb: Task(Of Task(Of TResult))
  commentId: T:System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}}
- uid: System.Runtime.CompilerServices.YieldAwaitable
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.CompilerServices.YieldAwaitable
  nameWithType: YieldAwaitable
  commentId: T:System.Runtime.CompilerServices.YieldAwaitable
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: false
  name: "XXX"
  fullName: System.ObjectDisposedException
  nameWithType: ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Threading.Tasks.TaskCanceledException
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskCanceledException
  nameWithType: TaskCanceledException
  commentId: T:System.Threading.Tasks.TaskCanceledException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Threading.Tasks.TaskSchedulerException
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskSchedulerException
  nameWithType: TaskSchedulerException
  commentId: T:System.Threading.Tasks.TaskSchedulerException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.OperationCanceledException
  nameWithType: OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException

items:
- uid: System.Xml.XmlNamespaceManager
  commentId: T:System.Xml.XmlNamespaceManager
  id: XmlNamespaceManager
  parent: System.Xml
  children:
  - System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)
  - System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
  - System.Xml.XmlNamespaceManager.DefaultNamespace
  - System.Xml.XmlNamespaceManager.GetEnumerator
  - System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  - System.Xml.XmlNamespaceManager.HasNamespace(System.String)
  - System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  - System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
  - System.Xml.XmlNamespaceManager.NameTable
  - System.Xml.XmlNamespaceManager.PopScope
  - System.Xml.XmlNamespaceManager.PushScope
  - System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager
  type: Class
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlNamespaceManager
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 146
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces. </p>\n"
  syntax:
    content: 'public class XmlNamespaceManager : IEnumerable, IXmlNamespaceResolver'
    content.vb: >-
      Public Class XmlNamespaceManager
          Implements IEnumerable, IXmlNamespaceResolver
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.Xml.IXmlNamespaceResolver
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: XmlNamespaceManager
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
- uid: System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)
  commentId: M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.XmlNamespaceManager(System.Xml.XmlNameTable)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 148
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> class with the specified <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public XmlNamespaceManager(XmlNameTable nameTable)
    content.vb: Public Sub New(nameTable As XmlNameTable)
    parameters:
    - id: nameTable
      type: System.Xml.XmlNameTable
      description: "\n<p>The <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> to use. </p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>\n<strong>null</strong> is passed to the constructor </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlNamespaceManager.XmlNamespaceManager(XmlNameTable)
- uid: System.Xml.XmlNamespaceManager.DefaultNamespace
  commentId: P:System.Xml.XmlNamespaceManager.DefaultNamespace
  id: DefaultNamespace
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.DefaultNamespace
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 149
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the namespace URI for the default namespace.</p>\n"
  syntax:
    content: public virtual string DefaultNamespace { get; }
    content.vb: Public Overridable ReadOnly Property DefaultNamespace As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.</p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
    commentId: M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: XmlNamespaceManager.DefaultNamespace
- uid: System.Xml.XmlNamespaceManager.NameTable
  commentId: P:System.Xml.XmlNamespaceManager.NameTable
  id: NameTable
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.NameTable
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NameTable
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 150
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> associated with this object.</p>\n"
  syntax:
    content: public virtual XmlNameTable NameTable { get; }
    content.vb: Public Overridable ReadOnly Property NameTable As XmlNameTable
    parameters: []
    return:
      type: System.Xml.XmlNameTable
      description: "\n<p>The <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> used by this object.</p>\n"
  seealso:
  - type: System.Xml.XmlReader
    commentId: T:System.Xml.XmlReader
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: XmlNamespaceManager.NameTable
- uid: System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
  commentId: M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
  id: AddNamespace(System.String,System.String)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.AddNamespace(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 151
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Adds the given namespace to the collection.</p>\n"
  syntax:
    content: public virtual void AddNamespace(string prefix, string uri)
    content.vb: Public Overridable Sub AddNamespace(prefix As String, uri As String)
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.</p>\n<p>NoteIf the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref> will be used for resolving namespaces in an XML Path Language (XPath) expression, a prefix must be specified. If an XPath expression does not include a prefix, it is assumed that the namespace Uniform Resource Identifier (URI) is the empty namespace. For more information about XPath expressions and the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref>, refer to the <xref href=\"System.Xml.XmlNode.SelectNodes(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
    - id: uri
      type: System.String
      description: "\n<p>The namespace to add. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value for <em>prefix</em> is \"xml\" or \"xmlns\". </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value for <em>prefix</em> or <em>uri</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
    commentId: M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlNamespaceManager.AddNamespace(String, String)
- uid: System.Xml.XmlNamespaceManager.GetEnumerator
  commentId: M:System.Xml.XmlNamespaceManager.GetEnumerator
  id: GetEnumerator
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 152
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns an enumerator to use to iterate through the namespaces in the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual IEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> containing the prefixes stored by the <xref href=\"System.Xml.XmlNamespaceManager\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlNamespaceManager.GetEnumerator()
- uid: System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  commentId: M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  id: GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNamespacesInScope
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 153
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.</p>\n"
  syntax:
    content: public virtual IDictionary<string, string> GetNamespacesInScope(XmlNamespaceScope scope)
    content.vb: Public Overridable Function GetNamespacesInScope(scope As XmlNamespaceScope) As IDictionary(Of String, String)
    parameters:
    - id: scope
      type: System.Xml.XmlNamespaceScope
      description: "\n<p>An enumeration value that specifies the type of namespace nodes to return.</p>\n"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "\n<p>A collection of namespace and prefix pairs currently in scope.</p>\n"
  implements:
  - System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlNamespaceManager.GetNamespacesInScope(XmlNamespaceScope)
- uid: System.Xml.XmlNamespaceManager.HasNamespace(System.String)
  commentId: M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)
  id: HasNamespace(System.String)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.HasNamespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 154
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.</p>\n"
  syntax:
    content: public virtual bool HasNamespace(string prefix)
    content.vb: Public Overridable Function HasNamespace(prefix As String) As Boolean
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix of the namespace you want to find. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there is a namespace defined; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlNamespaceManager.HasNamespace(String)
- uid: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  commentId: M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  id: LookupNamespace(System.String)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LookupNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 155
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the namespace URI for the specified prefix.</p>\n"
  syntax:
    content: public virtual string LookupNamespace(string prefix)
    content.vb: Public Overridable Function LookupNamespace(prefix As String) As String
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty. </p>\n"
    return:
      type: System.String
      description: "\n<p>Returns the namespace URI for <em>prefix</em> or <strong>null</strong> if there is no mapped namespace. The returned string is atomized.</p>\n<p>For more information on atomized strings, see the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
    commentId: M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
  implements:
  - System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlNamespaceManager.LookupNamespace(String)
- uid: System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
  commentId: M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
  id: LookupPrefix(System.String)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.LookupPrefix(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LookupPrefix
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 156
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Finds the prefix declared for the given namespace URI.</p>\n"
  syntax:
    content: public virtual string LookupPrefix(string uri)
    content.vb: Public Overridable Function LookupPrefix(uri As String) As String
    parameters:
    - id: uri
      type: System.String
      description: "\n<p>The namespace to resolve for the prefix. </p>\n"
    return:
      type: System.String
      description: "\n<p>The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then <strong>null</strong> is returned.</p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
    commentId: M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)
  implements:
  - System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlNamespaceManager.LookupPrefix(String)
- uid: System.Xml.XmlNamespaceManager.PopScope
  commentId: M:System.Xml.XmlNamespaceManager.PopScope
  id: PopScope
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.PopScope()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PopScope
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 157
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Pops a namespace scope off the stack.</p>\n"
  syntax:
    content: public virtual bool PopScope()
    content.vb: Public Overridable Function PopScope As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there are namespace scopes left on the stack; <strong>false</strong> if there are no more namespaces to pop.</p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.PushScope
    commentId: M:System.Xml.XmlNamespaceManager.PushScope
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlNamespaceManager.PopScope()
- uid: System.Xml.XmlNamespaceManager.PushScope
  commentId: M:System.Xml.XmlNamespaceManager.PushScope
  id: PushScope
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.PushScope()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PushScope
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 158
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Pushes a namespace scope onto the stack.</p>\n"
  syntax:
    content: public virtual void PushScope()
    content.vb: Public Overridable Sub PushScope
  seealso:
  - type: System.Xml.XmlNamespaceManager.PopScope
    commentId: M:System.Xml.XmlNamespaceManager.PopScope
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlNamespaceManager.PushScope()
- uid: System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
  commentId: M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)
  id: RemoveNamespace(System.String,System.String)
  parent: System.Xml.XmlNamespaceManager
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Xml.XmlNamespaceManager.RemoveNamespace(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 159
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Removes the given namespace for the given prefix.</p>\n"
  syntax:
    content: public virtual void RemoveNamespace(string prefix, string uri)
    content.vb: Public Overridable Sub RemoveNamespace(prefix As String, uri As String)
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix for the namespace </p>\n"
    - id: uri
      type: System.String
      description: "\n<p>The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value of <em>prefix</em> or <em>uri</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
    commentId: M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlNamespaceManager.RemoveNamespace(String, String)
references:
- uid: System.Xml
  isExternal: false
  name: "XXX"
  fullName: System.Xml
  commentId: N:System.Xml
  nameWithType: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  nameWithType: IEnumerable
- uid: System.Xml.IXmlNamespaceResolver
  parent: System.Xml
  isExternal: false
  name: "XXX"
  fullName: System.Xml.IXmlNamespaceResolver
  commentId: T:System.Xml.IXmlNamespaceResolver
  nameWithType: IXmlNamespaceResolver
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  nameWithType: Queryable.AsQueryable()
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel()
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Enumerable.Cast<TResult>()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Enumerable.OfType<TResult>()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections
  commentId: N:System.Collections
  nameWithType: System.Collections
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
- uid: System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  nameWithType: Queryable
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  nameWithType: ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
- uid: System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  nameWithType: Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
- uid: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq
  commentId: N:System.Linq
  nameWithType: System.Linq
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: false
  name: "XXX"
  fullName: System.Xml.XmlNameTable
  commentId: T:System.Xml.XmlNameTable
  nameWithType: XmlNameTable
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  nameWithType: IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  nameWithType: IEnumerator
- uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  parent: System.Xml.IXmlNamespaceResolver
  isExternal: false
  name: "XXX"
  fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  spec.csharp:
  - uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
    name: "XXX"
    fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope
  - name: "XXX"
    fullName: (
  - uid: System.Xml.XmlNamespaceScope
    name: "XXX"
    fullName: System.Xml.XmlNamespaceScope
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
    name: "XXX"
    fullName: System.Xml.IXmlNamespaceResolver.GetNamespacesInScope
  - name: "XXX"
    fullName: (
  - uid: System.Xml.XmlNamespaceScope
    name: "XXX"
    fullName: System.Xml.XmlNamespaceScope
  - name: "XXX"
    fullName: )
  commentId: M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  nameWithType: IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope)
- uid: System.Xml.XmlNamespaceScope
  parent: System.Xml
  isExternal: false
  name: "XXX"
  fullName: System.Xml.XmlNamespaceScope
  commentId: T:System.Xml.XmlNamespaceScope
  nameWithType: XmlNamespaceScope
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: "XXX"
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: "XXX"
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: "XXX"
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  nameWithType: IDictionary<String, String>
  nameWithType.vb: IDictionary(Of String, String)
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: "XXX"
    fullName: System.Collections.Generic.IDictionary
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TKey
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: "XXX"
    fullName: System.Collections.Generic.IDictionary
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TKey
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TValue
  - name: "XXX"
    fullName: )
  commentId: T:System.Collections.Generic.IDictionary`2
  nameWithType: IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
- uid: System.Collections.Generic
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic
  commentId: N:System.Collections.Generic
  nameWithType: System.Collections.Generic
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  parent: System.Xml.IXmlNamespaceResolver
  isExternal: true
  name: "XXX"
  fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  spec.csharp:
  - uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
    name: "XXX"
    fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
    name: "XXX"
    fullName: System.Xml.IXmlNamespaceResolver.LookupNamespace
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)
  nameWithType: IXmlNamespaceResolver.LookupNamespace(String)
- uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  parent: System.Xml.IXmlNamespaceResolver
  isExternal: true
  name: "XXX"
  fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  spec.csharp:
  - uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
    name: "XXX"
    fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
    name: "XXX"
    fullName: System.Xml.IXmlNamespaceResolver.LookupPrefix
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)
  nameWithType: IXmlNamespaceResolver.LookupPrefix(String)
- uid: System.NullReferenceException
  isExternal: false
  name: "XXX"
  fullName: System.NullReferenceException
  nameWithType: NullReferenceException
  commentId: T:System.NullReferenceException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException

items:
- uid: System.Data.IDataRecord
  commentId: T:System.Data.IDataRecord
  id: IDataRecord
  parent: System.Data
  children:
  - System.Data.IDataRecord.FieldCount
  - System.Data.IDataRecord.GetBoolean(System.Int32)
  - System.Data.IDataRecord.GetByte(System.Int32)
  - System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.IDataRecord.GetChar(System.Int32)
  - System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.IDataRecord.GetData(System.Int32)
  - System.Data.IDataRecord.GetDataTypeName(System.Int32)
  - System.Data.IDataRecord.GetDateTime(System.Int32)
  - System.Data.IDataRecord.GetDecimal(System.Int32)
  - System.Data.IDataRecord.GetDouble(System.Int32)
  - System.Data.IDataRecord.GetFieldType(System.Int32)
  - System.Data.IDataRecord.GetFloat(System.Int32)
  - System.Data.IDataRecord.GetGuid(System.Int32)
  - System.Data.IDataRecord.GetInt16(System.Int32)
  - System.Data.IDataRecord.GetInt32(System.Int32)
  - System.Data.IDataRecord.GetInt64(System.Int32)
  - System.Data.IDataRecord.GetName(System.Int32)
  - System.Data.IDataRecord.GetOrdinal(System.String)
  - System.Data.IDataRecord.GetString(System.Int32)
  - System.Data.IDataRecord.GetValue(System.Int32)
  - System.Data.IDataRecord.GetValues(System.Object[])
  - System.Data.IDataRecord.IsDBNull(System.Int32)
  - System.Data.IDataRecord.Item(System.Int32)
  - System.Data.IDataRecord.Item(System.String)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord
  type: Interface
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IDataRecord
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 9
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Provides access to the column values within each row for a <strong>DataReader</strong>, and is implemented by .NET Framework data providers that access relational databases.</p>\n"
  syntax:
    content: public interface IDataRecord
    content.vb: Public Interface IDataRecord
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  nameWithType: IDataRecord
- uid: System.Data.IDataRecord.FieldCount
  commentId: P:System.Data.IDataRecord.FieldCount
  id: FieldCount
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.FieldCount
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FieldCount
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 12
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the number of columns in the current row.</p>\n"
  syntax:
    content: int FieldCount { get; }
    content.vb: ReadOnly Property FieldCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record. The default is -1.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  nameWithType: IDataRecord.FieldCount
- uid: System.Data.IDataRecord.Item(System.Int32)
  commentId: P:System.Data.IDataRecord.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 14
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the column located at the specified index.</p>\n"
  syntax:
    content: object this[int i] { get; }
    content.vb: ReadOnly Property Item(i As Integer) As Object
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The zero-based index of the column to get. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The column located at the specified index as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Data.IDataRecord.Item(System.Int32)
  name.vb: Item(Int32)
  nameWithType: IDataRecord.Item[Int32]
  nameWithType.vb: IDataRecord.Item(Int32)
- uid: System.Data.IDataRecord.Item(System.String)
  commentId: P:System.Data.IDataRecord.Item(System.String)
  id: Item(System.String)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 16
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the column with the specified name.</p>\n"
  syntax:
    content: object this[string name] { get; }
    content.vb: ReadOnly Property Item(name As String) As Object
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the column to find. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The column with the specified name as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>No column with the specified name was found. </p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Data.IDataRecord.Item(System.String)
  name.vb: Item(String)
  nameWithType: IDataRecord.Item[String]
  nameWithType.vb: IDataRecord.Item(String)
- uid: System.Data.IDataRecord.GetBoolean(System.Int32)
  commentId: M:System.Data.IDataRecord.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetBoolean(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBoolean
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 30
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the value of the specified column as a Boolean.</p>\n"
  syntax:
    content: bool GetBoolean(int i)
    content.vb: Function GetBoolean(i As Integer) As Boolean
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The zero-based column ordinal. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The value of the column.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetBoolean(Int32)
- uid: System.Data.IDataRecord.GetByte(System.Int32)
  commentId: M:System.Data.IDataRecord.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetByte(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByte
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 32
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the 8-bit unsigned integer value of the specified column.</p>\n"
  syntax:
    content: byte GetByte(int i)
    content.vb: Function GetByte(i As Integer) As Byte
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The zero-based column ordinal. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer value of the specified column.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetByte(Int32)
- uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 34
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.</p>\n"
  syntax:
    content: long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length)
    content.vb: Function GetBytes(i As Integer, fieldOffset As Long, buffer As Byte(), bufferoffset As Integer, length As Integer) As Long
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The zero-based column ordinal. </p>\n"
    - id: fieldOffset
      type: System.Int64
      description: "\n<p>The index within the field from which to start the read operation. </p>\n"
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to read the stream of bytes. </p>\n"
    - id: bufferoffset
      type: System.Int32
      description: "\n<p>The index for <em>buffer</em> to start the read operation. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of bytes to read. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The actual number of bytes read.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  fullName.vb: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)
  nameWithType: IDataRecord.GetBytes(Int32, Int64, Byte[], Int32, Int32)
  nameWithType.vb: IDataRecord.GetBytes(Int32, Int64, Byte(), Int32, Int32)
- uid: System.Data.IDataRecord.GetChar(System.Int32)
  commentId: M:System.Data.IDataRecord.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetChar(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChar
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 36
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the character value of the specified column.</p>\n"
  syntax:
    content: char GetChar(int i)
    content.vb: Function GetChar(i As Integer) As Char
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The zero-based column ordinal. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The character value of the specified column.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetChar(Int32)
- uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChars
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 38
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.</p>\n"
  syntax:
    content: long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length)
    content.vb: Function GetChars(i As Integer, fieldoffset As Long, buffer As Char(), bufferoffset As Integer, length As Integer) As Long
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The zero-based column ordinal. </p>\n"
    - id: fieldoffset
      type: System.Int64
      description: "\n<p>The index within the row from which to start the read operation. </p>\n"
    - id: buffer
      type: System.Char[]
      description: "\n<p>The buffer into which to read the stream of bytes. </p>\n"
    - id: bufferoffset
      type: System.Int32
      description: "\n<p>The index for <em>buffer</em> to start the read operation. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of bytes to read. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The actual number of characters read.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  fullName.vb: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)
  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)
  nameWithType: IDataRecord.GetChars(Int32, Int64, Char[], Int32, Int32)
  nameWithType.vb: IDataRecord.GetChars(Int32, Int64, Char(), Int32, Int32)
- uid: System.Data.IDataRecord.GetData(System.Int32)
  commentId: M:System.Data.IDataRecord.GetData(System.Int32)
  id: GetData(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetData(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetData
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 58
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Returns an <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> for the specified column ordinal.</p>\n"
  syntax:
    content: IDataReader GetData(int i)
    content.vb: Function GetData(i As Integer) As IDataReader
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Data.IDataReader
      description: "\n<p>The <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> for the specified column ordinal.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetData(Int32)
- uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetDataTypeName(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDataTypeName
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 20
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the data type information for the specified field.</p>\n"
  syntax:
    content: string GetDataTypeName(int i)
    content.vb: Function GetDataTypeName(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.String
      description: "\n<p>The data type information for the specified field.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetDataTypeName(Int32)
- uid: System.Data.IDataRecord.GetDateTime(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetDateTime(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDateTime
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 56
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the date and time data value of the specified field.</p>\n"
  syntax:
    content: DateTime GetDateTime(int i)
    content.vb: Function GetDateTime(i As Integer) As Date
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The date and time data value of the specified field.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetDateTime(Int32)
- uid: System.Data.IDataRecord.GetDecimal(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetDecimal(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDecimal
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 54
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the fixed-position numeric value of the specified field.</p>\n"
  syntax:
    content: decimal GetDecimal(int i)
    content.vb: Function GetDecimal(i As Integer) As Decimal
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The fixed-position numeric value of the specified field.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetDecimal(Int32)
- uid: System.Data.IDataRecord.GetDouble(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetDouble(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDouble
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 50
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the double-precision floating point number of the specified field.</p>\n"
  syntax:
    content: double GetDouble(int i)
    content.vb: Function GetDouble(i As Integer) As Double
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The double-precision floating point number of the specified field.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetDouble(Int32)
- uid: System.Data.IDataRecord.GetFieldType(System.Int32)
  commentId: M:System.Data.IDataRecord.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetFieldType(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldType
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 22
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> information corresponding to the type of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that would be returned from <xref href=\"System.Data.IDataRecord.GetValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: Type GetFieldType(int i)
    content.vb: Function GetFieldType(i As Integer) As Type
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> information corresponding to the type of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that would be returned from <xref href=\"System.Data.IDataRecord.GetValue(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetFieldType(Int32)
- uid: System.Data.IDataRecord.GetFloat(System.Int32)
  commentId: M:System.Data.IDataRecord.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetFloat(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFloat
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 48
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the single-precision floating point number of the specified field.</p>\n"
  syntax:
    content: float GetFloat(int i)
    content.vb: Function GetFloat(i As Integer) As Single
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Single
      description: "\n<p>The single-precision floating point number of the specified field.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetFloat(Int32)
- uid: System.Data.IDataRecord.GetGuid(System.Int32)
  commentId: M:System.Data.IDataRecord.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetGuid(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGuid
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 40
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Returns the GUID value of the specified field.</p>\n"
  syntax:
    content: Guid GetGuid(int i)
    content.vb: Function GetGuid(i As Integer) As Guid
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Guid
      description: "\n<p>The GUID value of the specified field.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetGuid(Int32)
- uid: System.Data.IDataRecord.GetInt16(System.Int32)
  commentId: M:System.Data.IDataRecord.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetInt16(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt16
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 42
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the 16-bit signed integer value of the specified field.</p>\n"
  syntax:
    content: short GetInt16(int i)
    content.vb: Function GetInt16(i As Integer) As Short
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>The 16-bit signed integer value of the specified field.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetInt16(Int32)
- uid: System.Data.IDataRecord.GetInt32(System.Int32)
  commentId: M:System.Data.IDataRecord.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetInt32(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt32
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 44
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the 32-bit signed integer value of the specified field.</p>\n"
  syntax:
    content: int GetInt32(int i)
    content.vb: Function GetInt32(i As Integer) As Integer
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The 32-bit signed integer value of the specified field.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetInt32(Int32)
- uid: System.Data.IDataRecord.GetInt64(System.Int32)
  commentId: M:System.Data.IDataRecord.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetInt64(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt64
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 46
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the 64-bit signed integer value of the specified field.</p>\n"
  syntax:
    content: long GetInt64(int i)
    content.vb: Function GetInt64(i As Integer) As Long
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The 64-bit signed integer value of the specified field.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetInt64(Int32)
- uid: System.Data.IDataRecord.GetName(System.Int32)
  commentId: M:System.Data.IDataRecord.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetName(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetName
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 18
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the name for the field to find.</p>\n"
  syntax:
    content: string GetName(int i)
    content.vb: Function GetName(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.String
      description: "\n<p>The name of the field or the empty string (\"\"), if there is no value to return.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetName(Int32)
- uid: System.Data.IDataRecord.GetOrdinal(System.String)
  commentId: M:System.Data.IDataRecord.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetOrdinal(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOrdinal
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 28
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Return the index of the named field.</p>\n"
  syntax:
    content: int GetOrdinal(string name)
    content.vb: Function GetOrdinal(name As String) As Integer
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the field to find. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the named field.</p>\n"
  nameWithType: IDataRecord.GetOrdinal(String)
- uid: System.Data.IDataRecord.GetString(System.Int32)
  commentId: M:System.Data.IDataRecord.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetString(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetString
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 52
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the string value of the specified field.</p>\n"
  syntax:
    content: string GetString(int i)
    content.vb: Function GetString(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string value of the specified field.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetString(Int32)
- uid: System.Data.IDataRecord.GetValue(System.Int32)
  commentId: M:System.Data.IDataRecord.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 24
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Return the value of the specified field.</p>\n"
  syntax:
    content: object GetValue(int i)
    content.vb: Function GetValue(i As Integer) As Object
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> which will contain the field value upon return.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.GetValue(Int32)
- uid: System.Data.IDataRecord.GetValues(System.Object[])
  commentId: M:System.Data.IDataRecord.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.GetValues(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValues
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 26
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Populates an array of objects with the column values of the current record.</p>\n"
  syntax:
    content: int GetValues(object[] values)
    content.vb: Function GetValues(values As Object()) As Integer
    parameters:
    - id: values
      type: System.Object[]
      description: "\n<p>An array of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to copy the attribute fields into. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of instances of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> in the array.</p>\n"
  fullName.vb: System.Data.IDataRecord.GetValues(System.Object())
  name.vb: GetValues(Object())
  nameWithType: IDataRecord.GetValues(Object[])
  nameWithType.vb: IDataRecord.GetValues(Object())
- uid: System.Data.IDataRecord.IsDBNull(System.Int32)
  commentId: M:System.Data.IDataRecord.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Data.IDataRecord.IsDBNull(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDataRecord.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDBNull
    path: src/System.Data.Common/src/System/Data/IDataRecord.cs
    startLine: 60
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Return whether the specified field is set to null.</p>\n"
  syntax:
    content: bool IsDBNull(int i)
    content.vb: Function IsDBNull(i As Integer) As Boolean
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the field to find. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified field is set to null; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType: IDataRecord.IsDBNull(Int32)
references:
- uid: System.Data
  isExternal: false
  name: "XXX"
  fullName: System.Data
  nameWithType: System.Data
  commentId: N:System.Data
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Byte
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Byte
  nameWithType: Byte
  commentId: T:System.Byte
- uid: System.Int64
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int64
  nameWithType: Int64
  commentId: T:System.Int64
- uid: System.Byte[]
  name: "XXX"
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
- uid: System.Char
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Char
  nameWithType: Char
  commentId: T:System.Char
- uid: System.Char[]
  name: "XXX"
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: "XXX"
    fullName: System.Char
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: "XXX"
    fullName: System.Char
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: Char[]
  nameWithType.vb: Char()
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: "XXX"
  fullName: System.Data.IDataReader
  nameWithType: IDataReader
  commentId: T:System.Data.IDataReader
- uid: System.DateTime
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.DateTime
  nameWithType: DateTime
  commentId: T:System.DateTime
- uid: System.Decimal
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Decimal
  nameWithType: Decimal
  commentId: T:System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Double
  nameWithType: Double
  commentId: T:System.Double
- uid: System.Type
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Type
  nameWithType: Type
  commentId: T:System.Type
- uid: System.Single
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Single
  nameWithType: Single
  commentId: T:System.Single
- uid: System.Guid
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Guid
  nameWithType: Guid
  commentId: T:System.Guid
- uid: System.Int16
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int16
  nameWithType: Int16
  commentId: T:System.Int16
- uid: System.Object[]
  name: "XXX"
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: Object[]
  nameWithType.vb: Object()
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: "XXX"
  fullName: System.IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException

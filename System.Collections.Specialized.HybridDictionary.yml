items:
- uid: System.Collections.Specialized.HybridDictionary
  commentId: T:System.Collections.Specialized.HybridDictionary
  id: HybridDictionary
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.HybridDictionary.#ctor
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  - System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  - System.Collections.Specialized.HybridDictionary.Clear
  - System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  - System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.HybridDictionary.Count
  - System.Collections.Specialized.HybridDictionary.GetEnumerator
  - System.Collections.Specialized.HybridDictionary.IsFixedSize
  - System.Collections.Specialized.HybridDictionary.IsReadOnly
  - System.Collections.Specialized.HybridDictionary.IsSynchronized
  - System.Collections.Specialized.HybridDictionary.Item(System.Object)
  - System.Collections.Specialized.HybridDictionary.Keys
  - System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  - System.Collections.Specialized.HybridDictionary.SyncRoot
  - System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Specialized.HybridDictionary.Values
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary
  type: Class
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HybridDictionary
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 16
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Implements <strong>IDictionary</strong> by using a <xref href=\"System.Collections.Specialized.ListDictionary\" data-throw-if-not-resolved=\"false\"></xref> while the collection is small, and then switching to a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> when the collection gets large.</p>\n"
  syntax:
    content: 'public class HybridDictionary : IDictionary, ICollection, IEnumerable'
    content.vb: >-
      Public Class HybridDictionary
          Implements IDictionary, ICollection, IEnumerable
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.Specialized.ListDictionary
    commentId: T:System.Collections.Specialized.ListDictionary
  - type: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - type: System.Collections.CaseInsensitiveHashCodeProvider
    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: HybridDictionary
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
- uid: System.Collections.Specialized.HybridDictionary.#ctor
  commentId: M:System.Collections.Specialized.HybridDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 29
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Creates an empty case-sensitive <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public HybridDictionary()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HybridDictionary.HybridDictionary()
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  commentId: M:System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 37
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Creates an empty <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> with the specified case sensitivity.</p>\n"
  syntax:
    content: public HybridDictionary(bool caseInsensitive)
    content.vb: Public Sub New(caseInsensitive As Boolean)
    parameters:
    - id: caseInsensitive
      type: System.Boolean
      description: "\n<p>A Boolean that denotes whether the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> is case-insensitive. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HybridDictionary.HybridDictionary(Boolean)
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  commentId: M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 33
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Creates a case-sensitive <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> with the specified initial size.</p>\n"
  syntax:
    content: public HybridDictionary(int initialSize)
    content.vb: Public Sub New(initialSize As Integer)
    parameters:
    - id: initialSize
      type: System.Int32
      description: "\n<p>The approximate number of entries that the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> can initially contain. </p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HybridDictionary.HybridDictionary(Int32)
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  commentId: M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 42
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Creates a <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> with the specified initial size and case sensitivity.</p>\n"
  syntax:
    content: public HybridDictionary(int initialSize, bool caseInsensitive)
    content.vb: Public Sub New(initialSize As Integer, caseInsensitive As Boolean)
    parameters:
    - id: initialSize
      type: System.Int32
      description: "\n<p>The approximate number of entries that the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> can initially contain. </p>\n"
    - id: caseInsensitive
      type: System.Boolean
      description: "\n<p>A Boolean that denotes whether the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> is case-insensitive. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HybridDictionary.HybridDictionary(Int32, Boolean)
- uid: System.Collections.Specialized.HybridDictionary.Count
  commentId: P:System.Collections.Specialized.HybridDictionary.Count
  id: Count
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 148
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: HybridDictionary.Count
- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize
  commentId: P:System.Collections.Specialized.HybridDictionary.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFixedSize
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 191
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  syntax:
    content: public bool IsFixedSize { get; }
    content.vb: Public ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>This property always returns <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.IsFixedSize
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: HybridDictionary.IsFixedSize
- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly
  commentId: P:System.Collections.Specialized.HybridDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 183
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>This property always returns <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: HybridDictionary.IsReadOnly
- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized
  commentId: P:System.Collections.Specialized.HybridDictionary.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSynchronized
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 199
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  syntax:
    content: public bool IsSynchronized { get; }
    content.vb: Public ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>This property always returns <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.Specialized.HybridDictionary.SyncRoot
    commentId: P:System.Collections.Specialized.HybridDictionary.SyncRoot
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: HybridDictionary.IsSynchronized
- uid: System.Collections.Specialized.HybridDictionary.Item(System.Object)
  commentId: P:System.Collections.Specialized.HybridDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 58
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  syntax:
    content: public object this[object key] { get; set; }
    content.vb: Public Property Item(key As Object) As Object
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key whose value to get or set. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with the specified key. If the specified key is not found, attempting to get it returns <strong>null</strong>, and attempting to set it creates a new entry using the specified key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  implements:
  - System.Collections.IDictionary.Item(System.Object)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.HybridDictionary.Item(System.Object)
  name.vb: Item(Object)
  nameWithType: HybridDictionary.Item[Object]
  nameWithType.vb: HybridDictionary.Item(Object)
- uid: System.Collections.Specialized.HybridDictionary.Keys
  commentId: P:System.Collections.Specialized.HybridDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 168
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the keys in the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public ICollection Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the keys in the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.Specialized.HybridDictionary.Values
    commentId: P:System.Collections.Specialized.HybridDictionary.Values
  implements:
  - System.Collections.IDictionary.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: HybridDictionary.Keys
- uid: System.Collections.Specialized.HybridDictionary.SyncRoot
  commentId: P:System.Collections.Specialized.HybridDictionary.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SyncRoot
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 207
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public object SyncRoot { get; }
    content.vb: Public ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Specialized.HybridDictionary.IsSynchronized
    commentId: P:System.Collections.Specialized.HybridDictionary.IsSynchronized
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: HybridDictionary.SyncRoot
- uid: System.Collections.Specialized.HybridDictionary.Values
  commentId: P:System.Collections.Specialized.HybridDictionary.Values
  id: Values
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.Values
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 215
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public ICollection Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.Specialized.HybridDictionary.Keys
    commentId: P:System.Collections.Specialized.HybridDictionary.Keys
  implements:
  - System.Collections.IDictionary.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: HybridDictionary.Values
- uid: System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  commentId: M:System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 230
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Adds an entry with the specified key and value into the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Add(object key, object value)
    content.vb: Public Sub Add(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the entry to add. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the entry to add. The value can be <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An entry with the same key already exists in the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.Specialized.HybridDictionary.Remove(System.Object)
    commentId: M:System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  - type: System.Collections.Specialized.HybridDictionary.Item(System.Object)
    commentId: P:System.Collections.Specialized.HybridDictionary.Item(System.Object)
  - type: System.Collections.IDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  implements:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HybridDictionary.Add(Object, Object)
- uid: System.Collections.Specialized.HybridDictionary.Clear
  commentId: M:System.Collections.Specialized.HybridDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 255
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes all entries from the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  seealso:
  - type: System.Collections.IDictionary.Clear
    commentId: M:System.Collections.IDictionary.Clear
  implements:
  - System.Collections.IDictionary.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HybridDictionary.Clear()
- uid: System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  commentId: M:System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 272
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> contains a specific key.</p>\n"
  syntax:
    content: public bool Contains(object key)
    content.vb: Public Function Contains(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> contains an entry with the specified key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  implements:
  - System.Collections.IDictionary.Contains(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HybridDictionary.Contains(Object)
- uid: System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 290
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Copies the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> entries to a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> instance at the specified index.</p>\n"
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> objects copied from <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  - type: System.Collections.DictionaryEntry
    commentId: T:System.Collections.DictionaryEntry
  - type: System.Collections.Specialized.HybridDictionary.GetEnumerator
    commentId: M:System.Collections.Specialized.HybridDictionary.GetEnumerator
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HybridDictionary.CopyTo(Array, Int32)
- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator
  commentId: M:System.Collections.Specialized.HybridDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 302
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public IDictionaryEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IDictionary.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HybridDictionary.GetEnumerator()
- uid: System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  commentId: M:System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 328
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes the entry with the specified key from the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Remove(object key)
    content.vb: Public Sub Remove(key As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the entry to remove. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  - type: System.Collections.IDictionary.Remove(System.Object)
    commentId: M:System.Collections.IDictionary.Remove(System.Object)
  implements:
  - System.Collections.IDictionary.Remove(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HybridDictionary.Remove(Object)
- uid: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Specialized.HybridDictionary.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 315
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: HybridDictionary.IEnumerable.GetEnumerator()
  nameWithType.vb: HybridDictionary.System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Specialized
  nameWithType: System.Collections.Specialized
  commentId: N:System.Collections.Specialized
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IDictionary
  nameWithType: IDictionary
  commentId: T:System.Collections.IDictionary
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection
  nameWithType: ICollection
  commentId: T:System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerable
  nameWithType: IEnumerable
  commentId: T:System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Queryable.AsQueryable()
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: ParallelEnumerable.AsParallel()
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Enumerable.Cast<TResult>()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Enumerable.OfType<TResult>()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections
  nameWithType: System.Collections
  commentId: N:System.Collections
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Queryable.AsQueryable(IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
- uid: System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.Queryable
  nameWithType: Queryable
  commentId: T:System.Linq.Queryable
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
- uid: System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable
  nameWithType: ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
- uid: System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.Enumerable
  nameWithType: Enumerable
  commentId: T:System.Linq.Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
- uid: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq
  nameWithType: System.Linq
  commentId: N:System.Linq
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.Count
  nameWithType: ICollection.Count
  commentId: P:System.Collections.ICollection.Count
- uid: System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.IsFixedSize
  nameWithType: IDictionary.IsFixedSize
  commentId: P:System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.IsReadOnly
  nameWithType: IDictionary.IsReadOnly
  commentId: P:System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.IsSynchronized
  nameWithType: ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
- uid: System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Item[System.Object]
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: 'XXX'
    fullName: '['
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.Item[Object]
  nameWithType.vb: IDictionary.Item(Object)
  commentId: P:System.Collections.IDictionary.Item(System.Object)
- uid: System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Keys
  nameWithType: IDictionary.Keys
  commentId: P:System.Collections.IDictionary.Keys
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.SyncRoot
  nameWithType: ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
- uid: System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Values
  nameWithType: IDictionary.Values
  commentId: P:System.Collections.IDictionary.Values
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.Add(Object, Object)
  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
- uid: System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: "XXX"
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: "XXX"
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.Clear()
  commentId: M:System.Collections.IDictionary.Clear
- uid: System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.Contains(Object)
  commentId: M:System.Collections.IDictionary.Contains(System.Object)
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: "XXX"
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: "XXX"
    fullName: System.Collections.ICollection.CopyTo
  - name: "XXX"
    fullName: (
  - uid: System.Array
    name: "XXX"
    fullName: System.Array
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: "XXX"
    fullName: System.Collections.ICollection.CopyTo
  - name: "XXX"
    fullName: (
  - uid: System.Array
    name: "XXX"
    fullName: System.Array
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: ICollection.CopyTo(Array, Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Array
  nameWithType: Array
  commentId: T:System.Array
- uid: System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.GetEnumerator()
  commentId: M:System.Collections.IDictionary.GetEnumerator
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  commentId: T:System.Collections.IDictionaryEnumerator
- uid: System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: "XXX"
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IDictionary.Remove(Object)
  commentId: M:System.Collections.IDictionary.Remove(System.Object)
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable.GetEnumerator()
  commentId: M:System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerator
  nameWithType: IEnumerator
  commentId: T:System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.InvalidCastException
  isExternal: false
  name: "XXX"
  fullName: System.InvalidCastException
  nameWithType: InvalidCastException
  commentId: T:System.InvalidCastException

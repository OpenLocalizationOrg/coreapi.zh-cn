items:
- uid: System.Reflection.CustomAttributeData
  commentId: T:System.Reflection.CustomAttributeData
  id: CustomAttributeData
  parent: System.Reflection
  children:
  - System.Reflection.CustomAttributeData.AttributeType
  - System.Reflection.CustomAttributeData.Constructor
  - System.Reflection.CustomAttributeData.ConstructorArguments
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Reflection.CustomAttributeData.NamedArguments
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.CustomAttributeData
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributeData
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 23
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public class CustomAttributeData
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Class CustomAttributeData
  seealso:
  - type: System.Reflection.Assembly.ReflectionOnlyLoad
    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: CustomAttributeData
- uid: System.Reflection.CustomAttributeData.AttributeType
  commentId: P:System.Reflection.CustomAttributeData.AttributeType
  id: AttributeType
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.CustomAttributeData.AttributeType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AttributeType
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 522
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the type of the attribute.</p>\n"
  syntax:
    content: public Type AttributeType { get; }
    content.vb: Public ReadOnly Property AttributeType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the attribute.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: CustomAttributeData.AttributeType
- uid: System.Reflection.CustomAttributeData.ConstructorArguments
  commentId: P:System.Reflection.CustomAttributeData.ConstructorArguments
  id: ConstructorArguments
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.CustomAttributeData.ConstructorArguments
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConstructorArguments
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 527
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the list of positional arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public virtual IList<CustomAttributeTypedArgument> ConstructorArguments { get; }
    content.vb: >-
      <ComVisible(True)>

      Public Overridable ReadOnly Property ConstructorArguments As IList(Of CustomAttributeTypedArgument)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}
      description: "\n<p>A collection of structures that represent the positional arguments specified for the custom attribute instance.</p>\n"
  seealso:
  - type: System.Reflection.CustomAttributeData.NamedArguments
    commentId: P:System.Reflection.CustomAttributeData.NamedArguments
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  - type: System.Reflection.Assembly.ReflectionOnlyLoad
    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: CustomAttributeData.ConstructorArguments
- uid: System.Reflection.CustomAttributeData.NamedArguments
  commentId: P:System.Reflection.CustomAttributeData.NamedArguments
  id: NamedArguments
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.CustomAttributeData.NamedArguments
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NamedArguments
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 550
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the list of named arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual IList<CustomAttributeNamedArgument> NamedArguments { get; }
    content.vb: Public Overridable ReadOnly Property NamedArguments As IList(Of CustomAttributeNamedArgument)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}
      description: "\n<p>A collection of structures that represent the named arguments specified for the custom attribute instance.</p>\n"
  seealso:
  - type: System.Reflection.CustomAttributeData.ConstructorArguments
    commentId: P:System.Reflection.CustomAttributeData.ConstructorArguments
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  - type: System.Reflection.Assembly.ReflectionOnlyLoad
    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: CustomAttributeData.NamedArguments
- uid: System.Reflection.CustomAttributeData.Constructor
  commentId: P:System.Reflection.CustomAttributeData.Constructor
  id: Constructor
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.CustomAttributeData.Constructor
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Constructor
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 524
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the constructor that would have initialized the custom attribute.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public virtual ConstructorInfo Constructor { get; }
    content.vb: >-
      <ComVisible(True)>

      Public Overridable ReadOnly Property Constructor As ConstructorInfo
    parameters: []
    return:
      type: System.Reflection.ConstructorInfo
      description: "\n<p>An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  seealso:
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  - type: System.Reflection.Assembly.ReflectionOnlyLoad
    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: CustomAttributeData.Constructor
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  id: GetCustomAttributes(System.Reflection.Assembly)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCustomAttributes
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 45
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a list of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> objects representing data about the attributes that have been applied to the target assembly.</p>\n"
  syntax:
    content: public static IList<CustomAttributeData> GetCustomAttributes(Assembly target)
    content.vb: Public Shared Function GetCustomAttributes(target As Assembly) As IList(Of CustomAttributeData)
    parameters:
    - id: target
      type: System.Reflection.Assembly
      description: "\n<p>The assembly whose custom attribute data is to be retrieved.</p>\n"
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: "\n<p>A list of objects that represent data about the attributes that have been applied to the target assembly.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>target</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  - type: System.Reflection.Assembly.ReflectionOnlyLoad
    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CustomAttributeData.GetCustomAttributes(Assembly)
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  id: GetCustomAttributes(System.Reflection.MemberInfo)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCustomAttributes
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 28
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a list of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> objects representing data about the attributes that have been applied to the target member.</p>\n"
  syntax:
    content: public static IList<CustomAttributeData> GetCustomAttributes(MemberInfo target)
    content.vb: Public Shared Function GetCustomAttributes(target As MemberInfo) As IList(Of CustomAttributeData)
    parameters:
    - id: target
      type: System.Reflection.MemberInfo
      description: "\n<p>The member whose attribute data is to be retrieved.</p>\n"
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: "\n<p>A list of objects that represent data about the attributes that have been applied to the target member.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>target</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  - type: System.Reflection.Assembly.ReflectionOnlyLoad
    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CustomAttributeData.GetCustomAttributes(MemberInfo)
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  id: GetCustomAttributes(System.Reflection.Module)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCustomAttributes
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 36
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a list of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> objects representing data about the attributes that have been applied to the target module.</p>\n"
  syntax:
    content: public static IList<CustomAttributeData> GetCustomAttributes(Module target)
    content.vb: Public Shared Function GetCustomAttributes(target As  Module) As IList(Of CustomAttributeData)
    parameters:
    - id: target
      type: System.Reflection.Module
      description: "\n<p>The module whose custom attribute data is to be retrieved.</p>\n"
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: "\n<p>A list of objects that represent data about the attributes that have been applied to the target module.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>target</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CustomAttributeData.GetCustomAttributes(Module)
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  id: GetCustomAttributes(System.Reflection.ParameterInfo)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCustomAttributes
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 54
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a list of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> objects representing data about the attributes that have been applied to the target parameter.</p>\n"
  syntax:
    content: public static IList<CustomAttributeData> GetCustomAttributes(ParameterInfo target)
    content.vb: Public Shared Function GetCustomAttributes(target As ParameterInfo) As IList(Of CustomAttributeData)
    parameters:
    - id: target
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter whose attribute data is to be retrieved.</p>\n"
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: "\n<p>A list of objects that represent data about the attributes that have been applied to the target parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>target</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  - type: System.Reflection.Assembly.ReflectionOnlyLoad
    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CustomAttributeData.GetCustomAttributes(ParameterInfo)
references:
- uid: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection
  nameWithType: System.Reflection
  commentId: N:System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Type
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Type
  nameWithType: Type
  commentId: T:System.Type
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: "XXX"
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument>
  fullname.vb: System.Collections.Generic.IList(Of System.Reflection.CustomAttributeTypedArgument)
  name.vb: IList(Of CustomAttributeTypedArgument)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Reflection.CustomAttributeTypedArgument
    name: "XXX"
    fullName: System.Reflection.CustomAttributeTypedArgument
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeTypedArgument
    name: "XXX"
    fullName: System.Reflection.CustomAttributeTypedArgument
  - name: "XXX"
    fullName: )
  nameWithType: IList<CustomAttributeTypedArgument>
  nameWithType.vb: IList(Of CustomAttributeTypedArgument)
  commentId: T:System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}
- uid: System.Collections.Generic.IList`1
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: IList<T>
  nameWithType.vb: IList(Of T)
  commentId: T:System.Collections.Generic.IList`1
- uid: System.Collections.Generic
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: "XXX"
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument>
  fullname.vb: System.Collections.Generic.IList(Of System.Reflection.CustomAttributeNamedArgument)
  name.vb: IList(Of CustomAttributeNamedArgument)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Reflection.CustomAttributeNamedArgument
    name: "XXX"
    fullName: System.Reflection.CustomAttributeNamedArgument
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeNamedArgument
    name: "XXX"
    fullName: System.Reflection.CustomAttributeNamedArgument
  - name: "XXX"
    fullName: )
  nameWithType: IList<CustomAttributeNamedArgument>
  nameWithType.vb: IList(Of CustomAttributeNamedArgument)
  commentId: T:System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.ConstructorInfo
  nameWithType: ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.Assembly
  nameWithType: Assembly
  commentId: T:System.Reflection.Assembly
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: "XXX"
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
  fullname.vb: System.Collections.Generic.IList(Of System.Reflection.CustomAttributeData)
  name.vb: IList(Of CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: "XXX"
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: "XXX"
    fullName: System.Reflection.CustomAttributeData
  - name: "XXX"
    fullName: )
  nameWithType: IList<CustomAttributeData>
  nameWithType.vb: IList(Of CustomAttributeData)
  commentId: T:System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.MemberInfo
  nameWithType: MemberInfo
  commentId: T:System.Reflection.MemberInfo
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.Module
  nameWithType: Module
  commentId: T:System.Reflection.Module
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.ParameterInfo
  nameWithType: ParameterInfo
  commentId: T:System.Reflection.ParameterInfo
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException

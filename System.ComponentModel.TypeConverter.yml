items:
- uid: System.ComponentModel.TypeConverter
  commentId: T:System.ComponentModel.TypeConverter
  id: TypeConverter
  parent: System.ComponentModel
  children:
  - System.ComponentModel.TypeConverter.#ctor
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  - System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  - System.ComponentModel.TypeConverter.GetProperties(System.Object)
  - System.ComponentModel.TypeConverter.GetPropertiesSupported
  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValues
  - System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.IsValid(System.Object)
  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeConverter
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 13
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.</p>\n"
  syntax:
    content: public class TypeConverter
    content.vb: Public Class TypeConverter
  seealso:
  - type: System.ComponentModel.TypeConverterAttribute
    commentId: T:System.ComponentModel.TypeConverterAttribute
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  - type: System.ComponentModel.TypeConverter.SimplePropertyDescriptor
    commentId: T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor
  - type: System.ComponentModel.TypeConverter.StandardValuesCollection
    commentId: T:System.ComponentModel.TypeConverter.StandardValuesCollection
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: TypeConverter
- uid: System.ComponentModel.TypeConverter.#ctor
  commentId: M:System.ComponentModel.TypeConverter.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.TypeConverter()
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 461
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public TypeConverter()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.TypeConverter()
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertFrom
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 29
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</p>\n"
  syntax:
    content: public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
    content.vb: Public Overridable Function CanConvertFrom(context As ITypeDescriptorContext, sourceType As Type) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: sourceType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type you want to convert from. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.CanConvertFrom(ITypeDescriptorContext, Type)
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  id: CanConvertFrom(System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertFrom
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 19
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this converter can convert an object of the given type to the type of this converter.</p>\n"
  syntax:
    content: public bool CanConvertFrom(Type sourceType)
    content.vb: Public Function CanConvertFrom(sourceType As Type) As Boolean
    parameters:
    - id: sourceType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type you want to convert from. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.CanConvertFrom(Type)
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertTo
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 47
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this converter can convert the object to the specified type, using the specified context.</p>\n"
  syntax:
    content: public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
    content.vb: Public Overridable Function CanConvertTo(context As ITypeDescriptorContext, destinationType As Type) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: destinationType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type you want to convert to. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.CanConvertTo(ITypeDescriptorContext, Type)
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  id: CanConvertTo(System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertTo
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 38
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this converter can convert the object to the specified type.</p>\n"
  syntax:
    content: public bool CanConvertTo(Type destinationType)
    content.vb: Public Function CanConvertTo(destinationType As Type) As Boolean
    parameters:
    - id: destinationType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type you want to convert to. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this converter can perform the conversion; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.CanConvertTo(Type)
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFrom
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 64
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given object to the type of this converter, using the specified context and culture information.</p>\n"
  syntax:
    content: public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
    content.vb: Public Overridable Function ConvertFrom(context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "\n<p>The <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> to use as the current culture. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted value.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  id: ConvertFrom(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFrom
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 56
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given value to the type of this converter.</p>\n"
  syntax:
    content: public object ConvertFrom(object value)
    content.vb: Public Function ConvertFrom(value As Object) As Object
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted value.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertFrom(Object)
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  id: ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 80
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given string to the type of this converter, using the invariant culture and the specified context.</p>\n"
  syntax:
    content: public object ConvertFromInvariantString(ITypeDescriptorContext context, string text)
    content.vb: Public Function ConvertFromInvariantString(context As ITypeDescriptorContext, text As String) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: text
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted text.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, String)
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  id: ConvertFromInvariantString(System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 72
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given string to the type of this converter, using the invariant culture.</p>\n"
  syntax:
    content: public object ConvertFromInvariantString(string text)
    content.vb: Public Function ConvertFromInvariantString(text As String) As Object
    parameters:
    - id: text
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted text.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertFromInvariantString(String)
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 104
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given text to an object, using the specified context and culture information.</p>\n"
  syntax:
    content: public object ConvertFromString(ITypeDescriptorContext context, CultureInfo culture, string text)
    content.vb: Public Function ConvertFromString(context As ITypeDescriptorContext, culture As CultureInfo, text As String) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>. If <strong>null</strong> is passed, the current culture is assumed. </p>\n"
    - id: text
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted text.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, String)
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 96
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given text to an object, using the specified context.</p>\n"
  syntax:
    content: public object ConvertFromString(ITypeDescriptorContext context, string text)
    content.vb: Public Function ConvertFromString(context As ITypeDescriptorContext, text As String) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: text
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted text.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertFromString(ITypeDescriptorContext, String)
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  id: ConvertFromString(System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 88
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the specified text to an object.</p>\n"
  syntax:
    content: public object ConvertFromString(string text)
    content.vb: Public Function ConvertFromString(text As String) As Object
    parameters:
    - id: text
      type: System.String
      description: "\n<p>The text representation of the object to convert. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted text.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The string cannot be converted into the appropriate object. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertFromString(String)
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertTo
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 122
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given value object to the specified type, using the specified context and culture information.</p>\n"
  syntax:
    content: public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
    content.vb: Public Overridable Function ConvertTo(context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>. If <strong>null</strong> is passed, the current culture is assumed. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    - id: destinationType
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to convert the <em>value</em> parameter to. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>destinationType</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  id: ConvertTo(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertTo
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 113
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given value object to the specified type, using the arguments.</p>\n"
  syntax:
    content: public object ConvertTo(object value, Type destinationType)
    content.vb: Public Function ConvertTo(value As Object, destinationType As Type) As Object
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    - id: destinationType
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to convert the <em>value</em> parameter to. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>destinationType</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertTo(Object, Type)
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 160
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the specified value to a culture-invariant string representation, using the specified context.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Security", "CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands")]

      public string ConvertToInvariantString(ITypeDescriptorContext context, object value)
    content.vb: >-
      <SuppressMessage("Microsoft.Security", "CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands")>

      Public Function ConvertToInvariantString(context As ITypeDescriptorContext, value As Object) As String
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted value.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, Object)
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  id: ConvertToInvariantString(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 152
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the specified value to a culture-invariant string representation.</p>\n"
  syntax:
    content: public string ConvertToInvariantString(object value)
    content.vb: Public Function ConvertToInvariantString(value As Object) As String
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted value.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertToInvariantString(Object)
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 185
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given value to a string representation, using the specified context and culture information.</p>\n"
  syntax:
    content: public string ConvertToString(ITypeDescriptorContext context, CultureInfo culture, object value)
    content.vb: Public Function ConvertToString(context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As String
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>. If <strong>null</strong> is passed, the current culture is assumed. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted value.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, Object)
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 177
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given value to a string representation, using the given context.</p>\n"
  syntax:
    content: public string ConvertToString(ITypeDescriptorContext context, object value)
    content.vb: Public Function ConvertToString(context As ITypeDescriptorContext, value As Object) As String
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted value.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertToString(ITypeDescriptorContext, Object)
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  id: ConvertToString(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 169
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the specified value to a string representation.</p>\n"
  syntax:
    content: public string ConvertToString(object value)
    content.vb: Public Function ConvertToString(value As Object) As String
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that represents the converted value.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.ConvertToString(Object)
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  id: CreateInstance(System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 193
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Re-creates an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> given a set of property values for the object.</p>\n"
  syntax:
    content: public object CreateInstance(IDictionary propertyValues)
    content.vb: Public Function CreateInstance(propertyValues As IDictionary) As Object
    parameters:
    - id: propertyValues
      type: System.Collections.IDictionary
      description: "\n<p>An <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> that represents a dictionary of new property values. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> representing the given <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>, or <strong>null</strong> if the object cannot be created. This method always returns <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.CreateInstance(IDictionary)
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  id: CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 201
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Creates an instance of the type that this <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> is associated with, using the specified context, given a set of property values for the object.</p>\n"
  syntax:
    content: public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
    content.vb: Public Overridable Function CreateInstance(context As ITypeDescriptorContext, propertyValues As IDictionary) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: propertyValues
      type: System.Collections.IDictionary
      description: "\n<p>An <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> of new property values. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> representing the given <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>, or <strong>null</strong> if the object cannot be created. This method always returns <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary)
- uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  id: GetConvertFromException(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConvertFromException
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 209
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns an exception to throw when a conversion cannot be performed.</p>\n"
  syntax:
    content: protected Exception GetConvertFromException(object value)
    content.vb: Protected Function GetConvertFromException(value As Object) As Exception
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert, or <strong>null</strong> if the object is not available. </p>\n"
    return:
      type: System.Exception
      description: "\n<p>An <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> that represents the exception to throw when a conversion cannot be performed.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Automatically thrown by this method. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: TypeConverter.GetConvertFromException(Object)
- uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  id: GetConvertToException(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConvertToException
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 229
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns an exception to throw when a conversion cannot be performed.</p>\n"
  syntax:
    content: protected Exception GetConvertToException(object value, Type destinationType)
    content.vb: Protected Function GetConvertToException(value As Object, destinationType As Type) As Exception
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to convert, or <strong>null</strong> if the object is not available. </p>\n"
    - id: destinationType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type the conversion was trying to convert to. </p>\n"
    return:
      type: System.Exception
      description: "\n<p>An <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> that represents the exception to throw when a conversion cannot be performed.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Automatically thrown by this method. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: TypeConverter.GetConvertToException(Object, Type)
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  id: GetCreateInstanceSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCreateInstanceSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 251
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether changing a value on this object requires a call to the <xref href=\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\" data-throw-if-not-resolved=\"false\"></xref> method to create a new value.</p>\n"
  syntax:
    content: public bool GetCreateInstanceSupported()
    content.vb: Public Function GetCreateInstanceSupported As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if changing a property on this object requires a call to <xref href=\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\" data-throw-if-not-resolved=\"false\"></xref> to create a new value; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.GetCreateInstanceSupported()
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCreateInstanceSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 263
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether changing a value on this object requires a call to <xref href=\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\" data-throw-if-not-resolved=\"false\"></xref> to create a new value, using the specified context.</p>\n"
  syntax:
    content: public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetCreateInstanceSupported(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if changing a property on this object requires a call to <xref href=\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\" data-throw-if-not-resolved=\"false\"></xref> to create a new value; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 283
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of properties for the type of array specified by the value parameter, using the specified context.</p>\n"
  syntax:
    content: public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value)
    content.vb: Public Function GetProperties(context As ITypeDescriptorContext, value As Object) As PropertyDescriptorCollection
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type of array for which to get properties. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> with the properties that are exposed for this data type, or <strong>null</strong> if there are no properties.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext, Object)
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 294
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</p>\n"
  syntax:
    content: public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
    content.vb: Public Overridable Function GetProperties(context As ITypeDescriptorContext, value As Object, attributes As Attribute()) As PropertyDescriptorCollection
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type of array for which to get properties. </p>\n"
    - id: attributes
      type: System.Attribute[]
      description: "\n<p>An array of type <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> that is used as a filter. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> with the properties that are exposed for this data type, or <strong>null</strong> if there are no properties.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  - type: System.Attribute
    commentId: T:System.Attribute
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute())
  name.vb: GetProperties(ITypeDescriptorContext, Object, Attribute())
  nameWithType: TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute[])
  nameWithType.vb: TypeConverter.GetProperties(ITypeDescriptorContext, Object, Attribute())
- uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetProperties(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 272
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of properties for the type of array specified by the value parameter.</p>\n"
  syntax:
    content: public PropertyDescriptorCollection GetProperties(object value)
    content.vb: Public Function GetProperties(value As Object) As PropertyDescriptorCollection
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that specifies the type of array for which to get properties. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> with the properties that are exposed for this data type, or <strong>null</strong> if there are no properties.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.GetProperties(Object)
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported
  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported
  id: GetPropertiesSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPropertiesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 303
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this object supports properties.</p>\n"
  syntax:
    content: public bool GetPropertiesSupported()
    content.vb: Public Function GetPropertiesSupported As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <xref href=\"System.ComponentModel.TypeConverter.GetProperties(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> should be called to find the properties of this object; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.GetPropertiesSupported()
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPropertiesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 311
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this object supports properties, using the specified context.</p>\n"
  syntax:
    content: public virtual bool GetPropertiesSupported(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetPropertiesSupported(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <xref href=\"System.ComponentModel.TypeConverter.GetProperties(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> should be called to find the properties of this object; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.GetPropertiesSupported(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.GetStandardValues
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues
  id: GetStandardValues
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetStandardValues()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValues
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 319
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of standard values from the default context for the data type this type converter is designed for.</p>\n"
  syntax:
    content: public ICollection GetStandardValues()
    content.vb: Public Function GetStandardValues As ICollection
    return:
      type: System.Collections.ICollection
      description: "\n<p>A <xref href=\"System.ComponentModel.TypeConverter.StandardValuesCollection\" data-throw-if-not-resolved=\"false\"></xref> containing a standard set of valid values, or <strong>null</strong> if the data type does not support a standard set of values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.GetStandardValues()
- uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValues
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 327
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</p>\n"
  syntax:
    content: public virtual TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetStandardValues(context As ITypeDescriptorContext) As TypeConverter.StandardValuesCollection
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be <strong>null</strong>. </p>\n"
    return:
      type: System.ComponentModel.TypeConverter.StandardValuesCollection
      description: "\n<p>A <xref href=\"System.ComponentModel.TypeConverter.StandardValuesCollection\" data-throw-if-not-resolved=\"false\"></xref> that holds a standard set of valid values, or <strong>null</strong> if the data type does not support a standard set of values.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.GetStandardValues(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  id: GetStandardValuesExclusive
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesExclusive
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 338
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the collection of standard values returned from <xref href=\"System.ComponentModel.TypeConverter.GetStandardValues\" data-throw-if-not-resolved=\"false\"></xref> is an exclusive list.</p>\n"
  syntax:
    content: public bool GetStandardValuesExclusive()
    content.vb: Public Function GetStandardValuesExclusive As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.ComponentModel.TypeConverter.StandardValuesCollection\" data-throw-if-not-resolved=\"false\"></xref> returned from <xref href=\"System.ComponentModel.TypeConverter.GetStandardValues\" data-throw-if-not-resolved=\"false\"></xref> is an exhaustive list of possible values; <strong>false</strong> if other values are possible.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.GetStandardValuesExclusive()
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesExclusive
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 350
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the collection of standard values returned from <xref href=\"System.ComponentModel.TypeConverter.GetStandardValues\" data-throw-if-not-resolved=\"false\"></xref> is an exclusive list of possible values, using the specified context.</p>\n"
  syntax:
    content: public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetStandardValuesExclusive(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.ComponentModel.TypeConverter.StandardValuesCollection\" data-throw-if-not-resolved=\"false\"></xref> returned from <xref href=\"System.ComponentModel.TypeConverter.GetStandardValues\" data-throw-if-not-resolved=\"false\"></xref> is an exhaustive list of possible values; <strong>false</strong> if other values are possible.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported
  id: GetStandardValuesSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 361
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this object supports a standard set of values that can be picked from a list.</p>\n"
  syntax:
    content: public bool GetStandardValuesSupported()
    content.vb: Public Function GetStandardValuesSupported As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <xref href=\"System.ComponentModel.TypeConverter.GetStandardValues\" data-throw-if-not-resolved=\"false\"></xref> should be called to find a common set of values the object supports; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.GetStandardValuesSupported()
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 372
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</p>\n"
  syntax:
    content: public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetStandardValuesSupported(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <xref href=\"System.ComponentModel.TypeConverter.GetStandardValues\" data-throw-if-not-resolved=\"false\"></xref> should be called to find a common set of values the object supports; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.GetStandardValuesSupported(ITypeDescriptorContext)
- uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValid
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 388
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the given value object is valid for this type and for the specified context.</p>\n"
  syntax:
    content: public virtual bool IsValid(ITypeDescriptorContext context, object value)
    content.vb: Public Overridable Function IsValid(context As ITypeDescriptorContext, value As Object) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: "\n<p>An <xref href=\"System.ComponentModel.ITypeDescriptorContext\" data-throw-if-not-resolved=\"false\"></xref> that provides a format context. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to test for validity. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified value is valid for this object; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  - type: System.ComponentModel.EnumConverter
    commentId: T:System.ComponentModel.EnumConverter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TypeConverter.IsValid(ITypeDescriptorContext, Object)
- uid: System.ComponentModel.TypeConverter.IsValid(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.Object)
  id: IsValid(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.IsValid(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValid
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 380
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the given value object is valid for this type.</p>\n"
  syntax:
    content: public bool IsValid(object value)
    content.vb: Public Function IsValid(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to test for validity. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified value is valid for this object; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.EnumConverter
    commentId: T:System.ComponentModel.EnumConverter
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TypeConverter.IsValid(Object)
- uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  commentId: M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  id: SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SortProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 417
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts a collection of properties.</p>\n"
  syntax:
    content: protected PropertyDescriptorCollection SortProperties(PropertyDescriptorCollection props, string[] names)
    content.vb: Protected Function SortProperties(props As PropertyDescriptorCollection, names As String()) As PropertyDescriptorCollection
    parameters:
    - id: props
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that has the properties to sort. </p>\n"
    - id: names
      type: System.String[]
      description: "\n<p>An array of names in the order you want the properties to appear in the collection. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the sorted properties.</p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  - type: System.ComponentModel.TypeConverter
    commentId: T:System.ComponentModel.TypeConverter
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String())
  name.vb: SortProperties(PropertyDescriptorCollection, String())
  nameWithType: TypeConverter.SortProperties(PropertyDescriptorCollection, String[])
  nameWithType.vb: TypeConverter.SortProperties(PropertyDescriptorCollection, String())
references:
- uid: System.ComponentModel
  isExternal: false
  name: "XXX"
  fullName: System.ComponentModel
  nameWithType: System.ComponentModel
  commentId: N:System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.ComponentModel.ITypeDescriptorContext
  parent: System.ComponentModel
  isExternal: false
  name: "XXX"
  fullName: System.ComponentModel.ITypeDescriptorContext
  nameWithType: ITypeDescriptorContext
  commentId: T:System.ComponentModel.ITypeDescriptorContext
- uid: System.Type
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Type
  nameWithType: Type
  commentId: T:System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: "XXX"
  fullName: System.Globalization.CultureInfo
  nameWithType: CultureInfo
  commentId: T:System.Globalization.CultureInfo
- uid: System.Globalization
  isExternal: false
  name: "XXX"
  fullName: System.Globalization
  nameWithType: System.Globalization
  commentId: N:System.Globalization
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IDictionary
  nameWithType: IDictionary
  commentId: T:System.Collections.IDictionary
- uid: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections
  nameWithType: System.Collections
  commentId: N:System.Collections
- uid: System.Exception
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Exception
  nameWithType: Exception
  commentId: T:System.Exception
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: "XXX"
  fullName: System.ComponentModel.PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  commentId: T:System.ComponentModel.PropertyDescriptorCollection
- uid: System.Attribute[]
  name: "XXX"
  fullName: System.Attribute[]
  fullname.vb: System.Attribute()
  name.vb: Attribute()
  spec.csharp:
  - uid: System.Attribute
    name: "XXX"
    fullName: System.Attribute
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Attribute
    name: "XXX"
    fullName: System.Attribute
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: Attribute[]
  nameWithType.vb: Attribute()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection
  nameWithType: ICollection
  commentId: T:System.Collections.ICollection
- uid: System.ComponentModel.TypeConverter.StandardValuesCollection
  parent: System.ComponentModel
  isExternal: false
  name: "XXX"
  fullName: System.ComponentModel.TypeConverter.StandardValuesCollection
  nameWithType: TypeConverter.StandardValuesCollection
  commentId: T:System.ComponentModel.TypeConverter.StandardValuesCollection
- uid: System.String[]
  name: "XXX"
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: String[]
  nameWithType.vb: String()
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException

items:
- uid: System.ComponentModel.AsyncCompletedEventArgs
  commentId: T:System.ComponentModel.AsyncCompletedEventArgs
  id: AsyncCompletedEventArgs
  parent: System.ComponentModel
  children:
  - System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)
  - System.ComponentModel.AsyncCompletedEventArgs.Cancelled
  - System.ComponentModel.AsyncCompletedEventArgs.Error
  - System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
  - System.ComponentModel.AsyncCompletedEventArgs.UserState
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.AsyncCompletedEventArgs
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsyncCompletedEventArgs
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 11
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Provides data for the MethodName<strong>Completed</strong> event.</p>\n"
  syntax:
    content: 'public class AsyncCompletedEventArgs : EventArgs'
    content.vb: >-
      Public Class AsyncCompletedEventArgs
          Inherits EventArgs
  seealso:
  - type: System.ComponentModel.AsyncCompletedEventHandler
    commentId: T:System.ComponentModel.AsyncCompletedEventHandler
  - type: System.ComponentModel.AsyncOperationManager
    commentId: T:System.ComponentModel.AsyncOperationManager
  - type: System.ComponentModel.AsyncOperation
    commentId: T:System.ComponentModel.AsyncOperation
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: AsyncCompletedEventArgs
- uid: System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)
  commentId: M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)
  id: '#ctor(System.Exception,System.Boolean,System.Object)'
  parent: System.ComponentModel.AsyncCompletedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.AsyncCompletedEventArgs.AsyncCompletedEventArgs(System.Exception, System.Boolean, System.Object)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 13
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public AsyncCompletedEventArgs(Exception error, bool cancelled, object userState)
    content.vb: Public Sub New(error As Exception, cancelled As Boolean, userState As Object)
    parameters:
    - id: error
      type: System.Exception
      description: "\n<p>Any error that occurred during the asynchronous operation.</p>\n"
    - id: cancelled
      type: System.Boolean
      description: "\n<p>A value indicating whether the asynchronous operation was canceled.</p>\n"
    - id: userState
      type: System.Object
      description: "\n<p>The optional user-supplied state object passed to the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: AsyncCompletedEventArgs.AsyncCompletedEventArgs(Exception, Boolean, Object)
- uid: System.ComponentModel.AsyncCompletedEventArgs.Cancelled
  commentId: P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled
  id: Cancelled
  parent: System.ComponentModel.AsyncCompletedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.AsyncCompletedEventArgs.Cancelled
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cancelled
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 38
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether an asynchronous operation has been canceled.</p>\n"
  syntax:
    content: public bool Cancelled { get; }
    content.vb: Public ReadOnly Property Cancelled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the background operation has been canceled; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.AsyncCompletedEventHandler
    commentId: T:System.ComponentModel.AsyncCompletedEventHandler
  - type: System.ComponentModel.AsyncOperationManager
    commentId: T:System.ComponentModel.AsyncOperationManager
  - type: System.ComponentModel.AsyncOperation
    commentId: T:System.ComponentModel.AsyncOperation
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: AsyncCompletedEventArgs.Cancelled
- uid: System.ComponentModel.AsyncCompletedEventArgs.Error
  commentId: P:System.ComponentModel.AsyncCompletedEventArgs.Error
  id: Error
  parent: System.ComponentModel.AsyncCompletedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.AsyncCompletedEventArgs.Error
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Error
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 39
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating which error occurred during an asynchronous operation.</p>\n"
  syntax:
    content: public Exception Error { get; }
    content.vb: Public ReadOnly Property Error As Exception
    parameters: []
    return:
      type: System.Exception
      description: "\n<p>An <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instance, if an error occurred during an asynchronous operation; otherwise <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.AsyncCompletedEventHandler
    commentId: T:System.ComponentModel.AsyncCompletedEventHandler
  - type: System.ComponentModel.AsyncOperationManager
    commentId: T:System.ComponentModel.AsyncOperationManager
  - type: System.ComponentModel.AsyncOperation
    commentId: T:System.ComponentModel.AsyncOperation
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: AsyncCompletedEventArgs.Error
- uid: System.ComponentModel.AsyncCompletedEventArgs.UserState
  commentId: P:System.ComponentModel.AsyncCompletedEventArgs.UserState
  id: UserState
  parent: System.ComponentModel.AsyncCompletedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.AsyncCompletedEventArgs.UserState
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserState
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 40
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets the unique identifier for the asynchronous task.</p>\n"
  syntax:
    content: public object UserState { get; }
    content.vb: Public ReadOnly Property UserState As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object reference that uniquely identifies the asynchronous task; otherwise, <strong>null</strong> if no value has been set.</p>\n"
  seealso:
  - type: System.ComponentModel.AsyncCompletedEventHandler
    commentId: T:System.ComponentModel.AsyncCompletedEventHandler
  - type: System.ComponentModel.AsyncOperationManager
    commentId: T:System.ComponentModel.AsyncOperationManager
  - type: System.ComponentModel.AsyncOperation
    commentId: T:System.ComponentModel.AsyncOperation
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: AsyncCompletedEventArgs.UserState
- uid: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
  commentId: M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
  id: RaiseExceptionIfNecessary
  parent: System.ComponentModel.AsyncCompletedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RaiseExceptionIfNecessary
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncCompletedEvent.cs
    startLine: 25
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Raises a user-supplied exception if an asynchronous operation failed.</p>\n"
  syntax:
    content: protected void RaiseExceptionIfNecessary()
    content.vb: Protected Sub RaiseExceptionIfNecessary
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. </p>\n"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "\n<p>The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\" data-throw-if-not-resolved=\"false\"></xref> property has been set by the asynchronous operation. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property holds a reference to <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.ComponentModel.AsyncOperationManager
    commentId: T:System.ComponentModel.AsyncOperationManager
  - type: System.ComponentModel.AsyncOperation
    commentId: T:System.ComponentModel.AsyncOperation
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: AsyncCompletedEventArgs.RaiseExceptionIfNecessary()
references:
- uid: System.ComponentModel
  isExternal: false
  name: "XXX"
  fullName: System.ComponentModel
  nameWithType: System.ComponentModel
  commentId: N:System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.EventArgs
  nameWithType: EventArgs
  commentId: T:System.EventArgs
- uid: System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: "XXX"
  fullName: System.EventArgs.Empty
  nameWithType: EventArgs.Empty
  commentId: F:System.EventArgs.Empty
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Exception
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Exception
  nameWithType: Exception
  commentId: T:System.Exception
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.TargetInvocationException
  nameWithType: TargetInvocationException
  commentId: T:System.Reflection.TargetInvocationException

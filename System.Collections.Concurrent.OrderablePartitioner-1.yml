items:
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  commentId: T:System.Collections.Concurrent.OrderablePartitioner`1
  id: OrderablePartitioner`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  - System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  - System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OrderablePartitioner
    path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 63
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Represents a particular manner of splitting an orderable data source into multiple partitions.</p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public abstract class OrderablePartitioner<TSource> : Partitioner<TSource>
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public MustInherit Class OrderablePartitioner(Of TSource)
          Inherits Partitioner(Of TSource)
    typeParameters:
    - id: TSource
      description: "\n<p>Type of the elements in the collection.</p>\n"
  inheritance:
  - System.Object
  - System.Collections.Concurrent.Partitioner{{TSource}}
  inheritedMembers:
  - System.Collections.Concurrent.Partitioner{{TSource}}.SupportsDynamicPartitions
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  name.vb: OrderablePartitioner(Of TSource)
  nameWithType: OrderablePartitioner<TSource>
  nameWithType.vb: OrderablePartitioner(Of TSource)
- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.OrderablePartitioner(System.Boolean, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 85
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Called from constructors in derived classes to initialize the <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\" data-throw-if-not-resolved=\"false\"></xref> class with the specified constraints on the index keys.</p>\n"
  syntax:
    content: protected OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized)
    content.vb: Protected Sub New(keysOrderedInEachPartition As Boolean, keysOrderedAcrossPartitions As Boolean, keysNormalized As Boolean)
    parameters:
    - id: keysOrderedInEachPartition
      type: System.Boolean
      description: "\n<p>Indicates whether the elements in each partition are yielded in the order of increasing keys.</p>\n"
    - id: keysOrderedAcrossPartitions
      type: System.Boolean
      description: "\n<p>Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.</p>\n"
    - id: keysNormalized
      type: System.Boolean
      description: "\n<p>Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).OrderablePartitioner(System.Boolean, System.Boolean, System.Boolean)
  nameWithType: OrderablePartitioner<TSource>.OrderablePartitioner(Boolean, Boolean, Boolean)
  nameWithType.vb: OrderablePartitioner(Of TSource).OrderablePartitioner(Boolean, Boolean, Boolean)
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  id: KeysNormalized
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysNormalized
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: KeysNormalized
    path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 157
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets whether order keys are normalized.</p>\n"
  syntax:
    content: public bool KeysNormalized { get; }
    content.vb: Public ReadOnly Property KeysNormalized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>true if the keys are normalized; otherwise false.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).KeysNormalized
  nameWithType: OrderablePartitioner<TSource>.KeysNormalized
  nameWithType.vb: OrderablePartitioner(Of TSource).KeysNormalized
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  id: KeysOrderedAcrossPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: KeysOrderedAcrossPartitions
    path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 147
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets whether elements in an earlier partition always come before elements in a later partition.</p>\n"
  syntax:
    content: public bool KeysOrderedAcrossPartitions { get; }
    content.vb: Public ReadOnly Property KeysOrderedAcrossPartitions As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>true if the elements in an earlier partition always come before elements in a later partition; otherwise false.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).KeysOrderedAcrossPartitions
  nameWithType: OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions
  nameWithType.vb: OrderablePartitioner(Of TSource).KeysOrderedAcrossPartitions
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  id: KeysOrderedInEachPartition
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysOrderedInEachPartition
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: KeysOrderedInEachPartition
    path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 137
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets whether elements in each partition are yielded in the order of increasing keys.</p>\n"
  syntax:
    content: public bool KeysOrderedInEachPartition { get; }
    content.vb: Public ReadOnly Property KeysOrderedInEachPartition As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>true if the elements in each partition are yielded in the order of increasing keys; otherwise false.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).KeysOrderedInEachPartition
  nameWithType: OrderablePartitioner<TSource>.KeysOrderedInEachPartition
  nameWithType.vb: OrderablePartitioner(Of TSource).KeysOrderedInEachPartition
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  id: GetDynamicPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetDynamicPartitions()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDynamicPartitions
    path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 209
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Creates an object that can partition the underlying collection into a variable number of partitions.</p>\n"
  syntax:
    content: public override IEnumerable<TSource> GetDynamicPartitions()
    content.vb: Public Overrides Function GetDynamicPartitions As IEnumerable(Of TSource)
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An object that can create partitions over the underlying data source.</p>\n"
  overridden: System.Collections.Concurrent.Partitioner{{TSource}}.GetDynamicPartitions
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetDynamicPartitions()
  nameWithType: OrderablePartitioner<TSource>.GetDynamicPartitions()
  nameWithType.vb: OrderablePartitioner(Of TSource).GetDynamicPartitions()
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  id: GetOrderableDynamicPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetOrderableDynamicPartitions
    path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 129
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Creates an object that can partition the underlying collection into a variable number of partitions.</p>\n"
  syntax:
    content: public virtual IEnumerable<KeyValuePair<long, TSource>> GetOrderableDynamicPartitions()
    content.vb: Public Overridable Function GetOrderableDynamicPartitions As IEnumerable(Of KeyValuePair(Of Long, TSource))
    return:
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,{TSource}}}
      description: "\n<p>An object that can create partitions over the underlying data source.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Dynamic partitioning is not supported by this partitioner.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetOrderableDynamicPartitions()
  nameWithType: OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()
  nameWithType.vb: OrderablePartitioner(Of TSource).GetOrderableDynamicPartitions()
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  id: GetOrderablePartitions(System.Int32)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetOrderablePartitions(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetOrderablePartitions
    path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 102
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Partitions the underlying collection into the specified number of orderable partitions.</p>\n"
  syntax:
    content: public abstract IList<IEnumerator<KeyValuePair<long, TSource>>> GetOrderablePartitions(int partitionCount)
    content.vb: Public MustOverride Function GetOrderablePartitions(partitionCount As Integer) As IList(Of IEnumerator(Of KeyValuePair(Of Long, TSource)))
    parameters:
    - id: partitionCount
      type: System.Int32
      description: "\n<p>The number of partitions to create.</p>\n"
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,{TSource}}}}
      description: "\n<p>A list containing <em>partitionCount</em> enumerators.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetOrderablePartitions(System.Int32)
  nameWithType: OrderablePartitioner<TSource>.GetOrderablePartitions(Int32)
  nameWithType.vb: OrderablePartitioner(Of TSource).GetOrderablePartitions(Int32)
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  id: GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetPartitions(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPartitions
    path: src/mscorlib/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 168
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Partitions the underlying collection into the given number of ordered partitions.</p>\n"
  syntax:
    content: public override IList<IEnumerator<TSource>> GetPartitions(int partitionCount)
    content.vb: Public Overrides Function GetPartitions(partitionCount As Integer) As IList(Of IEnumerator(Of TSource))
    parameters:
    - id: partitionCount
      type: System.Int32
      description: "\n<p>The number of partitions to create.</p>\n"
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}
      description: "\n<p>A list containing <em>partitionCount</em> enumerators.</p>\n"
  overridden: System.Collections.Concurrent.Partitioner{{TSource}}.GetPartitions(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetPartitions(System.Int32)
  nameWithType: OrderablePartitioner<TSource>.GetPartitions(Int32)
  nameWithType.vb: OrderablePartitioner(Of TSource).GetPartitions(Int32)
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Collections.Concurrent.Partitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.Partitioner`1
  name: "XXX"
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TSource
  - name: "XXX"
    fullName: )
  nameWithType: Partitioner<TSource>
  nameWithType.vb: Partitioner(Of TSource)
  commentId: T:System.Collections.Concurrent.Partitioner{``0}
- uid: System.Collections.Concurrent.Partitioner{{TSource}}.SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner{{TSource}}
  definition: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  name: "XXX"
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
  nameWithType.vb: Partitioner(Of TSource).SupportsDynamicPartitions
  commentId: P:System.Collections.Concurrent.Partitioner{`0}.SupportsDynamicPartitions
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TSource
  - name: "XXX"
    fullName: )
  nameWithType: Partitioner<TSource>
  nameWithType.vb: Partitioner(Of TSource)
  commentId: T:System.Collections.Concurrent.Partitioner`1
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
  nameWithType.vb: Partitioner(Of TSource).SupportsDynamicPartitions
  commentId: P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Collections.Concurrent.Partitioner{{TSource}}.GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner{{TSource}}
  definition: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  name: "XXX"
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions()
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Partitioner<TSource>.GetDynamicPartitions()
  nameWithType.vb: Partitioner(Of TSource).GetDynamicPartitions()
  commentId: M:System.Collections.Concurrent.Partitioner{`0}.GetDynamicPartitions
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TSource
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
  commentId: T:System.Collections.Generic.IEnumerable{``0}
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions()
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Partitioner<TSource>.GetDynamicPartitions()
  nameWithType.vb: Partitioner(Of TSource).GetDynamicPartitions()
  commentId: M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections.Generic
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,{TSource}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Int64, TSource>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Int64, TSource))
  name.vb: IEnumerable(Of KeyValuePair(Of Int64, TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: "XXX"
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Int64
    name: "XXX"
    fullName: System.Int64
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: "XXX"
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Int64
    name: "XXX"
    fullName: System.Int64
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TSource
  - name: "XXX"
    fullName: )
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable<KeyValuePair<Int64, TSource>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of Int64, TSource))
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,`0}}
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,{TSource}}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: "XXX"
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Int64, TSource>>>
  fullname.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.Int64, TSource)))
  name.vb: IList(Of IEnumerator(Of KeyValuePair(Of Int64, TSource)))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: "XXX"
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Int64
    name: "XXX"
    fullName: System.Int64
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerator`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: "XXX"
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Int64
    name: "XXX"
    fullName: System.Int64
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TSource
  - name: "XXX"
    fullName: )
  - name: "XXX"
    fullName: )
  - name: "XXX"
    fullName: )
  nameWithType: IList<IEnumerator<KeyValuePair<Int64, TSource>>>
  nameWithType.vb: IList(Of IEnumerator(Of KeyValuePair(Of Int64, TSource)))
  commentId: T:System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,`0}}}
- uid: System.Collections.Generic.IList`1
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: IList<T>
  nameWithType.vb: IList(Of T)
  commentId: T:System.Collections.Generic.IList`1
- uid: System.Collections.Concurrent.Partitioner{{TSource}}.GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner{{TSource}}
  definition: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  name: "XXX"
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(System.Int32)
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions(System.Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Partitioner<TSource>.GetPartitions(Int32)
  nameWithType.vb: Partitioner(Of TSource).GetPartitions(Int32)
  commentId: M:System.Collections.Concurrent.Partitioner{`0}.GetPartitions(System.Int32)
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: "XXX"
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>
  fullname.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerator(Of TSource))
  name.vb: IList(Of IEnumerator(Of TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: "XXX"
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerator`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TSource
  - name: "XXX"
    fullName: )
  - name: "XXX"
    fullName: )
  nameWithType: IList<IEnumerator<TSource>>
  nameWithType.vb: IList(Of IEnumerator(Of TSource))
  commentId: T:System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{`0}}
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  isExternal: true
  name: "XXX"
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(System.Int32)
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions(System.Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: "XXX"
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Partitioner<TSource>.GetPartitions(Int32)
  nameWithType.vb: Partitioner(Of TSource).GetPartitions(Int32)
  commentId: M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException

items:
- uid: System.IO.TextReader
  commentId: T:System.IO.TextReader
  id: TextReader
  parent: System.IO
  children:
  - System.IO.TextReader.#ctor
  - System.IO.TextReader.Dispose
  - System.IO.TextReader.Dispose(System.Boolean)
  - System.IO.TextReader.Null
  - System.IO.TextReader.Peek
  - System.IO.TextReader.Read
  - System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadLine
  - System.IO.TextReader.ReadLineAsync
  - System.IO.TextReader.ReadToEnd
  - System.IO.TextReader.ReadToEndAsync
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TextReader
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 35
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Represents a reader that can read a sequential series of characters.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public abstract class TextReader : IDisposable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public MustInherit Class TextReader
          Implements IDisposable
  seealso:
  - type: System.IO.StringReader
    commentId: T:System.IO.StringReader
  - type: System.IO.StreamReader
    commentId: T:System.IO.StreamReader
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: TextReader
- uid: System.IO.TextReader.Null
  commentId: F:System.IO.TextReader.Null
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  fullName: System.IO.TextReader.Null
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 43
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Provides a <strong>TextReader</strong> with no data to read from.</p>\n"
  syntax:
    content: public static readonly TextReader Null
    content.vb: Public Shared ReadOnly Null As TextReader
    return:
      type: System.IO.TextReader
  seealso:
  - type: System.IO.StringReader
    commentId: T:System.IO.StringReader
  - type: System.IO.StreamReader
    commentId: T:System.IO.StreamReader
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: TextReader.Null
- uid: System.IO.TextReader.#ctor
  commentId: M:System.IO.TextReader.#ctor
  id: '#ctor'
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.TextReader()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 45
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected TextReader()
    content.vb: Protected Sub New
  seealso:
  - type: System.IO.StringReader
    commentId: T:System.IO.StringReader
  - type: System.IO.StreamReader
    commentId: T:System.IO.StreamReader
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: TextReader.TextReader()
- uid: System.IO.TextReader.Dispose
  commentId: M:System.IO.TextReader.Dispose
  id: Dispose
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 59
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases all resources used by the <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TextReader.Dispose()
- uid: System.IO.TextReader.Dispose(System.Boolean)
  commentId: M:System.IO.TextReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 65
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: TextReader.Dispose(Boolean)
- uid: System.IO.TextReader.Peek
  commentId: M:System.IO.TextReader.Peek
  id: Peek
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.Peek()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Peek
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 76
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the reader.</p>\n"
  syntax:
    content: public virtual int Peek()
    content.vb: Public Overridable Function Peek As Integer
    return:
      type: System.Int32
      description: "\n<p>An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamReader.Peek
    commentId: M:System.IO.StreamReader.Peek
  - type: System.IO.StringReader.Peek
    commentId: M:System.IO.StringReader.Peek
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TextReader.Peek()
- uid: System.IO.TextReader.Read
  commentId: M:System.IO.TextReader.Read
  id: Read
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.Read()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 89
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the next character from the text reader and advances the character position by one character.</p>\n"
  syntax:
    content: public virtual int Read()
    content.vb: Public Overridable Function Read As Integer
    return:
      type: System.Int32
      description: "\n<p>The next character from the text reader, or -1 if no more characters are available. The default implementation returns -1.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamReader.Read
    commentId: M:System.IO.StreamReader.Read
  - type: System.IO.StringReader.Read
    commentId: M:System.IO.StringReader.Read
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TextReader.Read()
- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 100
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.</p>\n"
  syntax:
    content: public virtual int Read([In, Out] char[] buffer, int index, int count)
    content.vb: Public Overridable Function Read(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source. </p>\n"
      attributes:
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
      - type: System.Runtime.InteropServices.OutAttribute
        ctor: System.Runtime.InteropServices.OutAttribute.#ctor
        arguments: []
    - id: index
      type: System.Int32
      description: "\n<p>The position in <em>buffer</em> at which to begin writing. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to read. If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters that have been read. The number will be less than or equal to <em>count</em>, depending on whether the data is available within the reader. This method returns 0 (zero) if it is called when no more characters are left to read.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)
  - type: System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextReader.Read(System.Char(), System.Int32, System.Int32)
  name.vb: Read(Char(), Int32, Int32)
  nameWithType: TextReader.Read(Char[], Int32, Int32)
  nameWithType.vb: TextReader.Read(Char(), Int32, Int32)
- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  id: ReadAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadAsync
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 203
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index. </p>\n"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public virtual Task<int> ReadAsync(char[] buffer, int index, int count)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overridable Function ReadAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in <em>buffer</em> at which to begin writing.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text reader has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader is currently in use by a previous read operation. </p>\n"
  seealso:
  - type: System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  - type: System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StringReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextReader.ReadAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadAsync(Char(), Int32, Int32)
  nameWithType: TextReader.ReadAsync(Char[], Int32, Int32)
  nameWithType.vb: TextReader.ReadAsync(Char(), Int32, Int32)
- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  id: ReadBlock(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadBlock
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 142
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.</p>\n"
  syntax:
    content: public virtual int ReadBlock([In, Out] char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadBlock(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>When this method returns, this parameter contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> -1) replaced by the characters read from the current source. </p>\n"
      attributes:
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
      - type: System.Runtime.InteropServices.OutAttribute
        ctor: System.Runtime.InteropServices.OutAttribute.#ctor
        arguments: []
    - id: index
      type: System.Int32
      description: "\n<p>The position in <em>buffer</em> at which to begin writing.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters that have been read. The number will be less than or equal to <em>count</em>, depending on whether all input characters have been read.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  seealso:
  - type: System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextReader.ReadBlock(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlock(Char(), Int32, Int32)
  nameWithType: TextReader.ReadBlock(Char[], Int32, Int32)
  nameWithType.vb: TextReader.ReadBlock(Char(), Int32, Int32)
- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  id: ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadBlockAsync
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 234
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.</p>\n"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public virtual Task<int> ReadBlockAsync(char[] buffer, int index, int count)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overridable Function ReadBlockAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in <em>buffer</em> at which to begin writing.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text reader has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader is currently in use by a previous read operation. </p>\n"
  seealso:
  - type: System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  - type: System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
    commentId: M:System.IO.StringReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.IO.TextReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlockAsync(Char(), Int32, Int32)
  nameWithType: TextReader.ReadBlockAsync(Char[], Int32, Int32)
  nameWithType.vb: TextReader.ReadBlockAsync(Char(), Int32, Int32)
- uid: System.IO.TextReader.ReadLine
  commentId: M:System.IO.TextReader.ReadLine
  id: ReadLine
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.ReadLine()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadLine
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 160
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a line of characters from the text reader and returns the data as a string.</p>\n"
  syntax:
    content: public virtual string ReadLine()
    content.vb: Public Overridable Function ReadLine As String
    return:
      type: System.String
      description: "\n<p>The next line from the reader, or <strong>null</strong> if all characters have been read.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  seealso:
  - type: System.IO.StreamReader.ReadLine
    commentId: M:System.IO.StreamReader.ReadLine
  - type: System.IO.StringReader.ReadLine
    commentId: M:System.IO.StringReader.ReadLine
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TextReader.ReadLine()
- uid: System.IO.TextReader.ReadLineAsync
  commentId: M:System.IO.TextReader.ReadLineAsync
  id: ReadLineAsync
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.ReadLineAsync()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadLineAsync
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 178
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a line of characters asynchronously and returns the data as a string. </p>\n"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public virtual Task<string> ReadLineAsync()
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overridable Function ReadLineAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the next line from the text reader, or is <strong>null</strong> if all of the characters have been read. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text reader has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader is currently in use by a previous read operation. </p>\n"
  seealso:
  - type: System.IO.StreamReader.ReadLineAsync
    commentId: M:System.IO.StreamReader.ReadLineAsync
  - type: System.IO.StringReader.ReadLineAsync
    commentId: M:System.IO.StringReader.ReadLineAsync
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TextReader.ReadLineAsync()
- uid: System.IO.TextReader.ReadToEnd
  commentId: M:System.IO.TextReader.ReadToEnd
  id: ReadToEnd
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.ReadToEnd()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadToEnd
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 125
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads all characters from the current position to the end of the text reader and returns them as one string.</p>\n"
  syntax:
    content: public virtual string ReadToEnd()
    content.vb: Public Overridable Function ReadToEnd As String
    return:
      type: System.String
      description: "\n<p>A string that contains all characters from the current position to the end of the text reader.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  seealso:
  - type: System.IO.StreamReader.ReadToEnd
    commentId: M:System.IO.StreamReader.ReadToEnd
  - type: System.IO.StringReader.ReadToEnd
    commentId: M:System.IO.StringReader.ReadToEnd
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TextReader.ReadToEnd()
- uid: System.IO.TextReader.ReadToEndAsync
  commentId: M:System.IO.TextReader.ReadToEndAsync
  id: ReadToEndAsync
  parent: System.IO.TextReader
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.IO.TextReader.ReadToEndAsync()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadToEndAsync
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 189
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.</p>\n"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public virtual Task<string> ReadToEndAsync()
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overridable Function ReadToEndAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains a string with the characters from the current position to the end of the text reader. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The number of characters is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The text reader has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader is currently in use by a previous read operation. </p>\n"
  seealso:
  - type: System.IO.StreamReader.ReadToEndAsync
    commentId: M:System.IO.StreamReader.ReadToEndAsync
  - type: System.IO.StringReader.ReadToEndAsync
    commentId: M:System.IO.StringReader.ReadToEndAsync
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: TextReader.ReadToEndAsync()
references:
- uid: System.IO
  isExternal: false
  name: "XXX"
  fullName: System.IO
  nameWithType: System.IO
  commentId: N:System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: "XXX"
  fullName: System.IO.TextReader
  nameWithType: TextReader
  commentId: T:System.IO.TextReader
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: "XXX"
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: "XXX"
    fullName: System.IDisposable.Dispose
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: "XXX"
    fullName: System.IDisposable.Dispose
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IDisposable.Dispose()
  commentId: M:System.IDisposable.Dispose
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Char[]
  name: "XXX"
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: "XXX"
    fullName: System.Char
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: "XXX"
    fullName: System.Char
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: Char[]
  nameWithType.vb: Char()
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: "XXX"
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Task<Int32>
  nameWithType.vb: Task(Of Int32)
  commentId: T:System.Threading.Tasks.Task{System.Int32}
- uid: System.Threading.Tasks.Task`1
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Task<TResult>
  nameWithType.vb: Task(Of TResult)
  commentId: T:System.Threading.Tasks.Task`1
- uid: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: "XXX"
  fullName: System.Threading.Tasks.Task<System.String>
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Task<String>
  nameWithType.vb: Task(Of String)
  commentId: T:System.Threading.Tasks.Task{System.String}
- uid: System.ObjectDisposedException
  isExternal: false
  name: "XXX"
  fullName: System.ObjectDisposedException
  nameWithType: ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: "XXX"
  fullName: System.IO.IOException
  nameWithType: IOException
  commentId: T:System.IO.IOException
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: false
  name: "XXX"
  fullName: System.OutOfMemoryException
  nameWithType: OutOfMemoryException
  commentId: T:System.OutOfMemoryException

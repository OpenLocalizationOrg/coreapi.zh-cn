items:
- uid: System.Globalization.CharUnicodeInfo
  commentId: T:System.Globalization.CharUnicodeInfo
  id: CharUnicodeInfo
  parent: System.Globalization
  children:
  - System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  - System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)
  - System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  - System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Globalization.CharUnicodeInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CharUnicodeInfo
    path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs
    startLine: 28
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Retrieves information about a Unicode character. This class cannot be inherited.</p>\n"
  syntax:
    content: public class CharUnicodeInfo
    content.vb: Public Class CharUnicodeInfo
  seealso:
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  - type: System.Text
    commentId: N:System.Text
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: CharUnicodeInfo
- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  commentId: M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  id: GetNumericValue(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetNumericValue
    path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs
    startLine: 321
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the numeric value associated with the specified character.</p>\n"
  syntax:
    content: public static double GetNumericValue(char ch)
    content.vb: Public Shared Function GetNumericValue(ch As Char) As Double
    parameters:
    - id: ch
      type: System.Char
      description: "\n<p>The Unicode character for which to get the numeric value. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The numeric value associated with the specified character.</p>\n<p>-or- </p>\n<p>-1, if the specified character is not a numeric character.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CharUnicodeInfo.GetNumericValue(Char)
- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)
  commentId: M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)
  id: GetNumericValue(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Globalization.CharUnicodeInfo.GetNumericValue(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetNumericValue
    path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs
    startLine: 326
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the numeric value associated with the character at the specified index of the specified string.</p>\n"
  syntax:
    content: public static double GetNumericValue(string s, int index)
    content.vb: Public Shared Function GetNumericValue(s As String, index As Integer) As Double
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the Unicode character for which to get the numeric value. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the Unicode character for which to get the numeric value. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The numeric value associated with the character at the specified index of the specified string.</p>\n<p>-or- </p>\n<p>-1, if the character at the specified index of the specified string is not a numeric character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes in <em>s</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CharUnicodeInfo.GetNumericValue(String, Int32)
- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  commentId: M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  id: GetUnicodeCategory(System.Char)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUnicodeCategory
    path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs
    startLine: 409
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the Unicode category of the specified character.</p>\n"
  syntax:
    content: public static UnicodeCategory GetUnicodeCategory(char ch)
    content.vb: Public Shared Function GetUnicodeCategory(ch As Char) As UnicodeCategory
    parameters:
    - id: ch
      type: System.Char
      description: "\n<p>The Unicode character for which to get the Unicode category. </p>\n"
    return:
      type: System.Globalization.UnicodeCategory
      description: "\n<p>A <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> value indicating the category of the specified character.</p>\n"
  seealso:
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CharUnicodeInfo.GetUnicodeCategory(Char)
- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)
  commentId: M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)
  id: GetUnicodeCategory(System.String,System.Int32)
  parent: System.Globalization.CharUnicodeInfo
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUnicodeCategory
    path: src/mscorlib/src/System/Globalization/CharUnicodeInfo.cs
    startLine: 414
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the Unicode category of the character at the specified index of the specified string.</p>\n"
  syntax:
    content: public static UnicodeCategory GetUnicodeCategory(string s, int index)
    content.vb: Public Shared Function GetUnicodeCategory(s As String, index As Integer) As UnicodeCategory
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the Unicode character for which to get the Unicode category. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the Unicode character for which to get the Unicode category. </p>\n"
    return:
      type: System.Globalization.UnicodeCategory
      description: "\n<p>A <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> value indicating the category of the character at the specified index of the specified string.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes in <em>s</em>. </p>\n"
  seealso:
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: CharUnicodeInfo.GetUnicodeCategory(String, Int32)
references:
- uid: System.Globalization
  isExternal: false
  name: "XXX"
  fullName: System.Globalization
  nameWithType: System.Globalization
  commentId: N:System.Globalization
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Char
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Char
  nameWithType: Char
  commentId: T:System.Char
- uid: System.Double
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Double
  nameWithType: Double
  commentId: T:System.Double
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Globalization.UnicodeCategory
  parent: System.Globalization
  isExternal: false
  name: "XXX"
  fullName: System.Globalization.UnicodeCategory
  nameWithType: UnicodeCategory
  commentId: T:System.Globalization.UnicodeCategory
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException

items:
- uid: System.Collections.IDictionaryEnumerator
  commentId: T:System.Collections.IDictionaryEnumerator
  id: IDictionaryEnumerator
  parent: System.Collections
  children:
  - System.Collections.IDictionaryEnumerator.Entry
  - System.Collections.IDictionaryEnumerator.Key
  - System.Collections.IDictionaryEnumerator.Value
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.IDictionaryEnumerator
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IDictionaryEnumerator
    path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs
    startLine: 46
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Enumerates the elements of a nongeneric dictionary.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public interface IDictionaryEnumerator : IEnumerator
    content.vb: >-
      <ComVisible(True)>

      Public Interface IDictionaryEnumerator
          Inherits IEnumerator
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  inheritedMembers:
  - System.Collections.IEnumerator.Current
  - System.Collections.IEnumerator.MoveNext
  - System.Collections.IEnumerator.Reset
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  nameWithType: IDictionaryEnumerator
- uid: System.Collections.IDictionaryEnumerator.Entry
  commentId: P:System.Collections.IDictionaryEnumerator.Entry
  id: Entry
  parent: System.Collections.IDictionaryEnumerator
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.IDictionaryEnumerator.Entry
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Entry
    path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs
    startLine: 74
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets both the key and the value of the current dictionary entry.</p>\n"
  syntax:
    content: DictionaryEntry Entry { get; }
    content.vb: ReadOnly Property Entry As DictionaryEntry
    parameters: []
    return:
      type: System.Collections.DictionaryEntry
      description: "\n<p>A <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> containing both the key and the value of the current dictionary entry.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> is positioned before the first entry of the dictionary or after the last entry. </p>\n"
  seealso:
  - type: System.Collections.IEnumerator.Reset
    commentId: M:System.Collections.IEnumerator.Reset
  - type: System.Collections.IEnumerator.MoveNext
    commentId: M:System.Collections.IEnumerator.MoveNext
  - type: System.Collections.IDictionaryEnumerator.Key
    commentId: P:System.Collections.IDictionaryEnumerator.Key
  - type: System.Collections.IDictionaryEnumerator.Value
    commentId: P:System.Collections.IDictionaryEnumerator.Value
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  nameWithType: IDictionaryEnumerator.Entry
- uid: System.Collections.IDictionaryEnumerator.Key
  commentId: P:System.Collections.IDictionaryEnumerator.Key
  id: Key
  parent: System.Collections.IDictionaryEnumerator
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.IDictionaryEnumerator.Key
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Key
    path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs
    startLine: 55
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets the key of the current dictionary entry.</p>\n"
  syntax:
    content: object Key { get; }
    content.vb: ReadOnly Property Key As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The key of the current element of the enumeration.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> is positioned before the first entry of the dictionary or after the last entry. </p>\n"
  seealso:
  - type: System.Collections.IEnumerator.Reset
    commentId: M:System.Collections.IEnumerator.Reset
  - type: System.Collections.IEnumerator.MoveNext
    commentId: M:System.Collections.IEnumerator.MoveNext
  - type: System.Collections.IDictionaryEnumerator.Value
    commentId: P:System.Collections.IDictionaryEnumerator.Value
  - type: System.Collections.IDictionaryEnumerator.Entry
    commentId: P:System.Collections.IDictionaryEnumerator.Entry
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  nameWithType: IDictionaryEnumerator.Key
- uid: System.Collections.IDictionaryEnumerator.Value
  commentId: P:System.Collections.IDictionaryEnumerator.Value
  id: Value
  parent: System.Collections.IDictionaryEnumerator
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Collections.IDictionaryEnumerator.Value
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs
    startLine: 65
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets the value of the current dictionary entry.</p>\n"
  syntax:
    content: object Value { get; }
    content.vb: ReadOnly Property Value As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The value of the current element of the enumeration.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> is positioned before the first entry of the dictionary or after the last entry. </p>\n"
  seealso:
  - type: System.Collections.IEnumerator.Reset
    commentId: M:System.Collections.IEnumerator.Reset
  - type: System.Collections.IEnumerator.MoveNext
    commentId: M:System.Collections.IEnumerator.MoveNext
  - type: System.Collections.IDictionaryEnumerator.Key
    commentId: P:System.Collections.IDictionaryEnumerator.Key
  - type: System.Collections.IDictionaryEnumerator.Entry
    commentId: P:System.Collections.IDictionaryEnumerator.Entry
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  nameWithType: IDictionaryEnumerator.Value
references:
- uid: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections
  nameWithType: System.Collections
  commentId: N:System.Collections
- uid: System.Collections.IEnumerator.Current
  parent: System.Collections.IEnumerator
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerator.Current
  nameWithType: IEnumerator.Current
  commentId: P:System.Collections.IEnumerator.Current
- uid: System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: "XXX"
    fullName: System.Collections.IEnumerator.MoveNext
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: "XXX"
    fullName: System.Collections.IEnumerator.MoveNext
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerator.MoveNext()
  commentId: M:System.Collections.IEnumerator.MoveNext
- uid: System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: "XXX"
    fullName: System.Collections.IEnumerator.Reset
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: "XXX"
    fullName: System.Collections.IEnumerator.Reset
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerator.Reset()
  commentId: M:System.Collections.IEnumerator.Reset
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerator
  nameWithType: IEnumerator
  commentId: T:System.Collections.IEnumerator
- uid: System.Collections.DictionaryEntry
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.DictionaryEntry
  nameWithType: DictionaryEntry
  commentId: T:System.Collections.DictionaryEntry
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException

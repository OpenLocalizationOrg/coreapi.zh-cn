items:
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs
  commentId: T:System.Diagnostics.Contracts.ContractFailedEventArgs
  id: ContractFailedEventArgs
  parent: System.Diagnostics.Contracts
  children:
  - System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)
  - System.Diagnostics.Contracts.ContractFailedEventArgs.Condition
  - System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind
  - System.Diagnostics.Contracts.ContractFailedEventArgs.Handled
  - System.Diagnostics.Contracts.ContractFailedEventArgs.Message
  - System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException
  - System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled
  - System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind
  - System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContractFailedEventArgs
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 144
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Provides methods and data for the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: 'public sealed class ContractFailedEventArgs : EventArgs'
    content.vb: >-
      Public NotInheritable Class ContractFailedEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: ContractFailedEventArgs
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)
  commentId: M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)
  id: '#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)'
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.ContractFailedEventArgs(System.Diagnostics.Contracts.ContractFailureKind, System.String, System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 156
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Provides data for the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public ContractFailedEventArgs(ContractFailureKind failureKind, string message, string condition, Exception originalException)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Sub New(failureKind As ContractFailureKind, message As String, condition As String, originalException As Exception)
    parameters:
    - id: failureKind
      type: System.Diagnostics.Contracts.ContractFailureKind
      description: "\n<p>One of the enumeration values that specifies the contract that failed.</p>\n"
    - id: message
      type: System.String
      description: "\n<p>The message for the event.</p>\n"
    - id: condition
      type: System.String
      description: "\n<p>The condition for the event.</p>\n"
    - id: originalException
      type: System.Exception
      description: "\n<p>The exception that caused the event.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ContractFailedEventArgs.ContractFailedEventArgs(ContractFailureKind, String, String, Exception)
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Condition
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition
  id: Condition
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.Condition
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Condition
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 168
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the condition for the failure of the contract.</p>\n"
  syntax:
    content: public string Condition { get; }
    content.vb: Public ReadOnly Property Condition As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The condition for the failure.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ContractFailedEventArgs.Condition
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind
  id: FailureKind
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FailureKind
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 169
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the type of contract that failed.</p>\n"
  syntax:
    content: public ContractFailureKind FailureKind { get; }
    content.vb: Public ReadOnly Property FailureKind As ContractFailureKind
    parameters: []
    return:
      type: System.Diagnostics.Contracts.ContractFailureKind
      description: "\n<p>One of the enumeration values that specifies the type of contract that failed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ContractFailedEventArgs.FailureKind
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Handled
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled
  id: Handled
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.Handled
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Handled
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 173
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Indicates whether the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event has been handled.</p>\n"
  syntax:
    content: public bool Handled { get; }
    content.vb: Public ReadOnly Property Handled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the event has been handled; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ContractFailedEventArgs.Handled
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Message
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message
  id: Message
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.Message
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Message
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 167
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the message that describes the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: public string Message { get; }
    content.vb: Public ReadOnly Property Message As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The message that describes the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ContractFailedEventArgs.Message
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException
  id: OriginalException
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OriginalException
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 170
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Gets the original exception that caused the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: public Exception OriginalException { get; }
    content.vb: Public ReadOnly Property OriginalException As Exception
    parameters: []
    return:
      type: System.Exception
      description: "\n<p>The exception that caused the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ContractFailedEventArgs.OriginalException
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind
  commentId: P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind
  id: Unwind
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Unwind
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 188
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Indicates whether the code contract escalation policy should be applied.</p>\n"
  syntax:
    content: public bool Unwind { get; }
    content.vb: Public ReadOnly Property Unwind As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to apply the escalation policy; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ContractFailedEventArgs.Unwind
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled
  commentId: M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled
  id: SetHandled
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetHandled
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 178
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Sets the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Handled\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong>.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public void SetHandled()
    content.vb: >-
      <SecurityCritical>

      Public Sub SetHandled
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ContractFailedEventArgs.SetHandled()
- uid: System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind
  commentId: M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind
  id: SetUnwind
  parent: System.Diagnostics.Contracts.ContractFailedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetUnwind
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 193
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Sets the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong>.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public void SetUnwind()
    content.vb: >-
      <SecurityCritical>

      Public Sub SetUnwind
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ContractFailedEventArgs.SetUnwind()
references:
- uid: System.Diagnostics.Contracts
  isExternal: false
  name: "XXX"
  fullName: System.Diagnostics.Contracts
  nameWithType: System.Diagnostics.Contracts
  commentId: N:System.Diagnostics.Contracts
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.EventArgs
  nameWithType: EventArgs
  commentId: T:System.EventArgs
- uid: System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: "XXX"
  fullName: System.EventArgs.Empty
  nameWithType: EventArgs.Empty
  commentId: F:System.EventArgs.Empty
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Diagnostics.Contracts.ContractFailureKind
  parent: System.Diagnostics.Contracts
  isExternal: false
  name: "XXX"
  fullName: System.Diagnostics.Contracts.ContractFailureKind
  nameWithType: ContractFailureKind
  commentId: T:System.Diagnostics.Contracts.ContractFailureKind
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Exception
  nameWithType: Exception
  commentId: T:System.Exception
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean

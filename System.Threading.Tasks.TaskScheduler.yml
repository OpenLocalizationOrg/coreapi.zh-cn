items:
- uid: System.Threading.Tasks.TaskScheduler
  commentId: T:System.Threading.Tasks.TaskScheduler
  id: TaskScheduler
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskScheduler.#ctor
  - System.Threading.Tasks.TaskScheduler.Current
  - System.Threading.Tasks.TaskScheduler.Default
  - System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext
  - System.Threading.Tasks.TaskScheduler.GetScheduledTasks
  - System.Threading.Tasks.TaskScheduler.Id
  - System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel
  - System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)
  - System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)
  - System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
  - System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)
  - System.Threading.Tasks.TaskScheduler.UnobservedTaskException
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TaskScheduler
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 41
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Represents an object that handles the low-level work of queuing tasks onto threads.</p>\n"
  syntax:
    content: >-
      [DebuggerDisplay("Id={Id}")]

      [DebuggerTypeProxy(typeof (TaskScheduler.SystemThreadingTasks_TaskSchedulerDebugView))]

      [HostProtection(Synchronization = true, ExternalThreading = true)]

      [PermissionSet(SecurityAction.InheritanceDemand, Unrestricted = true)]

      public abstract class TaskScheduler
    content.vb: >-
      <DebuggerDisplay("Id={Id}")>

      <DebuggerTypeProxy(GetType(TaskScheduler.SystemThreadingTasks_TaskSchedulerDebugView))>

      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      <PermissionSet(SecurityAction.InheritanceDemand, Unrestricted:=True)>

      Public MustInherit Class TaskScheduler
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: TaskScheduler
- uid: System.Threading.Tasks.TaskScheduler.#ctor
  commentId: M:System.Threading.Tasks.TaskScheduler.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.TaskScheduler()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 302
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected TaskScheduler()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: TaskScheduler.TaskScheduler()
- uid: System.Threading.Tasks.TaskScheduler.Current
  commentId: P:System.Threading.Tasks.TaskScheduler.Current
  id: Current
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.Current
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Current
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 344
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> associated with the currently executing task.</p>\n"
  syntax:
    content: public static TaskScheduler Current { get; }
    content.vb: Public Shared ReadOnly Property Current As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>Returns the <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> associated with the currently executing task.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: TaskScheduler.Current
- uid: System.Threading.Tasks.TaskScheduler.Default
  commentId: P:System.Threading.Tasks.TaskScheduler.Default
  id: Default
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.Default
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Default
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 329
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> instance that is provided by the .NET Framework.</p>\n"
  syntax:
    content: public static TaskScheduler Default { get; }
    content.vb: Public Shared ReadOnly Property Default As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>Returns the default <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: TaskScheduler.Default
- uid: System.Threading.Tasks.TaskScheduler.Id
  commentId: P:System.Threading.Tasks.TaskScheduler.Id
  id: Id
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.Id
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Id
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 397
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the unique ID for this <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Returns the unique ID for this <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: TaskScheduler.Id
- uid: System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel
  commentId: P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel
  id: MaximumConcurrencyLevel
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MaximumConcurrencyLevel
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 166
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Indicates the maximum concurrency level this <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> is able to support.</p>\n"
  syntax:
    content: public virtual int MaximumConcurrencyLevel { get; }
    content.vb: Public Overridable ReadOnly Property MaximumConcurrencyLevel As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Returns an integer that represents the maximum concurrency level. The default scheduler returns <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: TaskScheduler.MaximumConcurrencyLevel
- uid: System.Threading.Tasks.TaskScheduler.UnobservedTaskException
  commentId: E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException
  id: UnobservedTaskException
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.UnobservedTaskException
  type: Event
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UnobservedTaskException
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 475
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Occurs when a faulted task's unobserved exception is about to trigger exception escalation policy, which, by default, would terminate the process.</p>\n"
  syntax:
    content: public static event EventHandler<UnobservedTaskExceptionEventArgs> UnobservedTaskException
    content.vb: Public Shared Event UnobservedTaskException As EventHandler(Of UnobservedTaskExceptionEventArgs)
    return:
      type: System.EventHandler{System.Threading.Tasks.UnobservedTaskExceptionEventArgs}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: TaskScheduler.UnobservedTaskException
- uid: System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext
  commentId: M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext
  id: FromCurrentSynchronizationContext
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromCurrentSynchronizationContext
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 389
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> associated with the current <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static TaskScheduler FromCurrentSynchronizationContext()
    content.vb: Public Shared Function FromCurrentSynchronizationContext As TaskScheduler
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>A <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> associated with the current <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref>, as determined by <xref href=\"System.Threading.SynchronizationContext.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current SynchronizationContext may not be used as a TaskScheduler.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: TaskScheduler.FromCurrentSynchronizationContext()
- uid: System.Threading.Tasks.TaskScheduler.GetScheduledTasks
  commentId: M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks
  id: GetScheduledTasks
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.GetScheduledTasks()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetScheduledTasks
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 159
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>For debugger support only, generates an enumerable of <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> instances currently queued to the scheduler waiting to be executed.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      protected abstract IEnumerable<Task> GetScheduledTasks()
    content.vb: >-
      <SecurityCritical>

      Protected MustOverride Function GetScheduledTasks As IEnumerable(Of Task)
    return:
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: "\n<p>An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This scheduler is unable to generate a list of queued tasks at this time.</p>\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  nameWithType: TaskScheduler.GetScheduledTasks()
- uid: System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)
  commentId: M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)
  id: QueueTask(System.Threading.Tasks.Task)
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: QueueTask
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 72
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Queues a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to the scheduler. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      protected abstract void QueueTask(Task task)
    content.vb: >-
      <SecurityCritical>

      Protected MustOverride Sub QueueTask(task As Task)
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to be queued.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>task</em> argument is null.</p>\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  nameWithType: TaskScheduler.QueueTask(Task)
- uid: System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)
  commentId: M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)
  id: TryDequeue(System.Threading.Tasks.Task)
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryDequeue
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 239
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Attempts to dequeue a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that was previously queued to this scheduler.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      protected virtual bool TryDequeue(Task task)
    content.vb: >-
      <SecurityCritical>

      Protected Overridable Function TryDequeue(task As Task) As Boolean
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to be dequeued.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>A Boolean denoting whether the <em>task</em> argument was successfully dequeued.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>task</em> argument is null.</p>\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: TaskScheduler.TryDequeue(Task)
- uid: System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
  commentId: M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
  id: TryExecuteTask(System.Threading.Tasks.Task)
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryExecuteTask
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 446
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Attempts to execute the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> on this scheduler.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      protected bool TryExecuteTask(Task task)
    content.vb: >-
      <SecurityCritical>

      Protected Function TryExecuteTask(task As Task) As Boolean
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> object to be executed.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>A Boolean that is true if <em>task</em> was successfully executed, false if it was not. A common reason for execution failure is that the task had previously been executed or is in the process of being executed by another thread.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>task</em> is not associated with this scheduler.</p>\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: TaskScheduler.TryExecuteTask(Task)
- uid: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)
  commentId: M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)
  id: TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)
  parent: System.Threading.Tasks.TaskScheduler
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryExecuteTaskInline
    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs
    startLine: 115
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Determines whether the provided <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> can be executed synchronously in this call, and if it can, executes it.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      protected abstract bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued)
    content.vb: >-
      <SecurityCritical>

      Protected MustOverride Function TryExecuteTaskInline(task As Task, taskWasPreviouslyQueued As Boolean) As Boolean
    parameters:
    - id: task
      type: System.Threading.Tasks.Task
      description: "\n<p>The <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> to be executed.</p>\n"
    - id: taskWasPreviouslyQueued
      type: System.Boolean
      description: "\n<p>A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>A Boolean value indicating whether the task was executed inline.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>task</em> argument is null.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>task</em> was already executed.</p>\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  nameWithType: TaskScheduler.TryExecuteTaskInline(Task, Boolean)
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler
  nameWithType: TaskScheduler
  commentId: T:System.Threading.Tasks.TaskScheduler
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.EventHandler{System.Threading.Tasks.UnobservedTaskExceptionEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: "XXX"
  fullName: System.EventHandler<System.Threading.Tasks.UnobservedTaskExceptionEventArgs>
  fullname.vb: System.EventHandler(Of System.Threading.Tasks.UnobservedTaskExceptionEventArgs)
  name.vb: EventHandler(Of UnobservedTaskExceptionEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: "XXX"
    fullName: System.EventHandler
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
    name: "XXX"
    fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: "XXX"
    fullName: System.EventHandler
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
    name: "XXX"
    fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs
  - name: "XXX"
    fullName: )
  nameWithType: EventHandler<UnobservedTaskExceptionEventArgs>
  nameWithType.vb: EventHandler(Of UnobservedTaskExceptionEventArgs)
  commentId: T:System.EventHandler{System.Threading.Tasks.UnobservedTaskExceptionEventArgs}
- uid: System.EventHandler`1
  isExternal: false
  name: "XXX"
  fullName: System.EventHandler<TEventArgs>
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: "XXX"
    fullName: System.EventHandler
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TEventArgs
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: "XXX"
    fullName: System.EventHandler
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TEventArgs
  - name: "XXX"
    fullName: )
  nameWithType: EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  commentId: T:System.EventHandler`1
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task)
  name.vb: IEnumerable(Of Task)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable<Task>
  nameWithType.vb: IEnumerable(Of Task)
  commentId: T:System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections.Generic
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.Task
  nameWithType: Task
  commentId: T:System.Threading.Tasks.Task
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException

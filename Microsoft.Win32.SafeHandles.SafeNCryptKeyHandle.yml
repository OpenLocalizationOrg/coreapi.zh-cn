items:
- uid: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
  id: SafeNCryptKeyHandle
  parent: Microsoft.Win32.SafeHandles
  children:
  - Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor
  - Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.ReleaseNativeHandle
  langs:
  - csharp
  - vb
  name: SafeNCryptKeyHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SafeNCryptKeyHandle
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 17
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: Microsoft.Win32.SafeHandles
  summary: "$x$x$Xxxxxxxx x xxxx xxxxxx xxxx xxxxxxxxxx x xxx $XXXXXX$XXX$XXXXXX$.$$x$$x"
  syntax:
    content: 'public sealed class SafeNCryptKeyHandle : SafeNCryptHandle, IDisposable'
    content.vb: >-
      Public NotInheritable Class SafeNCryptKeyHandle
          Inherits SafeNCryptHandle
          Implements IDisposable
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  - System.Runtime.InteropServices.SafeHandle
  - Microsoft.Win32.SafeHandles.SafeNCryptHandle
  implements:
  - System.IDisposable
  inheritedMembers:
  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid
  - Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.Close
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: SafeNCryptKeyHandle
- uid: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor
  commentId: M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor
  id: '#ctor'
  parent: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
  langs:
  - csharp
  - vb
  name: SafeNCryptKeyHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.SafeNCryptKeyHandle()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 19
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: Microsoft.Win32.SafeHandles
  summary: "\n<p>Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public SafeNCryptKeyHandle()
    content.vb: Public Sub New
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: SafeNCryptKeyHandle.SafeNCryptKeyHandle()
- uid: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.ReleaseNativeHandle
  commentId: M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.ReleaseNativeHandle
  id: ReleaseNativeHandle
  parent: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle
  langs:
  - csharp
  - vb
  name: ReleaseNativeHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.ReleaseNativeHandle()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReleaseNativeHandle
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 20
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: protected override bool ReleaseNativeHandle()
    content.vb: Protected Overrides Function ReleaseNativeHandle As Boolean
    return:
      type: System.Boolean
  overridden: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  nameWithType: SafeNCryptKeyHandle.ReleaseNativeHandle()
references:
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
  commentId: N:Microsoft.Win32.SafeHandles
  nameWithType: Microsoft.Win32.SafeHandles
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  parent: System.Runtime.ConstrainedExecution
  isExternal: true
  name: CriticalFinalizerObject
  fullName: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  commentId: T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  nameWithType: CriticalFinalizerObject
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
  commentId: T:System.Runtime.InteropServices.SafeHandle
  nameWithType: SafeHandle
- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeNCryptHandle
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeNCryptHandle
  nameWithType: SafeNCryptHandle
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  commentId: T:System.IDisposable
  nameWithType: IDisposable
- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle
  isExternal: false
  name: IsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid
  commentId: P:Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid
  nameWithType: SafeNCryptHandle.IsInvalid
- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle
  isExternal: false
  name: ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle()
  spec.csharp:
  - uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle
    name: ReleaseHandle
    fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle
    name: ReleaseHandle
    fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle
  nameWithType: SafeNCryptHandle.ReleaseHandle()
- uid: System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: handle
  fullName: System.Runtime.InteropServices.SafeHandle.handle
  commentId: F:System.Runtime.InteropServices.SafeHandle.handle
  nameWithType: SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: SetHandle(IntPtr)
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
  - name: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
  - name: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousGetHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  nameWithType: SafeHandle.DangerousGetHandle()
- uid: System.Runtime.InteropServices.SafeHandle.Close
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Close()
  fullName: System.Runtime.InteropServices.SafeHandle.Close()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Close
    name: Close
    fullName: System.Runtime.InteropServices.SafeHandle.Close
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Close
    name: Close
    fullName: System.Runtime.InteropServices.SafeHandle.Close
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Runtime.InteropServices.SafeHandle.Close
  nameWithType: SafeHandle.Close()
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose()
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose
  nameWithType: SafeHandle.Dispose()
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandleAsInvalid()
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  nameWithType: SafeHandle.SetHandleAsInvalid()
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousAddRef(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousRelease()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousRelease
  nameWithType: SafeHandle.DangerousRelease()
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsClosed
  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsClosed
  nameWithType: SafeHandle.IsClosed
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Runtime.ConstrainedExecution
  isExternal: false
  name: System.Runtime.ConstrainedExecution
  fullName: System.Runtime.ConstrainedExecution
  commentId: N:System.Runtime.ConstrainedExecution
  nameWithType: System.Runtime.ConstrainedExecution
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
- uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle
  parent: Microsoft.Win32.SafeHandles.SafeNCryptHandle
  isExternal: false
  name: ReleaseNativeHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle()
  spec.csharp:
  - uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle
    name: ReleaseNativeHandle
    fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle
    name: ReleaseNativeHandle
    fullName: Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle
  nameWithType: SafeNCryptHandle.ReleaseNativeHandle()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean

items:
- uid: System.Threading.Tasks.TaskFactory`1
  commentId: T:System.Threading.Tasks.TaskFactory`1
  id: TaskFactory`1
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskFactory`1.#ctor
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.CancellationToken
  - System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.CreationOptions
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.Scheduler
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TaskFactory
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 40
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Provides support for creating and scheduling <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public class TaskFactory<TResult>
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public Class TaskFactory(Of TResult)
    typeParameters:
    - id: TResult
      description: "\n<p>The return value of the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> objects that the methods of this class create. </p>\n"
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult)
  name.vb: TaskFactory(Of TResult)
  nameWithType: TaskFactory<TResult>
  nameWithType.vb: TaskFactory(Of TResult)
- uid: System.Threading.Tasks.TaskFactory`1.#ctor
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 88
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the default configuration.</p>\n"
  syntax:
    content: public TaskFactory()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory()
  nameWithType: TaskFactory<TResult>.TaskFactory()
  nameWithType.vb: TaskFactory(Of TResult).TaskFactory()
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 109
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the default configuration.</p>\n"
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken)
    content.vb: Public Sub New(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The default cancellation token that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> unless another cancellation token is explicitly specified when calling the factory methods.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.CancellationToken)
  nameWithType: TaskFactory<TResult>.TaskFactory(CancellationToken)
  nameWithType.vb: TaskFactory(Of TResult).TaskFactory(CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 204
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Sub New(cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The default cancellation token that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> unless another cancellation token is explicitly specified when calling the factory methods.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The default options to use when creating tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The default options to use when creating continuation tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The default scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>. A null value indicates that <xref href=\"System.Threading.Tasks.TaskScheduler.Current\" data-throw-if-not-resolved=\"false\"></xref> should be used.</p>\n<p></p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>creationOptions</em> or <em>continuationOptions</em> specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  nameWithType: TaskFactory<TResult>.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  nameWithType.vb: TaskFactory(Of TResult).TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 164
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  syntax:
    content: public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions)
    content.vb: Public Sub New(creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The default options to use when creating tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The default options to use when creating continuation tasks with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>creationOptions</em> or <em>continuationOptions</em> specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  nameWithType.vb: TaskFactory(Of TResult).TaskFactory(TaskCreationOptions, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 133
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  syntax:
    content: public TaskFactory(TaskScheduler scheduler)
    content.vb: Public Sub New(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The scheduler to use to schedule any tasks created with this <xref href=\"System.Threading.Tasks.TaskFactory`1\" data-throw-if-not-resolved=\"false\"></xref>. A null value indicates that the current <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> should be used.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.Tasks.TaskScheduler)
  nameWithType: TaskFactory<TResult>.TaskFactory(TaskScheduler)
  nameWithType.vb: TaskFactory(Of TResult).TaskFactory(TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
  commentId: P:System.Threading.Tasks.TaskFactory`1.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CancellationToken
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CancellationToken
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 226
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default cancellation token for this task factory.</p>\n"
  syntax:
    content: public CancellationToken CancellationToken { get; }
    content.vb: Public ReadOnly Property CancellationToken As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
      description: "\n<p>The default cancellation token for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).CancellationToken
  nameWithType: TaskFactory<TResult>.CancellationToken
  nameWithType.vb: TaskFactory(Of TResult).CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  commentId: P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinuationOptions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinuationOptions
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 258
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> enumeration value for this task factory.</p>\n"
  syntax:
    content: public TaskContinuationOptions ContinuationOptions { get; }
    content.vb: Public ReadOnly Property ContinuationOptions As TaskContinuationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that specifies the default continuation options for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinuationOptions
  nameWithType: TaskFactory<TResult>.ContinuationOptions
  nameWithType.vb: TaskFactory(Of TResult).ContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions
  commentId: P:System.Threading.Tasks.TaskFactory`1.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CreationOptions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreationOptions
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 248
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> enumeration value for this task factory.</p>\n"
  syntax:
    content: public TaskCreationOptions CreationOptions { get; }
    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that specifies the default creation options for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).CreationOptions
  nameWithType: TaskFactory<TResult>.CreationOptions
  nameWithType.vb: TaskFactory(Of TResult).CreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler
  commentId: P:System.Threading.Tasks.TaskFactory`1.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.Scheduler
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Scheduler
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 238
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the task scheduler for this task factory.</p>\n"
  syntax:
    content: public TaskScheduler Scheduler { get; }
    content.vb: Public ReadOnly Property Scheduler As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The task scheduler for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).Scheduler
  nameWithType: TaskFactory<TResult>.Scheduler
  nameWithType.vb: TaskFactory(Of TResult).Scheduler
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1490
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult))
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult))
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[], TResult>)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Task(), Func(Of Task(), TResult))
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1521
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>continuationFunction</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1605
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The scheduler that is used to schedule the created continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>continuationOptions</em> specifies an invalid value.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1558
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[], TResult>, TaskContinuationOptions)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Task(), Func(Of Task(), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1633
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult))
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1665
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1753
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The scheduler that is used to schedule the created continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1704
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1890
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult))
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult))
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task, TResult>)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Task(), Func(Of Task, TResult))
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1921
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 2005
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The task scheduler that is used to schedule the created continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1958
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid enumeration value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task, TResult>, TaskContinuationOptions)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Task(), Func(Of Task, TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 2033
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult))
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 2065
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 2153
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 2104
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid enumeration value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)
  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 770
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 799
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 606
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult))
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult))
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult, TResult>)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult))
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 632
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 667
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The task scheduler that is used to schedule the task that executes the end method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 901
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 935
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1042
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1080
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>An object that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1190
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 1232
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>An object that controls the behavior of the created task.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created task that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  id: StartNew(System.Func{`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 279
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew(Func<TResult> function)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(function As Func(Of TResult)) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult))
  name.vb: StartNew(Func(Of TResult))
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>)
  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of TResult))
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 308
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.CancellationToken)
  name.vb: StartNew(Func(Of TResult), CancellationToken)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken)
  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 381
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(function As Func(Of TResult), cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The task scheduler that is used to schedule the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: StartNew(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 339
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew(Func<TResult> function, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.Tasks.TaskCreationOptions)
  name.vb: StartNew(Func(Of TResult), TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, TaskCreationOptions)
  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of TResult), TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  id: StartNew(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 408
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew(Func<object, TResult> function, object state)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(function As Func(Of Object, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object)
  name.vb: StartNew(Func(Of Object, TResult), Object)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object, TResult>, Object)
  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of Object, TResult), Object)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 439
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken)
  name.vb: StartNew(Func(Of Object, TResult), Object, CancellationToken)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object, TResult>, Object, CancellationToken)
  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of Object, TResult), Object, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 516
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that will be assigned to the new task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The task scheduler that is used to schedule the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: StartNew(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs
    startLine: 472
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew(Func<object, TResult> function, object state, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the task.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>One of the enumeration values that controls the behavior of the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: StartNew(Func(Of Object, TResult), Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object, TResult>, Object, TaskCreationOptions)
  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of Object, TResult), Object, TaskCreationOptions)
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: "XXX"
  fullName: System.Threading.CancellationToken
  nameWithType: CancellationToken
  commentId: T:System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: "XXX"
  fullName: System.Threading
  nameWithType: System.Threading
  commentId: N:System.Threading
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskCreationOptions
  nameWithType: TaskCreationOptions
  commentId: T:System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  commentId: T:System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.TaskScheduler
  nameWithType: TaskScheduler
  commentId: T:System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task[]
  name: "XXX"
  fullName: System.Threading.Tasks.Task[]
  fullname.vb: System.Threading.Tasks.Task()
  name.vb: Task()
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "XXX"
    fullName: ()
  nameWithType: Task[]
  nameWithType.vb: Task()
- uid: System.Func{System.Threading.Tasks.Task[],{TResult}}
  parent: System
  definition: System.Func`2
  name: "XXX"
  fullName: System.Func<System.Threading.Tasks.Task[], TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(), TResult)
  name.vb: Func(Of Task(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX'
    fullName: '[]'
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "XXX"
    fullName: ()
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<Task[], TResult>
  nameWithType.vb: Func(Of Task(), TResult)
  commentId: T:System.Func{System.Threading.Tasks.Task[],``0}
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: "XXX"
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Task<TResult>
  nameWithType.vb: Task(Of TResult)
  commentId: T:System.Threading.Tasks.Task{`0}
- uid: System.Func`2
  isExternal: false
  name: "XXX"
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  commentId: T:System.Func`2
- uid: System.Threading.Tasks.Task`1
  isExternal: false
  name: "XXX"
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Task<TResult>
  nameWithType.vb: Task(Of TResult)
  commentId: T:System.Threading.Tasks.Task`1
- uid: System.Threading.Tasks.Task{{TAntecedentResult}}[]
  name: "XXX"
  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]
  fullname.vb: System.Threading.Tasks.Task(Of TAntecedentResult)()
  name.vb: Task(Of TAntecedentResult)()
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TAntecedentResult
  - name: "XXX"
    fullName: )
  - name: "XXX"
    fullName: ()
  nameWithType: Task<TAntecedentResult>[]
  nameWithType.vb: Task(Of TAntecedentResult)()
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
  parent: System
  definition: System.Func`2
  name: "XXX"
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult)
  name.vb: Func(Of Task(Of TAntecedentResult)(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: 'XXX'
    fullName: '[]'
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TAntecedentResult
  - name: "XXX"
    fullName: )
  - name: "XXX"
    fullName: ()
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<Task<TAntecedentResult>[], TResult>
  nameWithType.vb: Func(Of Task(Of TAntecedentResult)(), TResult)
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}[],``1}
- uid: System.Func{System.Threading.Tasks.Task,{TResult}}
  parent: System
  definition: System.Func`2
  name: "XXX"
  fullName: System.Func<System.Threading.Tasks.Task, TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task, TResult)
  name.vb: Func(Of Task, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<Task, TResult>
  nameWithType.vb: Func(Of Task, TResult)
  commentId: T:System.Func{System.Threading.Tasks.Task,``0}
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
  parent: System
  definition: System.Func`2
  name: "XXX"
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult)
  name.vb: Func(Of Task(Of TAntecedentResult), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: "XXX"
    fullName: System.Threading.Tasks.Task
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TAntecedentResult
  - name: "XXX"
    fullName: )
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<Task<TAntecedentResult>, TResult>
  nameWithType.vb: Func(Of Task(Of TAntecedentResult), TResult)
  commentId: T:System.Func{System.Threading.Tasks.Task{``0},``1}
- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`3
  name: "XXX"
  fullName: System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`3
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.AsyncCallback
    name: "XXX"
    fullName: System.AsyncCallback
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.IAsyncResult
    name: "XXX"
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.AsyncCallback
    name: "XXX"
    fullName: System.AsyncCallback
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.IAsyncResult
    name: "XXX"
    fullName: System.IAsyncResult
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Func<AsyncCallback, Object, IAsyncResult>
  nameWithType.vb: Func(Of AsyncCallback, Object, IAsyncResult)
  commentId: T:System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
- uid: System.Func{System.IAsyncResult,{TResult}}
  parent: System
  definition: System.Func`2
  name: "XXX"
  fullName: System.Func<System.IAsyncResult, TResult>
  fullname.vb: System.Func(Of System.IAsyncResult, TResult)
  name.vb: Func(Of IAsyncResult, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.IAsyncResult
    name: "XXX"
    fullName: System.IAsyncResult
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: "XXX"
    fullName: System.IAsyncResult
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<IAsyncResult, TResult>
  nameWithType.vb: Func(Of IAsyncResult, TResult)
  commentId: T:System.Func{System.IAsyncResult,``0}
- uid: System.Func`3
  isExternal: false
  name: "XXX"
  fullName: System.Func<T1, T2, TResult>
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: "XXX"
    fullName: System.Func
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: "XXX"
    fullName: System.Func
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  commentId: T:System.Func`3
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.IAsyncResult
  nameWithType: IAsyncResult
  commentId: T:System.IAsyncResult
- uid: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`4
  name: "XXX"
  fullName: System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`4
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TArg1
  - name: 'XXX '
    fullName: ', '
  - uid: System.AsyncCallback
    name: "XXX"
    fullName: System.AsyncCallback
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.IAsyncResult
    name: "XXX"
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TArg1
  - name: 'XXX '
    fullName: ', '
  - uid: System.AsyncCallback
    name: "XXX"
    fullName: System.AsyncCallback
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.IAsyncResult
    name: "XXX"
    fullName: System.IAsyncResult
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Func<TArg1, AsyncCallback, Object, IAsyncResult>
  nameWithType.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)
  commentId: T:System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult}
- uid: '{TArg1}'
  definition: TArg1
  name: "XXX"
  fullName: TArg1
  nameWithType: TArg1
  commentId: '!:TArg1'
- uid: System.Func`4
  isExternal: false
  name: "XXX"
  fullName: System.Func<T1, T2, T3, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: "XXX"
    fullName: System.Func
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T3
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: "XXX"
    fullName: System.Func
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T3
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  commentId: T:System.Func`4
- uid: TArg1
  isExternal: false
  name: "XXX"
  fullName: TArg1
  nameWithType: TArg1
- uid: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`5
  name: "XXX"
  fullName: System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`5
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TArg1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TArg2
  - name: 'XXX '
    fullName: ', '
  - uid: System.AsyncCallback
    name: "XXX"
    fullName: System.AsyncCallback
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.IAsyncResult
    name: "XXX"
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TArg1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TArg2
  - name: 'XXX '
    fullName: ', '
  - uid: System.AsyncCallback
    name: "XXX"
    fullName: System.AsyncCallback
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.IAsyncResult
    name: "XXX"
    fullName: System.IAsyncResult
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>
  nameWithType.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)
  commentId: T:System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult}
- uid: '{TArg2}'
  definition: TArg2
  name: "XXX"
  fullName: TArg2
  nameWithType: TArg2
  commentId: '!:TArg2'
- uid: System.Func`5
  isExternal: false
  name: "XXX"
  fullName: System.Func<T1, T2, T3, T4, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: "XXX"
    fullName: System.Func
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T3
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T4
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: "XXX"
    fullName: System.Func
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T3
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T4
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  commentId: T:System.Func`5
- uid: TArg2
  isExternal: false
  name: "XXX"
  fullName: TArg2
  nameWithType: TArg2
- uid: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`6
  name: "XXX"
  fullName: System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullname.vb: System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`6
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TArg1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TArg2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TArg3
  - name: 'XXX '
    fullName: ', '
  - uid: System.AsyncCallback
    name: "XXX"
    fullName: System.AsyncCallback
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.IAsyncResult
    name: "XXX"
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TArg1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TArg2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TArg3
  - name: 'XXX '
    fullName: ', '
  - uid: System.AsyncCallback
    name: "XXX"
    fullName: System.AsyncCallback
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.IAsyncResult
    name: "XXX"
    fullName: System.IAsyncResult
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>
  nameWithType.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)
  commentId: T:System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult}
- uid: '{TArg3}'
  definition: TArg3
  name: "XXX"
  fullName: TArg3
  nameWithType: TArg3
  commentId: '!:TArg3'
- uid: System.Func`6
  isExternal: false
  name: "XXX"
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  fullname.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: "XXX"
    fullName: System.Func
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T3
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T4
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T5
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: "XXX"
    fullName: System.Func
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T3
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T4
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T5
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  commentId: T:System.Func`6
- uid: TArg3
  isExternal: false
  name: "XXX"
  fullName: TArg3
  nameWithType: TArg3
- uid: System.Func{{TResult}}
  parent: System
  definition: System.Func`1
  name: "XXX"
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<TResult>
  nameWithType.vb: Func(Of TResult)
  commentId: T:System.Func{``0}
- uid: System.Func`1
  isExternal: false
  name: "XXX"
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: "XXX"
    fullName: System.Func
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<TResult>
  nameWithType.vb: Func(Of TResult)
  commentId: T:System.Func`1
- uid: System.Func{System.Object,{TResult}}
  parent: System
  definition: System.Func`2
  name: "XXX"
  fullName: System.Func<System.Object, TResult>
  fullname.vb: System.Func(Of System.Object, TResult)
  name.vb: Func(Of Object, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  nameWithType: Func<Object, TResult>
  nameWithType.vb: Func(Of Object, TResult)
  commentId: T:System.Func{System.Object,`0}
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: "XXX"
  fullName: System.ObjectDisposedException
  nameWithType: ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException

items:
- uid: Microsoft.Win32.SafeHandles.SafeFileHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeFileHandle
  id: SafeFileHandle
  parent: Microsoft.Win32.SafeHandles
  children:
  - Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)
  - Microsoft.Win32.SafeHandles.SafeFileHandle.IsInvalid
  - Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle
  type: Class
  source:
    remote:
      path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeFileHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SafeFileHandle
    path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeFileHandle.cs
    startLine: 24
  assemblies:
  - System.IO.FileSystem
  namespace: Microsoft.Win32.SafeHandles
  summary: "\n<p>Represents a wrapper class for a file handle. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public sealed class SafeFileHandle : SafeHandleZeroOrMinusOneIsInvalid, IDisposable
    content.vb: >-
      <SecurityCritical>

      Public NotInheritable Class SafeFileHandle
          Inherits SafeHandleZeroOrMinusOneIsInvalid
          Implements IDisposable
  seealso:
  - type: System.Runtime.InteropServices.SafeHandle
    commentId: T:System.Runtime.InteropServices.SafeHandle
  - type: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
    commentId: T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  - System.Runtime.InteropServices.SafeHandle
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.Close
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: SafeFileHandle
- uid: Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)
  commentId: M:Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)
  id: '#ctor(System.IntPtr,System.Boolean)'
  parent: Microsoft.Win32.SafeHandles.SafeFileHandle
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle.SafeFileHandle(System.IntPtr, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeFileHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeFileHandle.cs
    startLine: 31
  assemblies:
  - System.IO.FileSystem
  namespace: Microsoft.Win32.SafeHandles
  summary: "\n<p>Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeFileHandle\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public SafeFileHandle(IntPtr preexistingHandle, bool ownsHandle)
    content.vb: Public Sub New(preexistingHandle As IntPtr, ownsHandle As Boolean)
    parameters:
    - id: preexistingHandle
      type: System.IntPtr
      description: "\n<p>An <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> object that represents the pre-existing handle to use.</p>\n"
    - id: ownsHandle
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to reliably release the handle during the finalization phase; <strong>false</strong> to prevent reliable release (not recommended).</p>\n"
  seealso:
  - type: System.Runtime.InteropServices.SafeHandle
    commentId: T:System.Runtime.InteropServices.SafeHandle
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: SafeFileHandle.SafeFileHandle(IntPtr, Boolean)
- uid: Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle
  commentId: M:Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeFileHandle
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeFileHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReleaseHandle
    path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeFileHandle.cs
    startLine: 35
  assemblies:
  - System.IO.FileSystem
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: >-
      [SecurityCritical]

      protected override bool ReleaseHandle()
    content.vb: >-
      <SecurityCritical>

      Protected Overrides Function ReleaseHandle As Boolean
    return:
      type: System.Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  nameWithType: SafeFileHandle.ReleaseHandle()
- uid: Microsoft.Win32.SafeHandles.SafeFileHandle.IsInvalid
  commentId: P:Microsoft.Win32.SafeHandles.SafeFileHandle.IsInvalid
  id: IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeFileHandle
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: Microsoft.Win32.SafeHandles.SafeFileHandle.IsInvalid
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/ref/System.IO.FileSystem.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInvalid
    path: src/System.IO.FileSystem/ref/System.IO.FileSystem.Manual.cs
    startLine: 13
  assemblies:
  - System.IO.FileSystem
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: >-
      public override bool IsInvalid

      {
          [SecurityCritical]
          get;
      }
    content.vb: Public Overrides ReadOnly Property IsInvalid As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.IsInvalid
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  nameWithType: SafeFileHandle.IsInvalid
references:
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: "XXX"
  fullName: Microsoft.Win32.SafeHandles
  nameWithType: Microsoft.Win32.SafeHandles
  commentId: N:Microsoft.Win32.SafeHandles
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  parent: System.Runtime.ConstrainedExecution
  isExternal: true
  name: "XXX"
  fullName: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  nameWithType: CriticalFinalizerObject
  commentId: T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle
  nameWithType: SafeHandle
  commentId: T:System.Runtime.InteropServices.SafeHandle
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.handle
  nameWithType: SafeHandle.handle
  commentId: F:System.Runtime.InteropServices.SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
  - name: "XXX"
    fullName: (
  - uid: System.IntPtr
    name: "XXX"
    fullName: System.IntPtr
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
  - name: "XXX"
    fullName: (
  - uid: System.IntPtr
    name: "XXX"
    fullName: System.IntPtr
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: SafeHandle.SetHandle(IntPtr)
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: SafeHandle.DangerousGetHandle()
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
- uid: System.Runtime.InteropServices.SafeHandle.Close
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.Close()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Close
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.Close
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Close
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.Close
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: SafeHandle.Close()
  commentId: M:System.Runtime.InteropServices.SafeHandle.Close
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: SafeHandle.Dispose()
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: "XXX"
    fullName: (
  - uid: System.Boolean
    name: "XXX"
    fullName: System.Boolean
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: "XXX"
    fullName: (
  - uid: System.Boolean
    name: "XXX"
    fullName: System.Boolean
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: SafeHandle.Dispose(Boolean)
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: SafeHandle.SetHandleAsInvalid()
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
  - name: "XXX"
    fullName: (
  - uid: System.Boolean
    name: "XXX"
    fullName: System.Boolean
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
  - name: "XXX"
    fullName: (
  - uid: System.Boolean
    name: "XXX"
    fullName: System.Boolean
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: SafeHandle.DangerousRelease()
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousRelease
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed
  nameWithType: SafeHandle.IsClosed
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsClosed
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Runtime.ConstrainedExecution
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.ConstrainedExecution
  nameWithType: System.Runtime.ConstrainedExecution
  commentId: N:System.Runtime.ConstrainedExecution
- uid: System.Runtime.InteropServices
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.IntPtr
  nameWithType: IntPtr
  commentId: T:System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: "XXX"
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: SafeHandle.ReleaseHandle()
  commentId: M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid
  nameWithType: SafeHandle.IsInvalid
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsInvalid

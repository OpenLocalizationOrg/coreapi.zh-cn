items:
- uid: System.ComponentModel.ProgressChangedEventArgs
  commentId: T:System.ComponentModel.ProgressChangedEventArgs
  id: ProgressChangedEventArgs
  parent: System.ComponentModel
  children:
  - System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)
  - System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage
  - System.ComponentModel.ProgressChangedEventArgs.UserState
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.ProgressChangedEventArgs
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProgressChangedEventArgs
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs
    startLine: 8
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Provides data for the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: 'public class ProgressChangedEventArgs : EventArgs'
    content.vb: >-
      Public Class ProgressChangedEventArgs
          Inherits EventArgs
  seealso:
  - type: System.ComponentModel.BackgroundWorker
    commentId: T:System.ComponentModel.BackgroundWorker
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: ProgressChangedEventArgs
- uid: System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)
  commentId: M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)
  id: '#ctor(System.Int32,System.Object)'
  parent: System.ComponentModel.ProgressChangedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.ProgressChangedEventArgs.ProgressChangedEventArgs(System.Int32, System.Object)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs
    startLine: 13
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.ProgressChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public ProgressChangedEventArgs(int progressPercentage, object userState)
    content.vb: Public Sub New(progressPercentage As Integer, userState As Object)
    parameters:
    - id: progressPercentage
      type: System.Int32
      description: "\n<p>The percentage of an asynchronous task that has been completed.</p>\n"
    - id: userState
      type: System.Object
      description: "\n<p>A unique user state.</p>\n"
  seealso:
  - type: System.ComponentModel.BackgroundWorker
    commentId: T:System.ComponentModel.BackgroundWorker
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ProgressChangedEventArgs.ProgressChangedEventArgs(Int32, Object)
- uid: System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage
  commentId: P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage
  id: ProgressPercentage
  parent: System.ComponentModel.ProgressChangedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProgressPercentage
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs
    startLine: 19
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets the asynchronous task progress percentage.</p>\n"
  syntax:
    content: public int ProgressPercentage { get; }
    content.vb: Public ReadOnly Property ProgressPercentage As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>A percentage value indicating the asynchronous task progress.</p>\n"
  seealso:
  - type: System.ComponentModel.BackgroundWorker
    commentId: T:System.ComponentModel.BackgroundWorker
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ProgressChangedEventArgs.ProgressPercentage
- uid: System.ComponentModel.ProgressChangedEventArgs.UserState
  commentId: P:System.ComponentModel.ProgressChangedEventArgs.UserState
  id: UserState
  parent: System.ComponentModel.ProgressChangedEventArgs
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.ProgressChangedEventArgs.UserState
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserState
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/ProgressChangedEvent.cs
    startLine: 27
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets a unique user state.</p>\n"
  syntax:
    content: public object UserState { get; }
    content.vb: Public ReadOnly Property UserState As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>A unique <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> indicating the user state.</p>\n"
  seealso:
  - type: System.ComponentModel.BackgroundWorker
    commentId: T:System.ComponentModel.BackgroundWorker
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ProgressChangedEventArgs.UserState
references:
- uid: System.ComponentModel
  isExternal: false
  name: "XXX"
  fullName: System.ComponentModel
  nameWithType: System.ComponentModel
  commentId: N:System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.EventArgs
  nameWithType: EventArgs
  commentId: T:System.EventArgs
- uid: System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: "XXX"
  fullName: System.EventArgs.Empty
  nameWithType: EventArgs.Empty
  commentId: F:System.EventArgs.Empty
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32

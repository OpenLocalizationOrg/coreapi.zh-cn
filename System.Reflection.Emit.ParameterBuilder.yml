items:
- uid: System.Reflection.Emit.ParameterBuilder
  commentId: T:System.Reflection.Emit.ParameterBuilder
  id: ParameterBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.ParameterBuilder.Attributes
  - System.Reflection.Emit.ParameterBuilder.IsIn
  - System.Reflection.Emit.ParameterBuilder.IsOptional
  - System.Reflection.Emit.ParameterBuilder.IsOut
  - System.Reflection.Emit.ParameterBuilder.Name
  - System.Reflection.Emit.ParameterBuilder.Position
  - System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)
  - System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Emit.ParameterBuilder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ParameterBuilder
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 21
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Creates or associates parameter information.</p>\n"
  syntax:
    content: >-
      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_ParameterBuilder))]

      [ComVisible(true)]

      public class ParameterBuilder : _ParameterBuilder
    content.vb: >-
      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_ParameterBuilder))>

      <ComVisible(True)>

      Public Class ParameterBuilder
          Implements _ParameterBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: ParameterBuilder
- uid: System.Reflection.Emit.ParameterBuilder.Attributes
  commentId: P:System.Reflection.Emit.ParameterBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Emit.ParameterBuilder.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 151
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the attributes for this parameter.</p>\n"
  syntax:
    content: public virtual int Attributes { get; }
    content.vb: Public Overridable ReadOnly Property Attributes As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Read-only. Retrieves the attributes for this parameter.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: ParameterBuilder.Attributes
- uid: System.Reflection.Emit.ParameterBuilder.IsIn
  commentId: P:System.Reflection.Emit.ParameterBuilder.IsIn
  id: IsIn
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Emit.ParameterBuilder.IsIn
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsIn
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 155
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves whether this is an input parameter.</p>\n"
  syntax:
    content: public bool IsIn { get; }
    content.vb: Public ReadOnly Property IsIn As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Read-only. Retrieves whether this is an input parameter.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ParameterBuilder.IsIn
- uid: System.Reflection.Emit.ParameterBuilder.IsOptional
  commentId: P:System.Reflection.Emit.ParameterBuilder.IsOptional
  id: IsOptional
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Emit.ParameterBuilder.IsOptional
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsOptional
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 161
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves whether this parameter is optional.</p>\n"
  syntax:
    content: public bool IsOptional { get; }
    content.vb: Public ReadOnly Property IsOptional As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Read-only. Specifies whether this parameter is optional.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ParameterBuilder.IsOptional
- uid: System.Reflection.Emit.ParameterBuilder.IsOut
  commentId: P:System.Reflection.Emit.ParameterBuilder.IsOut
  id: IsOut
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Emit.ParameterBuilder.IsOut
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsOut
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 158
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves whether this parameter is an output parameter.</p>\n"
  syntax:
    content: public bool IsOut { get; }
    content.vb: Public ReadOnly Property IsOut As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Read-only. Retrieves whether this parameter is an output parameter.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ParameterBuilder.IsOut
- uid: System.Reflection.Emit.ParameterBuilder.Name
  commentId: P:System.Reflection.Emit.ParameterBuilder.Name
  id: Name
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Emit.ParameterBuilder.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 143
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the name of this parameter.</p>\n"
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Read-only. Retrieves the name of this parameter.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: ParameterBuilder.Name
- uid: System.Reflection.Emit.ParameterBuilder.Position
  commentId: P:System.Reflection.Emit.ParameterBuilder.Position
  id: Position
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Emit.ParameterBuilder.Position
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Position
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 147
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the signature position for this parameter.</p>\n"
  syntax:
    content: public virtual int Position { get; }
    content.vb: Public Overridable ReadOnly Property Position As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Read-only. Retrieves the signature position for this parameter.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: ParameterBuilder.Position
- uid: System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)
  commentId: M:System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)
  id: SetConstant(System.Object)
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Emit.ParameterBuilder.SetConstant(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetConstant
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 46
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the default value of the parameter.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual void SetConstant(object defaultValue)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Sub SetConstant(defaultValue As Object)
    parameters:
    - id: defaultValue
      type: System.Object
      description: "\n<p>The default value of this parameter. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parameter is not one of the supported types.</p>\n<p>-or-</p>\n<p>The type of <em>defaultValue</em> does not match the type of the parameter.</p>\n<p>-or-</p>\n<p>The parameter is of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> or other reference type, <em>defaultValue</em> is not <strong>null</strong>, and the value cannot be assigned to the reference type.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: ParameterBuilder.SetConstant(Object)
- uid: System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 58
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Set a custom attribute using a specified custom attribute blob.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(true)]

      public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: >-
      <SecuritySafeCritical>

      <ComVisible(True)>

      Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute. </p>\n"
    - id: binaryAttribute
      type: System.Byte[]
      description: "\n<p>A byte blob representing the attributes. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> or <em>binaryAttribute</em> is <strong>null</strong>. </p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
  nameWithType: ParameterBuilder.SetCustomAttribute(ConstructorInfo, Byte[])
  nameWithType.vb: ParameterBuilder.SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.ParameterBuilder
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/ParameterBuilder.cs
    startLine: 77
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Set a custom attribute using a custom attribute builder.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: "\n<p>An instance of a helper class to define the custom attribute. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> is <strong>null</strong>. </p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ParameterBuilder.SetCustomAttribute(CustomAttributeBuilder)
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.ConstructorInfo
  nameWithType: ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
- uid: System.Byte[]
  name: "XXX"
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: "XXX"
    fullName: System.Byte
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
- uid: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection
  nameWithType: System.Reflection
  commentId: N:System.Reflection
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.Emit.CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  commentId: T:System.Reflection.Emit.CustomAttributeBuilder
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException

items:
- uid: System.Reflection.MethodImplAttributes
  commentId: T:System.Reflection.MethodImplAttributes
  id: MethodImplAttributes
  parent: System.Reflection
  children:
  - System.Reflection.MethodImplAttributes.AggressiveInlining
  - System.Reflection.MethodImplAttributes.CodeTypeMask
  - System.Reflection.MethodImplAttributes.ForwardRef
  - System.Reflection.MethodImplAttributes.IL
  - System.Reflection.MethodImplAttributes.InternalCall
  - System.Reflection.MethodImplAttributes.Managed
  - System.Reflection.MethodImplAttributes.ManagedMask
  - System.Reflection.MethodImplAttributes.Native
  - System.Reflection.MethodImplAttributes.NoInlining
  - System.Reflection.MethodImplAttributes.NoOptimization
  - System.Reflection.MethodImplAttributes.OPTIL
  - System.Reflection.MethodImplAttributes.PreserveSig
  - System.Reflection.MethodImplAttributes.Runtime
  - System.Reflection.MethodImplAttributes.Synchronized
  - System.Reflection.MethodImplAttributes.Unmanaged
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MethodImplAttributes
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 11
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies flags for the attributes of a method implementation.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public enum MethodImplAttributes
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Enum MethodImplAttributes
  seealso:
  - type: System.Reflection
    commentId: N:System.Reflection
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
  nameWithType: MethodImplAttributes
- uid: System.Reflection.MethodImplAttributes.AggressiveInlining
  commentId: F:System.Reflection.MethodImplAttributes.AggressiveInlining
  id: AggressiveInlining
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.AggressiveInlining
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AggressiveInlining
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 38
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method should be inlined wherever possible.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      AggressiveInlining = 256
    content.vb: >-
      <ComVisible(False)>

      AggressiveInlining = 256
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.AggressiveInlining
- uid: System.Reflection.MethodImplAttributes.CodeTypeMask
  commentId: F:System.Reflection.MethodImplAttributes.CodeTypeMask
  id: CodeTypeMask
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.CodeTypeMask
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CodeTypeMask
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 16
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies flags about code type.</p>\n"
  syntax:
    content: CodeTypeMask = 3
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.CodeTypeMask
- uid: System.Reflection.MethodImplAttributes.ForwardRef
  commentId: F:System.Reflection.MethodImplAttributes.ForwardRef
  id: ForwardRef
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.ForwardRef
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForwardRef
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 31
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method is not defined.</p>\n"
  syntax:
    content: ForwardRef = 16
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.ForwardRef
- uid: System.Reflection.MethodImplAttributes.IL
  commentId: F:System.Reflection.MethodImplAttributes.IL
  id: IL
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.IL
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IL
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 17
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</p>\n"
  syntax:
    content: IL = 0
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.IL
- uid: System.Reflection.MethodImplAttributes.InternalCall
  commentId: F:System.Reflection.MethodImplAttributes.InternalCall
  id: InternalCall
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.InternalCall
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InternalCall
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 34
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies an internal call.</p>\n"
  syntax:
    content: InternalCall = 4096
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.InternalCall
- uid: System.Reflection.MethodImplAttributes.Managed
  commentId: F:System.Reflection.MethodImplAttributes.Managed
  id: Managed
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.Managed
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Managed
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 27
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method is implemented in managed code.</p>\n"
  syntax:
    content: Managed = 0
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.Managed
- uid: System.Reflection.MethodImplAttributes.ManagedMask
  commentId: F:System.Reflection.MethodImplAttributes.ManagedMask
  id: ManagedMask
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.ManagedMask
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ManagedMask
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 25
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies whether the method is implemented in managed or unmanaged code.</p>\n"
  syntax:
    content: ManagedMask = 4
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.ManagedMask
- uid: System.Reflection.MethodImplAttributes.Native
  commentId: F:System.Reflection.MethodImplAttributes.Native
  id: Native
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.Native
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Native
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 18
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method implementation is native.</p>\n"
  syntax:
    content: Native = 1
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.Native
- uid: System.Reflection.MethodImplAttributes.NoInlining
  commentId: F:System.Reflection.MethodImplAttributes.NoInlining
  id: NoInlining
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.NoInlining
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NoInlining
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 37
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method cannot be inlined.</p>\n"
  syntax:
    content: NoInlining = 8
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.NoInlining
- uid: System.Reflection.MethodImplAttributes.NoOptimization
  commentId: F:System.Reflection.MethodImplAttributes.NoOptimization
  id: NoOptimization
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.NoOptimization
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NoOptimization
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 40
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method is not optimized by the just-in-time (JIT) compiler or by native code generation (see Ngen.exe) when debugging possible code generation problems.</p>\n"
  syntax:
    content: NoOptimization = 64
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.NoOptimization
- uid: System.Reflection.MethodImplAttributes.OPTIL
  commentId: F:System.Reflection.MethodImplAttributes.OPTIL
  id: OPTIL
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.OPTIL
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OPTIL
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 20
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method implementation is in Optimized Intermediate Language (OPTIL).</p>\n"
  syntax:
    content: OPTIL = 2
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.OPTIL
- uid: System.Reflection.MethodImplAttributes.PreserveSig
  commentId: F:System.Reflection.MethodImplAttributes.PreserveSig
  id: PreserveSig
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.PreserveSig
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PreserveSig
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 32
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method signature is exported exactly as declared.</p>\n"
  syntax:
    content: PreserveSig = 128
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.PreserveSig
- uid: System.Reflection.MethodImplAttributes.Runtime
  commentId: F:System.Reflection.MethodImplAttributes.Runtime
  id: Runtime
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.Runtime
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Runtime
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 21
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method implementation is provided by the runtime.</p>\n"
  syntax:
    content: Runtime = 3
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.Runtime
- uid: System.Reflection.MethodImplAttributes.Synchronized
  commentId: F:System.Reflection.MethodImplAttributes.Synchronized
  id: Synchronized
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.Synchronized
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Synchronized
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 36
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method is single-threaded through the body. Static methods (<strong>Shared</strong> in Visual Basic) lock on the type, whereas instance methods lock on the instance. You can also use the C# lock statement or the Visual Basic SyncLock statement for this purpose. </p>\n"
  syntax:
    content: Synchronized = 32
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.Synchronized
- uid: System.Reflection.MethodImplAttributes.Unmanaged
  commentId: F:System.Reflection.MethodImplAttributes.Unmanaged
  id: Unmanaged
  parent: System.Reflection.MethodImplAttributes
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes.Unmanaged
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Unmanaged
    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs
    startLine: 26
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the method is implemented in unmanaged code.</p>\n"
  syntax:
    content: Unmanaged = 4
    return:
      type: System.Reflection.MethodImplAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: MethodImplAttributes.Unmanaged
references:
- uid: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection
  nameWithType: System.Reflection
  commentId: N:System.Reflection
- uid: System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.MethodImplAttributes
  nameWithType: MethodImplAttributes
  commentId: T:System.Reflection.MethodImplAttributes

items:
- uid: System.Reflection.Context.CustomReflectionContext
  commentId: T:System.Reflection.Context.CustomReflectionContext
  id: CustomReflectionContext
  parent: System.Reflection.Context
  children:
  - System.Reflection.Context.CustomReflectionContext.#ctor
  - System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  - System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  - System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  - System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  - System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  - System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Context.CustomReflectionContext
  type: Class
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomReflectionContext
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 10
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Represents a customizable reflection context.</p>\n"
  syntax:
    content: 'public abstract class CustomReflectionContext : ReflectionContext'
    content.vb: >-
      Public MustInherit Class CustomReflectionContext
          Inherits ReflectionContext
  inheritance:
  - System.Object
  - System.Reflection.ReflectionContext
  inheritedMembers:
  - System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: CustomReflectionContext
- uid: System.Reflection.Context.CustomReflectionContext.#ctor
  commentId: M:System.Reflection.Context.CustomReflectionContext.#ctor
  id: '#ctor'
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext()
  type: Constructor
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 12
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.Context.CustomReflectionContext\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected CustomReflectionContext()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: CustomReflectionContext.CustomReflectionContext()
- uid: System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  commentId: M:System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  id: '#ctor(System.Reflection.ReflectionContext)'
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext(System.Reflection.ReflectionContext)
  type: Constructor
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 13
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.Context.CustomReflectionContext\" data-throw-if-not-resolved=\"false\"></xref> class with the specified reflection context as a base.</p>\n"
  syntax:
    content: protected CustomReflectionContext(ReflectionContext source)
    content.vb: Protected Sub New(source As ReflectionContext)
    parameters:
    - id: source
      type: System.Reflection.ReflectionContext
      description: "\n<p>The reflection context to use as a base.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: CustomReflectionContext.CustomReflectionContext(ReflectionContext)
- uid: System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  commentId: M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  id: AddProperties(System.Type)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddProperties
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 14
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>When overridden in a derived class, provides a collection of additional properties for the specified type, as represented in this reflection context.</p>\n"
  syntax:
    content: protected virtual IEnumerable<PropertyInfo> AddProperties(Type type)
    content.vb: Protected Overridable Function AddProperties(type As Type) As IEnumerable(Of PropertyInfo)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type to add properties to.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
      description: "\n<p>A collection of additional properties for the specified type.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: CustomReflectionContext.AddProperties(Type)
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  commentId: M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  id: CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type, System.String, System.Func<System.Object, System.Object>, System.Action<System.Object, System.Object>)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateProperty
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 15
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Creates an object that represents a property to be added to a type, to be used with the <xref href=\"System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: protected PropertyInfo CreateProperty(Type propertyType, string name, Func<object, object> getter, Action<object, object> setter)
    content.vb: Protected Function CreateProperty(propertyType As Type, name As String, getter As Func(Of Object, Object), setter As Action(Of Object, Object)) As PropertyInfo
    parameters:
    - id: propertyType
      type: System.Type
      description: "\n<p>The type of the property to create.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the property to create.</p>\n"
    - id: getter
      type: System.Func{System.Object,System.Object}
      description: "\n<p>An object that represents the property's <strong>get</strong> accessor.</p>\n"
    - id: setter
      type: System.Action{System.Object,System.Object}
      description: "\n<p>An object that represents the property's <strong>set</strong> accessor.</p>\n"
    return:
      type: System.Reflection.PropertyInfo
      description: "\n<p>An object that represents the property.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type, System.String, System.Func(Of System.Object, System.Object), System.Action(Of System.Object, System.Object))
  name.vb: CreateProperty(Type, String, Func(Of Object, Object), Action(Of Object, Object))
  nameWithType: CustomReflectionContext.CreateProperty(Type, String, Func<Object, Object>, Action<Object, Object>)
  nameWithType.vb: CustomReflectionContext.CreateProperty(Type, String, Func(Of Object, Object), Action(Of Object, Object))
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  commentId: M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  id: CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type, System.String, System.Func<System.Object, System.Object>, System.Action<System.Object, System.Object>, System.Collections.Generic.IEnumerable<System.Attribute>, System.Collections.Generic.IEnumerable<System.Attribute>, System.Collections.Generic.IEnumerable<System.Attribute>)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateProperty
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 16
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Creates an object that represents a property to be added to a type, to be used with the <xref href=\"System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method and using the specified custom attributes.</p>\n"
  syntax:
    content: protected PropertyInfo CreateProperty(Type propertyType, string name, Func<object, object> getter, Action<object, object> setter, IEnumerable<Attribute> propertyCustomAttributes, IEnumerable<Attribute> getterCustomAttributes, IEnumerable<Attribute> setterCustomAttributes)
    content.vb: Protected Function CreateProperty(propertyType As Type, name As String, getter As Func(Of Object, Object), setter As Action(Of Object, Object), propertyCustomAttributes As IEnumerable(Of Attribute), getterCustomAttributes As IEnumerable(Of Attribute), setterCustomAttributes As IEnumerable(Of Attribute)) As PropertyInfo
    parameters:
    - id: propertyType
      type: System.Type
      description: "\n<p>The type of the property to create.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the property to create.</p>\n"
    - id: getter
      type: System.Func{System.Object,System.Object}
      description: "\n<p>An object that represents the property's <strong>get</strong> accessor.</p>\n"
    - id: setter
      type: System.Action{System.Object,System.Object}
      description: "\n<p>An object that represents the property's <strong>set</strong> accessor.</p>\n"
    - id: propertyCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of custom attributes to apply to the property.</p>\n"
    - id: getterCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of custom attributes to apply to the property's <strong>get</strong> accessor.</p>\n"
    - id: setterCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of custom attributes to apply to the property's <strong>set</strong> accessor.</p>\n"
    return:
      type: System.Reflection.PropertyInfo
      description: "\n<p>An object that represents the property.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type, System.String, System.Func(Of System.Object, System.Object), System.Action(Of System.Object, System.Object), System.Collections.Generic.IEnumerable(Of System.Attribute), System.Collections.Generic.IEnumerable(Of System.Attribute), System.Collections.Generic.IEnumerable(Of System.Attribute))
  name.vb: CreateProperty(Type, String, Func(Of Object, Object), Action(Of Object, Object), IEnumerable(Of Attribute), IEnumerable(Of Attribute), IEnumerable(Of Attribute))
  nameWithType: CustomReflectionContext.CreateProperty(Type, String, Func<Object, Object>, Action<Object, Object>, IEnumerable<Attribute>, IEnumerable<Attribute>, IEnumerable<Attribute>)
  nameWithType.vb: CustomReflectionContext.CreateProperty(Type, String, Func(Of Object, Object), Action(Of Object, Object), IEnumerable(Of Attribute), IEnumerable(Of Attribute), IEnumerable(Of Attribute))
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 17
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>When overridden in a derived class, provides a list of custom attributes for the specified member, as represented in this reflection context.</p>\n"
  syntax:
    content: protected virtual IEnumerable<object> GetCustomAttributes(MemberInfo member, IEnumerable<object> declaredAttributes)
    content.vb: Protected Overridable Function GetCustomAttributes(member As MemberInfo, declaredAttributes As IEnumerable(Of Object)) As IEnumerable(Of Object)
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "\n<p>The member whose custom attributes will be returned.</p>\n"
    - id: declaredAttributes
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "\n<p>A collection of the member's attributes in its current context.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "\n<p>A collection that represents the custom attributes of the specified member in this reflection context.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: GetCustomAttributes(MemberInfo, IEnumerable(Of Object))
  nameWithType: CustomReflectionContext.GetCustomAttributes(MemberInfo, IEnumerable<Object>)
  nameWithType.vb: CustomReflectionContext.GetCustomAttributes(MemberInfo, IEnumerable(Of Object))
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo, System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 18
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>When overridden in a derived class, provides a list of custom attributes for the specified parameter, as represented in this reflection context.</p>\n"
  syntax:
    content: protected virtual IEnumerable<object> GetCustomAttributes(ParameterInfo parameter, IEnumerable<object> declaredAttributes)
    content.vb: Protected Overridable Function GetCustomAttributes(parameter As ParameterInfo, declaredAttributes As IEnumerable(Of Object)) As IEnumerable(Of Object)
    parameters:
    - id: parameter
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter whose custom attributes will be returned.</p>\n"
    - id: declaredAttributes
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "\n<p>A collection of the parameter's attributes in its current context.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "\n<p>A collection that represents the custom attributes of the specified parameter in this reflection context.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo, System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: GetCustomAttributes(ParameterInfo, IEnumerable(Of Object))
  nameWithType: CustomReflectionContext.GetCustomAttributes(ParameterInfo, IEnumerable<Object>)
  nameWithType.vb: CustomReflectionContext.GetCustomAttributes(ParameterInfo, IEnumerable(Of Object))
- uid: System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  commentId: M:System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  id: MapAssembly(System.Reflection.Assembly)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MapAssembly
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 19
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Gets the representation, in this reflection context, of an assembly that is represented by an object from another reflection context. </p>\n"
  syntax:
    content: public override Assembly MapAssembly(Assembly assembly)
    content.vb: Public Overrides Function MapAssembly(assembly As Assembly) As Assembly
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "\n<p>The external representation of the assembly to represent in this context.</p>\n"
    return:
      type: System.Reflection.Assembly
      description: "\n<p>The representation of the assembly in this reflection context.</p>\n"
  overridden: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: CustomReflectionContext.MapAssembly(Assembly)
- uid: System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  commentId: M:System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  id: MapType(System.Reflection.TypeInfo)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MapType
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 20
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Gets the representation, in this reflection context, of a type represented by an object from another reflection context. </p>\n"
  syntax:
    content: public override TypeInfo MapType(TypeInfo type)
    content.vb: Public Overrides Function MapType(type As TypeInfo) As TypeInfo
    parameters:
    - id: type
      type: System.Reflection.TypeInfo
      description: "\n<p>The external representation of the type to represent in this context. </p>\n"
    return:
      type: System.Reflection.TypeInfo
      description: "\n<p>The representation of the type in this reflection context. </p>\n"
  overridden: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: CustomReflectionContext.MapType(TypeInfo)
references:
- uid: System.Reflection.Context
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.Context
  commentId: N:System.Reflection.Context
  nameWithType: System.Reflection.Context
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Reflection.ReflectionContext
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.ReflectionContext
  commentId: T:System.Reflection.ReflectionContext
  nameWithType: ReflectionContext
- uid: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  parent: System.Reflection.ReflectionContext
  isExternal: true
  name: "XXX"
  fullName: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  spec.csharp:
  - uid: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
    name: "XXX"
    fullName: System.Reflection.ReflectionContext.GetTypeForObject
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
    name: "XXX"
    fullName: System.Reflection.ReflectionContext.GetTypeForObject
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  nameWithType: ReflectionContext.GetTypeForObject(Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection
  commentId: N:System.Reflection
  nameWithType: System.Reflection
- uid: System.Type
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Type
  commentId: T:System.Type
  nameWithType: Type
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)
  name.vb: IEnumerable(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: "XXX"
    fullName: System.Reflection.PropertyInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: "XXX"
    fullName: System.Reflection.PropertyInfo
  - name: "XXX"
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  nameWithType: IEnumerable<PropertyInfo>
  nameWithType.vb: IEnumerable(Of PropertyInfo)
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: "XXX"
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable`1
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
- uid: System.Collections.Generic
  isExternal: false
  name: "XXX"
  fullName: System.Collections.Generic
  commentId: N:System.Collections.Generic
  nameWithType: System.Collections.Generic
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Func{System.Object,System.Object}
  parent: System
  definition: System.Func`2
  name: "XXX"
  fullName: System.Func<System.Object, System.Object>
  fullname.vb: System.Func(Of System.Object, System.Object)
  name.vb: Func(Of Object, Object)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: T:System.Func{System.Object,System.Object}
  nameWithType: Func<Object, Object>
  nameWithType.vb: Func(Of Object, Object)
- uid: System.Action{System.Object,System.Object}
  parent: System
  definition: System.Action`2
  name: "XXX"
  fullName: System.Action<System.Object, System.Object>
  fullname.vb: System.Action(Of System.Object, System.Object)
  name.vb: Action(Of Object, Object)
  spec.csharp:
  - uid: System.Action`2
    name: "XXX"
    fullName: System.Action
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: "XXX"
    fullName: System.Action
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: T:System.Action{System.Object,System.Object}
  nameWithType: Action<Object, Object>
  nameWithType.vb: Action(Of Object, Object)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  nameWithType: PropertyInfo
- uid: System.Func`2
  isExternal: false
  name: "XXX"
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: "XXX"
    fullName: System.Func
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: TResult
  - name: "XXX"
    fullName: )
  commentId: T:System.Func`2
  nameWithType: Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
- uid: System.Action`2
  isExternal: false
  name: "XXX"
  fullName: System.Action<T1, T2>
  fullname.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: "XXX"
    fullName: System.Action
  - name: "<"
    fullName: <
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: "XXX"
    fullName: System.Action
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: T1
  - name: 'XXX '
    fullName: ', '
  - name: "XXX"
    fullName: T2
  - name: "XXX"
    fullName: )
  commentId: T:System.Action`2
  nameWithType: Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
- uid: System.Collections.Generic.IEnumerable{System.Attribute}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<System.Attribute>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Attribute)
  name.vb: IEnumerable(Of Attribute)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Attribute
    name: "XXX"
    fullName: System.Attribute
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Attribute
    name: "XXX"
    fullName: System.Attribute
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{System.Attribute}
  nameWithType: IEnumerable<Attribute>
  nameWithType.vb: IEnumerable(Of Attribute)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  nameWithType: MemberInfo
- uid: System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: "XXX"
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: "<"
    fullName: <
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: "XXX"
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: 'XXX '
    fullName: '(Of '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  nameWithType: IEnumerable<Object>
  nameWithType.vb: IEnumerable(Of Object)
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.ParameterInfo
  commentId: T:System.Reflection.ParameterInfo
  nameWithType: ParameterInfo
- uid: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  parent: System.Reflection.ReflectionContext
  isExternal: true
  name: "XXX"
  fullName: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  spec.csharp:
  - uid: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
    name: "XXX"
    fullName: System.Reflection.ReflectionContext.MapAssembly
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Reflection.Assembly
    name: "XXX"
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
    name: "XXX"
    fullName: System.Reflection.ReflectionContext.MapAssembly
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Reflection.Assembly
    name: "XXX"
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  nameWithType: ReflectionContext.MapAssembly(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  nameWithType: Assembly
- uid: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  parent: System.Reflection.ReflectionContext
  isExternal: true
  name: "XXX"
  fullName: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  spec.csharp:
  - uid: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
    name: "XXX"
    fullName: System.Reflection.ReflectionContext.MapType
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Reflection.TypeInfo
    name: "XXX"
    fullName: System.Reflection.TypeInfo
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
    name: "XXX"
    fullName: System.Reflection.ReflectionContext.MapType
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Reflection.TypeInfo
    name: "XXX"
    fullName: System.Reflection.TypeInfo
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  nameWithType: ReflectionContext.MapType(TypeInfo)
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: "XXX"
  fullName: System.Reflection.TypeInfo
  commentId: T:System.Reflection.TypeInfo
  nameWithType: TypeInfo

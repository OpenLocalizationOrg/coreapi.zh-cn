items:
- uid: System.Security.AccessControl.AccessRule`1
  commentId: T:System.Security.AccessControl.AccessRule`1
  id: AccessRule`1
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.AccessRule`1.Rights
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.AccessRule<T>
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRule
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 46
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents a combination of a user's identity, an access mask, and an access control type (allow or deny). An AccessRule`1 object also contains information about the how the rule is inherited by child objects and how that inheritance is propagated.</p>\n"
  syntax:
    content: 'public class AccessRule<T> : AccessRule where T : struct'
    content.vb: >-
      Public Class AccessRule(Of T As Structure)
          Inherits AccessRule
    typeParameters:
    - id: T
      description: "\n<p>The access rights type for the access rule.</p>\n"
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Security.AccessControl.AccessRule(Of T)
  name.vb: AccessRule(Of T)
  nameWithType: AccessRule<T>
  nameWithType.vb: AccessRule(Of T)
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.AccessRule`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 48
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the AccessRule’1 class by using the specified values.</p>\n"
  syntax:
    content: public AccessRule(IdentityReference identity, T rights, AccessControlType type)
    content.vb: Public Sub New(identity As IdentityReference, rights As T, type As AccessControlType)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The identity to which the access rule applies.</p>\n"
    - id: rights
      type: '{T}'
      description: "\n<p>The rights of the access rule.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>The valid access control type.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.AccessRule(Of T).AccessRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(IdentityReference, T, AccessControlType)
  nameWithType.vb: AccessRule(Of T).AccessRule(IdentityReference, T, AccessControlType)
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.AccessRule`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 49
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the AccessRule’1 class by using the specified values.</p>\n"
  syntax:
    content: public AccessRule(IdentityReference identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)
    content.vb: Public Sub New(identity As IdentityReference, rights As T, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The identity to which the access rule applies.</p>\n"
    - id: rights
      type: '{T}'
      description: "\n<p>The rights of the access rule.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>The inheritance properties of the access rule.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>Whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>The valid access control type.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.AccessRule(Of T).AccessRule(System.Security.Principal.IdentityReference, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)
  nameWithType.vb: AccessRule(Of T).AccessRule(IdentityReference, T, InheritanceFlags, PropagationFlags, AccessControlType)
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,`0,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.AccessRule`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(System.String, T, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 50
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the AccessRule’1 class by using the specified values.</p>\n"
  syntax:
    content: public AccessRule(string identity, T rights, AccessControlType type)
    content.vb: Public Sub New(identity As String, rights As T, type As AccessControlType)
    parameters:
    - id: identity
      type: System.String
      description: "\n<p>The identity to which the access rule applies.</p>\n"
    - id: rights
      type: '{T}'
      description: "\n<p>The rights of the access rule.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>The valid access control type.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.AccessRule(Of T).AccessRule(System.String, T, System.Security.AccessControl.AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(String, T, AccessControlType)
  nameWithType.vb: AccessRule(Of T).AccessRule(String, T, AccessControlType)
- uid: System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.AccessRule`1.#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,`0,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.AccessRule`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.AccessRule<T>.AccessRule(System.String, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 51
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the AccessRule’1 class by using the specified values.</p>\n"
  syntax:
    content: public AccessRule(string identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type)
    content.vb: Public Sub New(identity As String, rights As T, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)
    parameters:
    - id: identity
      type: System.String
      description: "\n<p>The identity to which the access rule applies.</p>\n"
    - id: rights
      type: '{T}'
      description: "\n<p>The rights of the access rule.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>The inheritance properties of the access rule.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>Whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>The valid access control type.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.AccessRule(Of T).AccessRule(System.String, T, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  nameWithType: AccessRule<T>.AccessRule(String, T, InheritanceFlags, PropagationFlags, AccessControlType)
  nameWithType.vb: AccessRule(Of T).AccessRule(String, T, InheritanceFlags, PropagationFlags, AccessControlType)
- uid: System.Security.AccessControl.AccessRule`1.Rights
  commentId: P:System.Security.AccessControl.AccessRule`1.Rights
  id: Rights
  parent: System.Security.AccessControl.AccessRule`1
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Security.AccessControl.AccessRule<T>.Rights
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rights
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 52
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the rights of the current instance.</p>\n"
  syntax:
    content: public T Rights { get; }
    content.vb: Public ReadOnly Property Rights As T
    parameters: []
    return:
      type: '{T}'
      description: "\n<p>The rights, cast as type <T>, of the current instance.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Security.AccessControl.AccessRule(Of T).Rights
  nameWithType: AccessRule<T>.Rights
  nameWithType.vb: AccessRule(Of T).Rights
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl
  commentId: N:System.Security.AccessControl
  nameWithType: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Security.AccessControl.AuthorizationRule
  parent: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AuthorizationRule
  commentId: T:System.Security.AccessControl.AuthorizationRule
  nameWithType: AuthorizationRule
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AccessRule
  commentId: T:System.Security.AccessControl.AccessRule
  nameWithType: AccessRule
- uid: System.Security.AccessControl.AccessRule.AccessControlType
  parent: System.Security.AccessControl.AccessRule
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AccessRule.AccessControlType
  commentId: P:System.Security.AccessControl.AccessRule.AccessControlType
  nameWithType: AccessRule.AccessControlType
- uid: System.Security.AccessControl.AuthorizationRule.AccessMask
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask
  commentId: P:System.Security.AccessControl.AuthorizationRule.AccessMask
  nameWithType: AuthorizationRule.AccessMask
- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference
  commentId: P:System.Security.AccessControl.AuthorizationRule.IdentityReference
  nameWithType: AuthorizationRule.IdentityReference
- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  commentId: P:System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  nameWithType: AuthorizationRule.InheritanceFlags
- uid: System.Security.AccessControl.AuthorizationRule.IsInherited
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited
  commentId: P:System.Security.AccessControl.AuthorizationRule.IsInherited
  nameWithType: AuthorizationRule.IsInherited
- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags
  commentId: P:System.Security.AccessControl.AuthorizationRule.PropagationFlags
  nameWithType: AuthorizationRule.PropagationFlags
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: "XXX"
  fullName: System.Security.Principal.IdentityReference
  commentId: T:System.Security.Principal.IdentityReference
  nameWithType: IdentityReference
- uid: '{T}'
  definition: T
  name: "XXX"
  fullName: T
  commentId: '!:T'
  nameWithType: T
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.AccessControlType
  commentId: T:System.Security.AccessControl.AccessControlType
  nameWithType: AccessControlType
- uid: System.Security.Principal
  isExternal: false
  name: "XXX"
  fullName: System.Security.Principal
  commentId: N:System.Security.Principal
  nameWithType: System.Security.Principal
- uid: T
  isExternal: false
  name: "XXX"
  fullName: T
  nameWithType: T
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.InheritanceFlags
  commentId: T:System.Security.AccessControl.InheritanceFlags
  nameWithType: InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: "XXX"
  fullName: System.Security.AccessControl.PropagationFlags
  commentId: T:System.Security.AccessControl.PropagationFlags
  nameWithType: PropagationFlags
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  commentId: T:System.String
  nameWithType: String

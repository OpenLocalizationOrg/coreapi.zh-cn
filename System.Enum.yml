items:
- uid: System.Enum
  commentId: T:System.Enum
  id: Enum
  parent: System
  children:
  - System.Enum.#ctor
  - System.Enum.CompareTo(System.Object)
  - System.Enum.Equals(System.Object)
  - System.Enum.Format(System.Type,System.Object,System.String)
  - System.Enum.GetHashCode
  - System.Enum.GetName(System.Type,System.Object)
  - System.Enum.GetNames(System.Type)
  - System.Enum.GetUnderlyingType(System.Type)
  - System.Enum.GetValues(System.Type)
  - System.Enum.HasFlag(System.Enum)
  - System.Enum.IsDefined(System.Type,System.Object)
  - System.Enum.Parse(System.Type,System.String)
  - System.Enum.Parse(System.Type,System.String,System.Boolean)
  - System.Enum.System#IConvertible#GetTypeCode
  - System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToByte(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToChar(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToString(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Enum.ToObject(System.Type,System.Object)
  - System.Enum.ToString
  - System.Enum.ToString(System.String)
  - System.Enum.TryParse``1(System.String,``0@)
  - System.Enum.TryParse``1(System.String,System.Boolean,``0@)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Enum
    path: src/mscorlib/src/System/Enum.cs
    startLine: 15
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Provides the base class for enumerations.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public abstract class Enum : ValueType, IComparable, IFormattable, IConvertible
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public MustInherit Class Enum
          Inherits ValueType
          Implements IComparable, IFormattable, IConvertible
  seealso:
  - type: System.ValueType
    commentId: T:System.ValueType
  - type: System.FlagsAttribute
    commentId: T:System.FlagsAttribute
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IComparable
  - System.IConvertible
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: Enum
- uid: System.Enum.#ctor
  commentId: M:System.Enum.#ctor
  id: '#ctor'
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.Enum()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 790
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: protected Enum()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: Enum.Enum()
- uid: System.Enum.CompareTo(System.Object)
  commentId: M:System.Enum.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareTo
    path: src/mscorlib/src/System/Enum.cs
    startLine: 809
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares this instance to a specified object and returns an indication of their relative values.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public int CompareTo(object target)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function CompareTo(target As Object) As Integer
    parameters:
    - id: target
      type: System.Object
      description: "\n<p>An object to compare, or <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed number that indicates the relative values of this instance and <em>target</em>.</p>\n<p>Value </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>The value of this instance is less than the value of <em>target</em>. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>The value of this instance is equal to the value of <em>target</em>. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>The value of this instance is greater than the value of <em>target</em>.</p>\n<p>-or- </p>\n<p>\n<em>target</em> is <strong>null</strong>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>target</em> and this instance are not the same type. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This instance is not type <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Enum.Equals(System.Object)
    commentId: M:System.Enum.Equals(System.Object)
  implements:
  - System.IComparable.CompareTo(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Enum.CompareTo(Object)
- uid: System.Enum.Equals(System.Object)
  commentId: M:System.Enum.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.Equals(System.Object)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public override bool Equals(object obj)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  seealso:
  - type: System.Enum.CompareTo(System.Object)
    commentId: M:System.Enum.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: Enum.Equals(Object)
- uid: System.Enum.Format(System.Type,System.Object,System.String)
  commentId: M:System.Enum.Format(System.Type,System.Object,System.String)
  id: Format(System.Type,System.Object,System.String)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.Format(System.Type, System.Object, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/Enum.cs
    startLine: 602
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static string Format(Type enumType, object value, string format)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function Format(enumType As Type, value As Object, format As String) As String
    parameters:
    - id: enumType
      type: System.Type
      description: "\n<p>The enumeration type of the value to convert. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value to convert. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>The output format to use. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string representation of <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>enumType</em>, <em>value</em>, or <em>format</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>enumType</em> parameter is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n<p>-or- </p>\n<p>The <em>value</em> is from an enumeration that differs in type from <em>enumType</em>.</p>\n<p>-or- </p>\n<p>The type of <em>value</em> is not an underlying type of <em>enumType</em>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The <em>format</em> parameter contains an invalid value. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>format</em> equals \"X\", but the enumeration type is unknown.</p>\n"
  seealso:
  - type: System.Enum.ToString(System.String)
    commentId: M:System.Enum.ToString(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Enum.Format(Type, Object, String)
- uid: System.Enum.GetHashCode
  commentId: M:System.Enum.GetHashCode
  id: GetHashCode
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Enum.cs
    startLine: 744
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for the value of this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetHashCode()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: Enum.GetHashCode()
- uid: System.Enum.GetName(System.Type,System.Object)
  commentId: M:System.Enum.GetName(System.Type,System.Object)
  id: GetName(System.Type,System.Object)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.GetName(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetName
    path: src/mscorlib/src/System/Enum.cs
    startLine: 516
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves the name of the constant in the specified enumeration that has the specified value.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static string GetName(Type enumType, object value)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function GetName(enumType As Type, value As Object) As String
    parameters:
    - id: enumType
      type: System.Type
      description: "\n<p>An enumeration type. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of a particular enumerated constant in terms of its underlying type. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string containing the name of the enumerated constant in <em>enumType</em> whose value is <em>value</em>; or <strong>null</strong> if no such constant is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is neither of type <em>enumType</em> nor does it have the same underlying type as <em>enumType</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Enum.GetName(Type, Object)
- uid: System.Enum.GetNames(System.Type)
  commentId: M:System.Enum.GetNames(System.Type)
  id: GetNames(System.Type)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.GetNames(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetNames
    path: src/mscorlib/src/System/Enum.cs
    startLine: 526
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves an array of the names of the constants in a specified enumeration.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static string[] GetNames(Type enumType)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function GetNames(enumType As Type) As String()
    parameters:
    - id: enumType
      type: System.Type
      description: "\n<p>An enumeration type. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>A string array of the names of the constants in <em>enumType</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> parameter is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Enum.GetNames(Type)
- uid: System.Enum.GetUnderlyingType(System.Type)
  commentId: M:System.Enum.GetUnderlyingType(System.Type)
  id: GetUnderlyingType(System.Type)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.GetUnderlyingType(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUnderlyingType
    path: src/mscorlib/src/System/Enum.cs
    startLine: 488
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the underlying type of the specified enumeration.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static Type GetUnderlyingType(Type enumType)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function GetUnderlyingType(enumType As Type) As Type
    parameters:
    - id: enumType
      type: System.Type
      description: "\n<p>The enumeration whose underlying type will be retrieved.</p>\n"
    return:
      type: System.Type
      description: "\n<p>The underlying type of <em>enumType</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Enum.GetTypeCode
    commentId: M:System.Enum.GetTypeCode
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Enum.GetUnderlyingType(Type)
- uid: System.Enum.GetValues(System.Type)
  commentId: M:System.Enum.GetValues(System.Type)
  id: GetValues(System.Type)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.GetValues(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValues
    path: src/mscorlib/src/System/Enum.cs
    startLine: 499
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves an array of the values of the constants in a specified enumeration.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static Array GetValues(Type enumType)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function GetValues(enumType As Type) As Array
    parameters:
    - id: enumType
      type: System.Type
      description: "\n<p>An enumeration type. </p>\n"
    return:
      type: System.Array
      description: "\n<p>An array that contains the values of the constants in <em>enumType</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method is invoked by reflection in a reflection-only context, </p>\n<p>-or-</p>\n<p>\n<em>enumType</em> is a type from an assembly loaded in a reflection-only context.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Enum.GetValues(Type)
- uid: System.Enum.HasFlag(System.Enum)
  commentId: M:System.Enum.HasFlag(System.Enum)
  id: HasFlag(System.Enum)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.HasFlag(System.Enum)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HasFlag
    path: src/mscorlib/src/System/Enum.cs
    startLine: 870
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether one or more bit fields are set in the current instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public bool HasFlag(Enum flag)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function HasFlag(flag As  Enum) As Boolean
    parameters:
    - id: flag
      type: System.Enum
      description: "\n<p>An enumeration value.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the bit field or bit fields that are set in <em>flag</em> are also set in the current instance; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>flag</em> is a different type than the current instance.</p>\n"
  seealso:
  - type: System.FlagsAttribute
    commentId: T:System.FlagsAttribute
  - type: System.Enum.Equals(System.Object)
    commentId: M:System.Enum.Equals(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Enum.HasFlag(Enum)
- uid: System.Enum.IsDefined(System.Type,System.Object)
  commentId: M:System.Enum.IsDefined(System.Type,System.Object)
  id: IsDefined(System.Type,System.Object)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.IsDefined(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsDefined
    path: src/mscorlib/src/System/Enum.cs
    startLine: 591
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an indication whether a constant with a specified value exists in a specified enumeration.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static bool IsDefined(Type enumType, object value)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function IsDefined(enumType As Type, value As Object) As Boolean
    parameters:
    - id: enumType
      type: System.Type
      description: "\n<p>An enumeration type. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value or name of a constant in <em>enumType</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a constant in <em>enumType</em> has a value equal to <em>value</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <strong>Enum</strong>.</p>\n<p>-or- </p>\n<p>The type of <em>value</em> is an enumeration, but it is not an enumeration of type <em>enumType</em>.</p>\n<p>-or- </p>\n<p>The type of <em>value</em> is not an underlying type of <em>enumType</em>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>value</em> is not type <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Enum.GetName(System.Type,System.Object)
    commentId: M:System.Enum.GetName(System.Type,System.Object)
  - type: System.Enum.GetNames(System.Type)
    commentId: M:System.Enum.GetNames(System.Type)
  - type: System.Enum.GetValues(System.Type)
    commentId: M:System.Enum.GetValues(System.Type)
  - type: System.Enum.HasFlag(System.Enum)
    commentId: M:System.Enum.HasFlag(System.Enum)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Enum.IsDefined(Type, Object)
- uid: System.Enum.Parse(System.Type,System.String)
  commentId: M:System.Enum.Parse(System.Type,System.String)
  id: Parse(System.Type,System.String)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.Parse(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Enum.cs
    startLine: 338
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static object Parse(Type enumType, string value)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function Parse(enumType As Type, value As String) As Object
    parameters:
    - id: enumType
      type: System.Type
      description: "\n<p>An enumeration type. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>A string containing the name or value to convert. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object of type <em>enumType</em> whose value is represented by <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is either an empty string or only contains white space.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is a name, but not one of the named constants defined for the enumeration. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is outside the range of the underlying type of <em>enumType</em>.</p>\n"
  seealso:
  - type: System.Enum.IsDefined(System.Type,System.Object)
    commentId: M:System.Enum.IsDefined(System.Type,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Enum.Parse(Type, String)
- uid: System.Enum.Parse(System.Type,System.String,System.Boolean)
  commentId: M:System.Enum.Parse(System.Type,System.String,System.Boolean)
  id: Parse(System.Type,System.String,System.Boolean)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.Parse(System.Type, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Enum.cs
    startLine: 344
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static object Parse(Type enumType, string value, bool ignoreCase)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function Parse(enumType As Type, value As String, ignoreCase As Boolean) As Object
    parameters:
    - id: enumType
      type: System.Type
      description: "\n<p>An enumeration type. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>A string containing the name or value to convert. </p>\n"
    - id: ignoreCase
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to ignore case; <strong>false</strong> to regard case. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object of type <em>enumType</em> whose value is represented by <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is either an empty string (\"\") or only contains white space.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is a name, but not one of the named constants defined for the enumeration. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>value</em> is outside the range of the underlying type of <em>enumType</em>.</p>\n"
  seealso:
  - type: System.Enum.IsDefined(System.Type,System.Object)
    commentId: M:System.Enum.IsDefined(System.Type,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Enum.Parse(Type, String, Boolean)
- uid: System.Enum.System#IConvertible#GetTypeCode
  commentId: M:System.Enum.System#IConvertible#GetTypeCode
  id: System#IConvertible#GetTypeCode
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.GetTypeCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.GetTypeCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 803
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: TypeCode IConvertible.GetTypeCode()
    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode
    return:
      type: System.TypeCode
  implements:
  - System.IConvertible.GetTypeCode
  name.vb: System.IConvertible.GetTypeCode()
  nameWithType: Enum.IConvertible.GetTypeCode()
  nameWithType.vb: Enum.System.IConvertible.GetTypeCode()
- uid: System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToBoolean(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToBoolean
    path: src/mscorlib/src/System/Enum.cs
    startLine: 946
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a Boolean value based on the underlying type.</p>\n"
  syntax:
    content: bool IConvertible.ToBoolean(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>This member always throws an exception.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToBoolean(System.IFormatProvider)
  name.vb: System.IConvertible.ToBoolean(IFormatProvider)
  nameWithType: Enum.IConvertible.ToBoolean(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToByte(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToByte
    path: src/mscorlib/src/System/Enum.cs
    startLine: 964
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to an 8-bit unsigned integer based on the underlying type.</p>\n"
  syntax:
    content: byte IConvertible.ToByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.Byte
      description: "\n<p>The converted value.</p>\n"
  implements:
  - System.IConvertible.ToByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToByte(IFormatProvider)
  nameWithType: Enum.IConvertible.ToByte(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToByte(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToChar(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToChar(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToChar
    path: src/mscorlib/src/System/Enum.cs
    startLine: 952
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a Unicode character based on the underlying type.</p>\n"
  syntax:
    content: char IConvertible.ToChar(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.Char
      description: "\n<p>This member always throws an exception.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToChar(System.IFormatProvider)
  name.vb: System.IConvertible.ToChar(IFormatProvider)
  nameWithType: Enum.IConvertible.ToChar(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToChar(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToDateTime(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDateTime
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1024
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> based on the underlying type.</p>\n"
  syntax:
    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.DateTime
      description: "\n<p>This member always throws an exception.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToDateTime(System.IFormatProvider)
  name.vb: System.IConvertible.ToDateTime(IFormatProvider)
  nameWithType: Enum.IConvertible.ToDateTime(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToDecimal(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDecimal
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1018
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> based on the underlying type.</p>\n"
  syntax:
    content: decimal IConvertible.ToDecimal(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>This member always throws an exception.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToDecimal(System.IFormatProvider)
  name.vb: System.IConvertible.ToDecimal(IFormatProvider)
  nameWithType: Enum.IConvertible.ToDecimal(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToDouble(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDouble
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1012
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a double-precision floating point number based on the underlying type.</p>\n"
  syntax:
    content: double IConvertible.ToDouble(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.Double
      description: "\n<p>This member always throws an exception.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToDouble(System.IFormatProvider)
  name.vb: System.IConvertible.ToDouble(IFormatProvider)
  nameWithType: Enum.IConvertible.ToDouble(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToDouble(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt16
    path: src/mscorlib/src/System/Enum.cs
    startLine: 970
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 16-bit signed integer based on the underlying type.</p>\n"
  syntax:
    content: short IConvertible.ToInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.Int16
      description: "\n<p>The converted value.</p>\n"
  implements:
  - System.IConvertible.ToInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt16(IFormatProvider)
  nameWithType: Enum.IConvertible.ToInt16(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToInt16(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt32
    path: src/mscorlib/src/System/Enum.cs
    startLine: 982
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 32-bit signed integer based on the underlying type.</p>\n"
  syntax:
    content: int IConvertible.ToInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The converted value.</p>\n"
  implements:
  - System.IConvertible.ToInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt32(IFormatProvider)
  nameWithType: Enum.IConvertible.ToInt32(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToInt32(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt64
    path: src/mscorlib/src/System/Enum.cs
    startLine: 994
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 64-bit signed integer based on the underlying type.</p>\n"
  syntax:
    content: long IConvertible.ToInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The converted value.</p>\n"
  implements:
  - System.IConvertible.ToInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt64(IFormatProvider)
  nameWithType: Enum.IConvertible.ToInt64(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToInt64(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToSByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToSByte
    path: src/mscorlib/src/System/Enum.cs
    startLine: 958
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to an 8-bit signed integer based on the underlying type.</p>\n"
  syntax:
    content: sbyte IConvertible.ToSByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.SByte
      description: "\n<p>The converted value.</p>\n"
  implements:
  - System.IConvertible.ToSByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToSByte(IFormatProvider)
  nameWithType: Enum.IConvertible.ToSByte(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToSByte(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToSingle(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToSingle
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1006
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a single-precision floating-point number based on the underlying type.</p>\n"
  syntax:
    content: float IConvertible.ToSingle(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.Single
      description: "\n<p>This member always throws an exception.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases. </p>\n"
  implements:
  - System.IConvertible.ToSingle(System.IFormatProvider)
  name.vb: System.IConvertible.ToSingle(IFormatProvider)
  nameWithType: Enum.IConvertible.ToSingle(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToSingle(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToString(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)
  id: System#IConvertible#ToString(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 815
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: >-
      [Obsolete("The provider argument is not used. Please use ToString().")]

      string IConvertible.ToString(IFormatProvider provider)
    content.vb: >-
      <Obsolete("The provider argument is not used. Please use ToString().")>

      Function System.IConvertible.ToString(provider As IFormatProvider) As String Implements IConvertible.ToString
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  implements:
  - System.IConvertible.ToString(System.IFormatProvider)
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The provider argument is not used. Please use ToString().
  name.vb: System.IConvertible.ToString(IFormatProvider)
  nameWithType: Enum.IConvertible.ToString(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToString(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToType(System.Type, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToType
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1030
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a specified type based on the underlying type.</p>\n"
  syntax:
    content: object IConvertible.ToType(Type type, IFormatProvider provider)
    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type to convert to. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The converted value.</p>\n"
  implements:
  - System.IConvertible.ToType(System.Type,System.IFormatProvider)
  name.vb: System.IConvertible.ToType(Type, IFormatProvider)
  nameWithType: Enum.IConvertible.ToType(Type, IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToType(Type, IFormatProvider)
- uid: System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToUInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt16
    path: src/mscorlib/src/System/Enum.cs
    startLine: 976
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 16-bit unsigned integer based on the underlying type.</p>\n"
  syntax:
    content: ushort IConvertible.ToUInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.UInt16
      description: "\n<p>The converted value.</p>\n"
  implements:
  - System.IConvertible.ToUInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt16(IFormatProvider)
  nameWithType: Enum.IConvertible.ToUInt16(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToUInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt32
    path: src/mscorlib/src/System/Enum.cs
    startLine: 988
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 32-bit unsigned integer based on the underlying type.</p>\n"
  syntax:
    content: uint IConvertible.ToUInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.UInt32
      description: "\n<p>The converted value.</p>\n"
  implements:
  - System.IConvertible.ToUInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt32(IFormatProvider)
  nameWithType: Enum.IConvertible.ToUInt32(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)
  commentId: M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IConvertible.ToUInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt64
    path: src/mscorlib/src/System/Enum.cs
    startLine: 1000
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the current value to a 64-bit unsigned integer based on the underlying type.</p>\n"
  syntax:
    content: ulong IConvertible.ToUInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information.</p>\n"
    return:
      type: System.UInt64
      description: "\n<p>The converted value.</p>\n"
  implements:
  - System.IConvertible.ToUInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt64(IFormatProvider)
  nameWithType: Enum.IConvertible.ToUInt64(IFormatProvider)
  nameWithType.vb: Enum.System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)
  commentId: M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.System.IFormattable.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IFormattable.ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 821
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: >-
      [Obsolete("The provider argument is not used. Please use ToString(String).")]

      string IFormattable.ToString(string format, IFormatProvider provider)
    content.vb: >-
      <Obsolete("The provider argument is not used. Please use ToString(String).")>

      Function System.IFormattable.ToString(format As String, provider As IFormatProvider) As String Implements IFormattable.ToString
    parameters:
    - id: format
      type: System.String
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The provider argument is not used. Please use ToString(String).
  name.vb: System.IFormattable.ToString(String, IFormatProvider)
  nameWithType: Enum.IFormattable.ToString(String, IFormatProvider)
  nameWithType.vb: Enum.System.IFormattable.ToString(String, IFormatProvider)
- uid: System.Enum.ToObject(System.Type,System.Object)
  commentId: M:System.Enum.ToObject(System.Type,System.Object)
  id: ToObject(System.Type,System.Object)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.ToObject(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToObject
    path: src/mscorlib/src/System/Enum.cs
    startLine: 543
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the specified object with an integer value to an enumeration member.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static object ToObject(Type enumType, object value)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function ToObject(enumType As Type, value As Object) As Object
    parameters:
    - id: enumType
      type: System.Type
      description: "\n<p>The enumeration type to return. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value convert to an enumeration member. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An enumeration object whose value is <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>enumType</em> is not an <xref href=\"System.Enum\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is not type <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Enum.IsDefined(System.Type,System.Object)
    commentId: M:System.Enum.IsDefined(System.Type,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Enum.ToObject(Type, Object)
- uid: System.Enum.ToString
  commentId: M:System.Enum.ToString
  id: ToString
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Enum.cs
    startLine: 789
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to its equivalent string representation.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of the value of this instance.</p>\n"
  overridden: System.ValueType.ToString
  seealso:
  - type: System.Enum.Format(System.Type,System.Object,System.String)
    commentId: M:System.Enum.Format(System.Type,System.Object,System.String)
  - type: System.Enum.Parse(System.Type,System.String)
    commentId: M:System.Enum.Parse(System.Type,System.String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: Enum.ToString()
- uid: System.Enum.ToString(System.String)
  commentId: M:System.Enum.ToString(System.String)
  id: ToString(System.String)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.ToString(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Enum.cs
    startLine: 845
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to its equivalent string representation using the specified format.</p>\n"
  syntax:
    content: public string ToString(string format)
    content.vb: Public Function ToString(format As String) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A format string. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the value of this instance as specified by <em>format</em>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> contains an invalid specification. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>format</em> equals \"X\", but the enumeration type is unknown.</p>\n"
  seealso:
  - type: System.Enum.Format(System.Type,System.Object,System.String)
    commentId: M:System.Enum.Format(System.Type,System.Object,System.String)
  - type: System.Enum.Parse(System.Type,System.String)
    commentId: M:System.Enum.Parse(System.Type,System.String)
  - type: System.IFormattable.ToString(System.String,System.IFormatProvider)
    commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Enum.ToString(String)
- uid: System.Enum.TryParse``1(System.String,``0@)
  commentId: M:System.Enum.TryParse``1(System.String,``0@)
  id: TryParse``1(System.String,``0@)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.TryParse<TEnum>(System.String, out TEnum)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryParse
    path: src/mscorlib/src/System/Enum.cs
    startLine: 322
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.</p>\n"
  syntax:
    content: 'public static bool TryParse<TEnum>(string value, out TEnum result)where TEnum : struct'
    content.vb: Public Shared Function TryParse(Of TEnum As Structure)(value As String, ByRef result As TEnum) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string representation of the enumeration name or underlying value to convert.</p>\n"
    - id: result
      type: '{TEnum}'
      description: "\n<p>When this method returns, <em>result</em> contains an object of type <em>TEnum</em> whose value is represented by <em>value</em> if the parse operation succeeds. If the parse operation fails, <em>result</em> contains the default value of the underlying type of <em>TEnum</em>. Note that this value need not be a member of the <em>TEnum</em> enumeration. This parameter is passed uninitialized.</p>\n"
    typeParameters:
    - id: TEnum
      description: "\n<p>The enumeration type to which to convert <em>value</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>TEnum</em> is not an enumeration type.</p>\n"
  seealso:
  - type: System.Enum.Parse(System.Type,System.String)
    commentId: M:System.Enum.Parse(System.Type,System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Enum.TryParse(Of TEnum)(System.String, ByRef TEnum)
  name.vb: TryParse(Of TEnum)(String, ByRef TEnum)
  nameWithType: Enum.TryParse<TEnum>(String, out TEnum)
  nameWithType.vb: Enum.TryParse(Of TEnum)(String, ByRef TEnum)
- uid: System.Enum.TryParse``1(System.String,System.Boolean,``0@)
  commentId: M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)
  id: TryParse``1(System.String,System.Boolean,``0@)
  parent: System.Enum
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Enum.TryParse<TEnum>(System.String, System.Boolean, out TEnum)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Enum.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryParse
    path: src/mscorlib/src/System/Enum.cs
    startLine: 327
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.</p>\n"
  syntax:
    content: 'public static bool TryParse<TEnum>(string value, bool ignoreCase, out TEnum result)where TEnum : struct'
    content.vb: Public Shared Function TryParse(Of TEnum As Structure)(value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string representation of the enumeration name or underlying value to convert.</p>\n"
    - id: ignoreCase
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to ignore case; <strong>false</strong> to consider case.</p>\n"
    - id: result
      type: '{TEnum}'
      description: "\n<p>When this method returns, <em>result</em> contains an object of type <em>TEnum</em> whose value is represented by <em>value</em> if the parse operation succeeds. If the parse operation fails, <em>result</em> contains the default value of the underlying type of <em>TEnum</em>. Note that this value need not be a member of the <em>TEnum</em> enumeration. This parameter is passed uninitialized.</p>\n"
    typeParameters:
    - id: TEnum
      description: "\n<p>The enumeration type to which to convert <em>value</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>TEnum</em> is not an enumeration type.</p>\n"
  seealso:
  - type: System.Enum.Parse(System.Type,System.String,System.Boolean)
    commentId: M:System.Enum.Parse(System.Type,System.String,System.Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Enum.TryParse(Of TEnum)(System.String, System.Boolean, ByRef TEnum)
  name.vb: TryParse(Of TEnum)(String, Boolean, ByRef TEnum)
  nameWithType: Enum.TryParse<TEnum>(String, Boolean, out TEnum)
  nameWithType.vb: Enum.TryParse(Of TEnum)(String, Boolean, ByRef TEnum)
references:
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.ValueType
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ValueType
  nameWithType: ValueType
  commentId: T:System.ValueType
- uid: System.IComparable
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.IComparable
  nameWithType: IComparable
  commentId: T:System.IComparable
- uid: System.IConvertible
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible
  nameWithType: IConvertible
  commentId: T:System.IConvertible
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.IFormattable
  nameWithType: IFormattable
  commentId: T:System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: "XXX"
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: "XXX"
    fullName: System.IComparable.CompareTo
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: "XXX"
    fullName: System.IComparable.CompareTo
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IComparable.CompareTo(Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: "XXX"
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: "XXX"
    fullName: System.ValueType.Equals
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: "XXX"
    fullName: System.ValueType.Equals
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: ValueType.Equals(Object)
  commentId: M:System.ValueType.Equals(System.Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Type
  nameWithType: Type
  commentId: T:System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: "XXX"
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: "XXX"
    fullName: System.ValueType.GetHashCode
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: "XXX"
    fullName: System.ValueType.GetHashCode
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: ValueType.GetHashCode()
  commentId: M:System.ValueType.GetHashCode
- uid: System.String[]
  name: "XXX"
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: String[]
  nameWithType.vb: String()
- uid: System.Array
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Array
  nameWithType: Array
  commentId: T:System.Array
- uid: System.Enum
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Enum
  nameWithType: Enum
  commentId: T:System.Enum
- uid: System.IConvertible.GetTypeCode
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.GetTypeCode()
  spec.csharp:
  - uid: System.IConvertible.GetTypeCode
    name: "XXX"
    fullName: System.IConvertible.GetTypeCode
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.GetTypeCode
    name: "XXX"
    fullName: System.IConvertible.GetTypeCode
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.GetTypeCode()
  commentId: M:System.IConvertible.GetTypeCode
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.TypeCode
  nameWithType: TypeCode
  commentId: T:System.TypeCode
- uid: System.IConvertible.ToBoolean(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToBoolean
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToBoolean
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToBoolean(IFormatProvider)
  commentId: M:System.IConvertible.ToBoolean(System.IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.IFormatProvider
  nameWithType: IFormatProvider
  commentId: T:System.IFormatProvider
- uid: System.IConvertible.ToByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToByte
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToByte
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToByte(IFormatProvider)
  commentId: M:System.IConvertible.ToByte(System.IFormatProvider)
- uid: System.Byte
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Byte
  nameWithType: Byte
  commentId: T:System.Byte
- uid: System.IConvertible.ToChar(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToChar(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToChar
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToChar
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToChar(IFormatProvider)
  commentId: M:System.IConvertible.ToChar(System.IFormatProvider)
- uid: System.Char
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Char
  nameWithType: Char
  commentId: T:System.Char
- uid: System.IConvertible.ToDateTime(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToDateTime
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToDateTime
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToDateTime(IFormatProvider)
  commentId: M:System.IConvertible.ToDateTime(System.IFormatProvider)
- uid: System.DateTime
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.DateTime
  nameWithType: DateTime
  commentId: T:System.DateTime
- uid: System.IConvertible.ToDecimal(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToDecimal
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToDecimal
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToDecimal(IFormatProvider)
  commentId: M:System.IConvertible.ToDecimal(System.IFormatProvider)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Decimal
  nameWithType: Decimal
  commentId: T:System.Decimal
- uid: System.IConvertible.ToDouble(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToDouble(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToDouble
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToDouble
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToDouble(IFormatProvider)
  commentId: M:System.IConvertible.ToDouble(System.IFormatProvider)
- uid: System.Double
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Double
  nameWithType: Double
  commentId: T:System.Double
- uid: System.IConvertible.ToInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToInt16
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToInt16
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToInt16(IFormatProvider)
  commentId: M:System.IConvertible.ToInt16(System.IFormatProvider)
- uid: System.Int16
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int16
  nameWithType: Int16
  commentId: T:System.Int16
- uid: System.IConvertible.ToInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToInt32
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToInt32
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToInt32(IFormatProvider)
  commentId: M:System.IConvertible.ToInt32(System.IFormatProvider)
- uid: System.IConvertible.ToInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToInt64
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToInt64
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToInt64(IFormatProvider)
  commentId: M:System.IConvertible.ToInt64(System.IFormatProvider)
- uid: System.Int64
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int64
  nameWithType: Int64
  commentId: T:System.Int64
- uid: System.IConvertible.ToSByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToSByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToSByte
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToSByte
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToSByte(IFormatProvider)
  commentId: M:System.IConvertible.ToSByte(System.IFormatProvider)
- uid: System.SByte
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.SByte
  nameWithType: SByte
  commentId: T:System.SByte
- uid: System.IConvertible.ToSingle(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToSingle(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToSingle
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToSingle
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToSingle(IFormatProvider)
  commentId: M:System.IConvertible.ToSingle(System.IFormatProvider)
- uid: System.Single
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Single
  nameWithType: Single
  commentId: T:System.Single
- uid: System.IConvertible.ToString(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToString(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToString
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToString
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToString(IFormatProvider)
  commentId: M:System.IConvertible.ToString(System.IFormatProvider)
- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToType
  - name: "XXX"
    fullName: (
  - uid: System.Type
    name: "XXX"
    fullName: System.Type
  - name: 'XXX '
    fullName: ', '
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToType
  - name: "XXX"
    fullName: (
  - uid: System.Type
    name: "XXX"
    fullName: System.Type
  - name: 'XXX '
    fullName: ', '
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToType(Type, IFormatProvider)
  commentId: M:System.IConvertible.ToType(System.Type,System.IFormatProvider)
- uid: System.IConvertible.ToUInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToUInt16
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToUInt16
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToUInt16(IFormatProvider)
  commentId: M:System.IConvertible.ToUInt16(System.IFormatProvider)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.UInt16
  nameWithType: UInt16
  commentId: T:System.UInt16
- uid: System.IConvertible.ToUInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToUInt32
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToUInt32
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToUInt32(IFormatProvider)
  commentId: M:System.IConvertible.ToUInt32(System.IFormatProvider)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.UInt32
  nameWithType: UInt32
  commentId: T:System.UInt32
- uid: System.IConvertible.ToUInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: "XXX"
  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToUInt64
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: "XXX"
    fullName: System.IConvertible.ToUInt64
  - name: "XXX"
    fullName: (
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IConvertible.ToUInt64(IFormatProvider)
  commentId: M:System.IConvertible.ToUInt64(System.IFormatProvider)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.UInt64
  nameWithType: UInt64
  commentId: T:System.UInt64
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: "XXX"
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: "XXX"
    fullName: System.IFormattable.ToString
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: "XXX"
    fullName: System.IFormattable.ToString
  - name: "XXX"
    fullName: (
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.IFormatProvider
    name: "XXX"
    fullName: System.IFormatProvider
  - name: "XXX"
    fullName: )
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: "XXX"
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: "XXX"
    fullName: System.ValueType.ToString
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: "XXX"
    fullName: System.ValueType.ToString
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: ValueType.ToString()
  commentId: M:System.ValueType.ToString
- uid: '{TEnum}'
  definition: TEnum
  name: "XXX"
  fullName: TEnum
  nameWithType: TEnum
  commentId: '!:TEnum'
- uid: TEnum
  isExternal: false
  name: "XXX"
  fullName: TEnum
  nameWithType: TEnum
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.FormatException
  nameWithType: FormatException
  commentId: T:System.FormatException
- uid: System.OverflowException
  isExternal: false
  name: "XXX"
  fullName: System.OverflowException
  nameWithType: OverflowException
  commentId: T:System.OverflowException
- uid: System.InvalidCastException
  isExternal: false
  name: "XXX"
  fullName: System.InvalidCastException
  nameWithType: InvalidCastException
  commentId: T:System.InvalidCastException

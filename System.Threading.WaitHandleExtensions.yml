items:
- uid: System.Threading.WaitHandleExtensions
  commentId: T:System.Threading.WaitHandleExtensions
  id: WaitHandleExtensions
  parent: System.Threading
  children:
  - System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  - System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.WaitHandleExtensions
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitHandleExtensions
    path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs
    startLine: 11
  assemblies:
  - System.Runtime.Handles
  namespace: System.Threading
  summary: "\n<p>Provides convenience methods to for working with a safe handle for a wait handle. </p>\n"
  syntax:
    content: public class WaitHandleExtensions
    content.vb: Public Class WaitHandleExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: WaitHandleExtensions
- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  id: GetSafeWaitHandle(System.Threading.WaitHandle)
  isExtensionMethod: true
  parent: System.Threading.WaitHandleExtensions
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetSafeWaitHandle
    path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs
    startLine: 18
  assemblies:
  - System.Runtime.Handles
  namespace: System.Threading
  summary: "\n<p>Gets the safe handle for a native operating system wait handle. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static SafeWaitHandle GetSafeWaitHandle(this WaitHandle waitHandle)
    content.vb: >-
      <SecurityCritical>

      <ExtensionAttribute>

      Public Shared Function GetSafeWaitHandle(waitHandle As WaitHandle) As SafeWaitHandle
    parameters:
    - id: waitHandle
      type: System.Threading.WaitHandle
      description: "\n<p>A native operating system handle. </p>\n"
    return:
      type: Microsoft.Win32.SafeHandles.SafeWaitHandle
      description: "\n<p>The safe wait handle that wraps the native operating system wait handle. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>waitHandle</em> is <strong>null</strong>. </p>\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)
- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  id: SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  isExtensionMethod: true
  parent: System.Threading.WaitHandleExtensions
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetSafeWaitHandle
    path: src/mscorlib/src/System/Threading/WaitHandleExtensions.cs
    startLine: 34
  assemblies:
  - System.Runtime.Handles
  namespace: System.Threading
  summary: "\n<p>Sets a safe handle for a native operating system wait handle. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void SetSafeWaitHandle(this WaitHandle waitHandle, SafeWaitHandle value)
    content.vb: >-
      <SecurityCritical>

      <ExtensionAttribute>

      Public Shared Sub SetSafeWaitHandle(waitHandle As WaitHandle, value As SafeWaitHandle)
    parameters:
    - id: waitHandle
      type: System.Threading.WaitHandle
      description: "\n<p>A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource. </p>\n"
    - id: value
      type: Microsoft.Win32.SafeHandles.SafeWaitHandle
      description: "\n<p>The safe handle to wrap the operating system handle. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>waitHandle</em> is <strong>null</strong>. </p>\n"
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
references:
- uid: System.Threading
  isExternal: false
  name: "XXX"
  fullName: System.Threading
  nameWithType: System.Threading
  commentId: N:System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: "XXX"
  fullName: System.Threading.WaitHandle
  nameWithType: WaitHandle
  commentId: T:System.Threading.WaitHandle
- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: "XXX"
  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle
  nameWithType: SafeWaitHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeWaitHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: "XXX"
  fullName: Microsoft.Win32.SafeHandles
  nameWithType: Microsoft.Win32.SafeHandles
  commentId: N:Microsoft.Win32.SafeHandles
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException

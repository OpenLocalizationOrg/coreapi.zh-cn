items:
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2
  commentId: T:System.Runtime.CompilerServices.ConditionalWeakTable`2
  id: ConditionalWeakTable`2
  parent: System.Runtime.CompilerServices
  children:
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)
  - System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConditionalWeakTable
    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
    startLine: 71
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Enables compilers to dynamically attach object fields to managed objects.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public sealed class ConditionalWeakTable<TKey, TValue>
          where TKey : class where TValue : class
    content.vb: >-
      <ComVisible(False)>

      Public NotInheritable Class ConditionalWeakTable(Of TKey As Class, TValue As Class)
    typeParameters:
    - id: TKey
      description: "\n<p>The reference type to which the field is attached. </p>\n"
    - id: TValue
      description: "\n<p>The field's type. This must be a reference type.</p>\n"
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue)
  name.vb: ConditionalWeakTable(Of TKey, TValue)
  nameWithType: ConditionalWeakTable<TKey, TValue>
  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor
  id: '#ctor'
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.ConditionalWeakTable()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
    startLine: 78
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public ConditionalWeakTable()
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).ConditionalWeakTable()
  nameWithType: ConditionalWeakTable<TKey, TValue>.ConditionalWeakTable()
  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).ConditionalWeakTable()
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
    startLine: 125
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Adds a key to the table.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void Add(TKey key, TValue value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub Add(key As TKey, value As TValue)
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to add. <em>key</em> represents the object to which the property is attached.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>The key's property value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>key</em> already exists.</p>\n"
  seealso:
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).Add(TKey, TValue)
  nameWithType: ConditionalWeakTable<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).Add(TKey, TValue)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize
  id: Finalize
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.Finalize()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Finalize
    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
    startLine: 590
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      protected void Finalize()
    content.vb: >-
      <SecuritySafeCritical>

      Protected Sub Finalize
  seealso:
  - type: System.Object.Finalize
    commentId: M:System.Object.Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).Finalize()
  nameWithType: ConditionalWeakTable<TKey, TValue>.Finalize()
  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).Finalize()
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  id: GetOrCreateValue(`0)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.GetOrCreateValue(TKey)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetOrCreateValue
    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
    startLine: 273
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key. </p>\n"
  syntax:
    content: public TValue GetOrCreateValue(TKey key)
    content.vb: Public Function GetOrCreateValue(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to search for. <em>key</em> represents the object to which the property is attached.</p>\n"
    return:
      type: '{TValue}'
      description: "\n<p>The value that corresponds to <em>key</em>, if <em>key</em> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <em>TValue</em> generic type parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MissingMemberException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The class that represents the table's value does not define a default constructor.</p>\n"
  seealso:
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).GetOrCreateValue(TKey)
  nameWithType: ConditionalWeakTable<TKey, TValue>.GetOrCreateValue(TKey)
  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).GetOrCreateValue(TKey)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  id: GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.GetValue(TKey, System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.CreateValueCallback)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
    startLine: 221
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public TValue GetValue(TKey key, ConditionalWeakTable<TKey, TValue>.CreateValueCallback createValueCallback)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function GetValue(key As TKey, createValueCallback As ConditionalWeakTable(Of TKey, TValue).CreateValueCallback) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to search for. <em>key</em> represents the object to which the property is attached.</p>\n"
    - id: createValueCallback
      type: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
      description: "\n<p>A delegate to a method that can create a value for the given <em>key</em>. It has a single parameter of type <em>TKey</em>, and returns a value of type <em>TValue</em>.</p>\n"
    return:
      type: '{TValue}'
      description: "\n<p>The value attached to <em>key</em>, if <em>key</em> already exists in the table; otherwise, the new value returned by the <em>createValueCallback</em> delegate.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> or <em>createValueCallback</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
    commentId: T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).GetValue(TKey, System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).CreateValueCallback)
  name.vb: GetValue(TKey, ConditionalWeakTable(Of TKey, TValue).CreateValueCallback)
  nameWithType: ConditionalWeakTable<TKey, TValue>.GetValue(TKey, ConditionalWeakTable<TKey, TValue>.CreateValueCallback)
  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).GetValue(TKey, ConditionalWeakTable(Of TKey, TValue).CreateValueCallback)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)
  id: Remove(`0)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
    startLine: 160
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Removes a key and its value from the table.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public bool Remove(TKey key)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Remove(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to remove. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key is found and removed; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).Remove(TKey)
  nameWithType: ConditionalWeakTable<TKey, TValue>.Remove(TKey)
  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).Remove(TKey)
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryGetValue
    path: src/mscorlib/src/System/Runtime/CompilerServices/ConditionalWeakTable.cs
    startLine: 101
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Gets the value of the specified key.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public bool TryGetValue(TKey key, out TValue value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key that represents an object with an attached property.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>When this method returns, contains the attached property value. If <em>key</em> is not found, <em>value</em> contains the default value.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>key</em> is found; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)
  - type: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
    commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.ConditionalWeakTable(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
  nameWithType: ConditionalWeakTable<TKey, TValue>.TryGetValue(TKey, out TValue)
  nameWithType.vb: ConditionalWeakTable(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
references:
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.CompilerServices
  nameWithType: System.Runtime.CompilerServices
  commentId: N:System.Runtime.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: '{TKey}'
  definition: TKey
  name: "XXX"
  fullName: TKey
  nameWithType: TKey
  commentId: '!:TKey'
- uid: '{TValue}'
  definition: TValue
  name: "XXX"
  fullName: TValue
  nameWithType: TValue
  commentId: '!:TValue'
- uid: TKey
  isExternal: false
  name: "XXX"
  fullName: TKey
  nameWithType: TKey
- uid: TValue
  isExternal: false
  name: "XXX"
  fullName: TValue
  nameWithType: TValue
- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: "XXX"
  fullName: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback<>
  fullname.vb: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback(Of )
  name.vb: ConditionalWeakTable.CreateValueCallback(Of )
  spec.csharp:
  - uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
    name: "XXX"
    fullName: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback
  - name: "<"
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
    name: "XXX"
    fullName: System.Runtime.CompilerServices.ConditionalWeakTable.CreateValueCallback
  - name: 'XXX '
    fullName: '(Of '
  - name: "XXX"
    fullName: )
  nameWithType: ConditionalWeakTable.CreateValueCallback<>
  nameWithType.vb: ConditionalWeakTable.CreateValueCallback(Of )
  commentId: T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.MissingMethodException
  isExternal: false
  name: "XXX"
  fullName: System.MissingMethodException
  nameWithType: MissingMethodException
  commentId: T:System.MissingMethodException

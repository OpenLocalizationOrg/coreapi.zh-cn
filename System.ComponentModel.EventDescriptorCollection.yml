items:
- uid: System.ComponentModel.EventDescriptorCollection
  commentId: T:System.ComponentModel.EventDescriptorCollection
  id: EventDescriptorCollection
  parent: System.ComponentModel
  children:
  - System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])
  - System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)
  - System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)
  - System.ComponentModel.EventDescriptorCollection.Clear
  - System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)
  - System.ComponentModel.EventDescriptorCollection.Count
  - System.ComponentModel.EventDescriptorCollection.Empty
  - System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)
  - System.ComponentModel.EventDescriptorCollection.GetEnumerator
  - System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)
  - System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)
  - System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)
  - System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])
  - System.ComponentModel.EventDescriptorCollection.Item(System.Int32)
  - System.ComponentModel.EventDescriptorCollection.Item(System.String)
  - System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)
  - System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)
  - System.ComponentModel.EventDescriptorCollection.Sort
  - System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)
  - System.ComponentModel.EventDescriptorCollection.Sort(System.String[])
  - System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
  - System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized
  - System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot
  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)
  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)
  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)
  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize
  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly
  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)
  - System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventDescriptorCollection
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 16
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Represents a collection of <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  syntax:
    content: 'public class EventDescriptorCollection : IList, ICollection, IEnumerable'
    content.vb: >-
      Public Class EventDescriptorCollection
          Implements IList, ICollection, IEnumerable
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: EventDescriptorCollection
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
- uid: System.ComponentModel.EventDescriptorCollection.Empty
  commentId: F:System.ComponentModel.EventDescriptorCollection.Empty
  id: Empty
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Empty
  type: Field
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 29
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Specifies an empty collection to use, rather than creating a new one with no items. This <strong>static</strong> field is read-only.</p>\n"
  syntax:
    content: public static readonly EventDescriptorCollection Empty
    content.vb: Public Shared ReadOnly Empty As EventDescriptorCollection
    return:
      type: System.ComponentModel.EventDescriptorCollection
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: EventDescriptorCollection.Empty
- uid: System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])
  commentId: M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])
  id: '#ctor(System.ComponentModel.EventDescriptor[])'
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.EventDescriptorCollection(System.ComponentModel.EventDescriptor[])
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 36
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> class with the given array of <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  syntax:
    content: public EventDescriptorCollection(EventDescriptor[] events)
    content.vb: Public Sub New(events As EventDescriptor())
    parameters:
    - id: events
      type: System.ComponentModel.EventDescriptor[]
      description: "\n<p>An array of type <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that provides the events for this collection. </p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ComponentModel.EventDescriptorCollection.EventDescriptorCollection(System.ComponentModel.EventDescriptor())
  name.vb: EventDescriptorCollection(EventDescriptor())
  nameWithType: EventDescriptorCollection.EventDescriptorCollection(EventDescriptor[])
  nameWithType.vb: EventDescriptorCollection.EventDescriptorCollection(EventDescriptor())
- uid: System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)
  commentId: M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)
  id: '#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)'
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.EventDescriptorCollection(System.ComponentModel.EventDescriptor[], System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 55
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> class with the given array of <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects. The collection is optionally read-only.</p>\n"
  syntax:
    content: public EventDescriptorCollection(EventDescriptor[] events, bool readOnly)
    content.vb: Public Sub New(events As EventDescriptor(), readOnly As Boolean)
    parameters:
    - id: events
      type: System.ComponentModel.EventDescriptor[]
      description: "\n<p>An array of type <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that provides the events for this collection. </p>\n"
    - id: readOnly
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to specify a read-only collection; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ComponentModel.EventDescriptorCollection.EventDescriptorCollection(System.ComponentModel.EventDescriptor(), System.Boolean)
  name.vb: EventDescriptorCollection(EventDescriptor(), Boolean)
  nameWithType: EventDescriptorCollection.EventDescriptorCollection(EventDescriptor[], Boolean)
  nameWithType.vb: EventDescriptorCollection.EventDescriptorCollection(EventDescriptor(), Boolean)
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)
  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Add
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 480
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds an item to the collection.</p>\n"
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to add to the collection.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The position into which the new element was inserted.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  implements:
  - System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  nameWithType: EventDescriptorCollection.IList.Add(Object)
  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.Add(Object)
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)
  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Contains
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 486
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Determines whether the collection contains a specific value.</p>\n"
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the collection.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is found in the collection; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  nameWithType: EventDescriptorCollection.IList.Contains(Object)
  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.Contains(Object)
- uid: System.ComponentModel.EventDescriptorCollection.Count
  commentId: P:System.ComponentModel.EventDescriptorCollection.Count
  id: Count
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Count
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 79
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the number of event descriptors in the collection.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of event descriptors in the collection.</p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: EventDescriptorCollection.Count
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IndexOf
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 492
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Determines the index of a specific item in the collection.</p>\n"
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the collection.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of <em>value</em> if found in the list; otherwise, -1.</p>\n"
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  nameWithType: EventDescriptorCollection.IList.IndexOf(Object)
  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.IndexOf(Object)
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Insert
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 498
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Inserts an item to the collection at the specified index.</p>\n"
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to insert into the collection.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  nameWithType: EventDescriptorCollection.IList.Insert(Int32, Object)
  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.Insert(Int32, Object)
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized
  commentId: P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 439
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether access to the collection is synchronized.</p>\n"
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to the collection is synchronized; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
  nameWithType: EventDescriptorCollection.ICollection.IsSynchronized
  nameWithType.vb: EventDescriptorCollection.System.Collections.ICollection.IsSynchronized
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot
  commentId: P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 448
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets an object that can be used to synchronize access to the collection.</p>\n"
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that can be used to synchronize access to the collection.</p>\n"
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
  nameWithType: EventDescriptorCollection.ICollection.SyncRoot
  nameWithType.vb: EventDescriptorCollection.System.Collections.ICollection.SyncRoot
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize
  commentId: P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsFixedSize
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 519
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether the collection has a fixed size.</p>\n"
  syntax:
    content: bool IList.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the collection has a fixed size; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsFixedSize
  nameWithType: EventDescriptorCollection.IList.IsFixedSize
  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.IsFixedSize
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly
  commentId: P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsReadOnly
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 510
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether the collection is read-only.</p>\n"
  syntax:
    content: bool IList.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the collection is read-only; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsReadOnly
  nameWithType: EventDescriptorCollection.IList.IsReadOnly
  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.IsReadOnly
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)
  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Remove
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 504
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes the first occurrence of a specific object from the collection.</p>\n"
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to remove from the collection.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  implements:
  - System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  nameWithType: EventDescriptorCollection.IList.Remove(Object)
  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.Remove(Object)
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)
  commentId: P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.this[]
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 457
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  syntax:
    content: object IList.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to get or set.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The element at the specified index.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0. </p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.ComponentModel.EventDescriptorCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IList.Item(System.Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.ComponentModel.EventDescriptorCollection.System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  nameWithType: EventDescriptorCollection.IList.Item[Int32]
  nameWithType.vb: EventDescriptorCollection.System.Collections.IList.Item(Int32)
- uid: System.ComponentModel.EventDescriptorCollection.Item(System.Int32)
  commentId: P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 91
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets the event with the specified index number.</p>\n"
  syntax:
    content: public virtual EventDescriptor this[int index] { get; }
    content.vb: Public Overridable ReadOnly Property Item(index As Integer) As EventDescriptor
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index number of the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to get or set. </p>\n"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified index number.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a valid index for <xref href=\"System.ComponentModel.EventDescriptorCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.ComponentModel.EventDescriptorCollection.Item(System.Int32)
  name.vb: Item(Int32)
  nameWithType: EventDescriptorCollection.Item[Int32]
  nameWithType.vb: EventDescriptorCollection.Item(Int32)
- uid: System.ComponentModel.EventDescriptorCollection.Item(System.String)
  commentId: P:System.ComponentModel.EventDescriptorCollection.Item(System.String)
  id: Item(System.String)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 109
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets the event with the specified name.</p>\n"
  syntax:
    content: public virtual EventDescriptor this[string name] { get; }
    content.vb: Public Overridable ReadOnly Property Item(name As String) As EventDescriptor
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to get or set. </p>\n"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified name, or <strong>null</strong> if the event does not exist.</p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.ComponentModel.EventDescriptorCollection.Item(System.String)
  name.vb: Item(String)
  nameWithType: EventDescriptorCollection.Item[String]
  nameWithType.vb: EventDescriptorCollection.Item(String)
- uid: System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)
  commentId: M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)
  id: Add(System.ComponentModel.EventDescriptor)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 120
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds an <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to the end of the collection.</p>\n"
  syntax:
    content: public int Add(EventDescriptor value)
    content.vb: Public Function Add(value As EventDescriptor) As Integer
    parameters:
    - id: value
      type: System.ComponentModel.EventDescriptor
      description: "\n<p>An <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to add to the collection. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The position of the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> within the collection.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventDescriptorCollection.Add(EventDescriptor)
- uid: System.ComponentModel.EventDescriptorCollection.Clear
  commentId: M:System.ComponentModel.EventDescriptorCollection.Clear
  id: Clear
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Clear()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 135
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes all objects from the collection.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  implements:
  - System.Collections.IList.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventDescriptorCollection.Clear()
- uid: System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)
  commentId: M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)
  id: Contains(System.ComponentModel.EventDescriptor)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 148
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the collection contains the given <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool Contains(EventDescriptor value)
    content.vb: Public Function Contains(value As EventDescriptor) As Boolean
    parameters:
    - id: value
      type: System.ComponentModel.EventDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to find within the collection. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the collection contains the <em>value</em> parameter given; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventDescriptorCollection.Contains(EventDescriptor)
- uid: System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)
  commentId: M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)
  id: Find(System.String,System.Boolean)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Find(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Find
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 209
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the description of the event with the specified name in the collection.</p>\n"
  syntax:
    content: public virtual EventDescriptor Find(string name, bool ignoreCase)
    content.vb: Public Overridable Function Find(name As String, ignoreCase As Boolean) As EventDescriptor
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the event to get from the collection. </p>\n"
    - id: ignoreCase
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if you want to ignore the case of the event; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified name, or <strong>null</strong> if the event does not exist.</p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: EventDescriptorCollection.Find(String, Boolean)
- uid: System.ComponentModel.EventDescriptorCollection.GetEnumerator
  commentId: M:System.ComponentModel.EventDescriptorCollection.GetEnumerator
  id: GetEnumerator
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 307
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets an enumerator for this <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An enumerator that implements <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.ComponentModel.EventDescriptor
    commentId: T:System.ComponentModel.EventDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventDescriptorCollection.GetEnumerator()
- uid: System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)
  commentId: M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)
  id: IndexOf(System.ComponentModel.EventDescriptor)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 242
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the index of the given <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int IndexOf(EventDescriptor value)
    content.vb: Public Function IndexOf(value As EventDescriptor) As Integer
    parameters:
    - id: value
      type: System.ComponentModel.EventDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to find within the collection. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the given <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> within the collection.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventDescriptorCollection.IndexOf(EventDescriptor)
- uid: System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)
  commentId: M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)
  id: Insert(System.Int32,System.ComponentModel.EventDescriptor)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Insert(System.Int32, System.ComponentModel.EventDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 250
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Inserts an <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to the collection at a specified index.</p>\n"
  syntax:
    content: public void Insert(int index, EventDescriptor value)
    content.vb: Public Sub Insert(index As Integer, value As EventDescriptor)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index within the collection in which to insert the <em>value</em> parameter. </p>\n"
    - id: value
      type: System.ComponentModel.EventDescriptor
      description: "\n<p>An <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to insert into the collection. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventDescriptorCollection.Insert(Int32, EventDescriptor)
- uid: System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)
  commentId: M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)
  id: InternalSort(System.Collections.IComparer)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InternalSort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 426
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>, using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected void InternalSort(IComparer sorter)
    content.vb: Protected Sub InternalSort(sorter As IComparer)
    parameters:
    - id: sorter
      type: System.Collections.IComparer
      description: "\n<p>A comparer to use to sort the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: EventDescriptorCollection.InternalSort(IComparer)
- uid: System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])
  commentId: M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])
  id: InternalSort(System.String[])
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InternalSort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 371
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</p>\n"
  syntax:
    content: protected void InternalSort(string[] names)
    content.vb: Protected Sub InternalSort(names As String())
    parameters:
    - id: names
      type: System.String[]
      description: "\n<p>An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.ComponentModel.EventDescriptorCollection.InternalSort(System.String())
  name.vb: InternalSort(String())
  nameWithType: EventDescriptorCollection.InternalSort(String[])
  nameWithType.vb: EventDescriptorCollection.InternalSort(String())
- uid: System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)
  commentId: M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)
  id: Remove(System.ComponentModel.EventDescriptor)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 269
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes the specified <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> from the collection.</p>\n"
  syntax:
    content: public void Remove(EventDescriptor value)
    content.vb: Public Sub Remove(value As EventDescriptor)
    parameters:
    - id: value
      type: System.ComponentModel.EventDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to remove from the collection. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventDescriptorCollection.Remove(EventDescriptor)
- uid: System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)
  commentId: M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 287
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> at the specified index from the collection.</p>\n"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index of the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to remove. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: EventDescriptorCollection.RemoveAt(Int32)
- uid: System.ComponentModel.EventDescriptorCollection.Sort
  commentId: M:System.ComponentModel.EventDescriptorCollection.Sort
  id: Sort
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Sort()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 326
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>, using the default sort for this collection, which is usually alphabetical.</p>\n"
  syntax:
    content: public virtual EventDescriptorCollection Sort()
    content.vb: Public Overridable Function Sort As EventDescriptorCollection
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "\n<p>The new <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: EventDescriptorCollection.Sort()
- uid: System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)
  commentId: M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 360
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>, using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual EventDescriptorCollection Sort(IComparer comparer)
    content.vb: Public Overridable Function Sort(comparer As IComparer) As EventDescriptorCollection
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>An <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> to use to sort the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "\n<p>The new <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: EventDescriptorCollection.Sort(IComparer)
- uid: System.ComponentModel.EventDescriptorCollection.Sort(System.String[])
  commentId: M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])
  id: Sort(System.String[])
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Sort(System.String[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 338
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>, given a specified sort order.</p>\n"
  syntax:
    content: public virtual EventDescriptorCollection Sort(string[] names)
    content.vb: Public Overridable Function Sort(names As String()) As EventDescriptorCollection
    parameters:
    - id: names
      type: System.String[]
      description: "\n<p>An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in the collection. </p>\n"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "\n<p>The new <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.EventDescriptorCollection.Sort(System.String())
  name.vb: Sort(String())
  nameWithType: EventDescriptorCollection.Sort(String[])
  nameWithType.vb: EventDescriptorCollection.Sort(String())
- uid: System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
  commentId: M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
  id: Sort(System.String[],System.Collections.IComparer)
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.Sort(System.String[], System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 349
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>, given a specified sort order and an <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual EventDescriptorCollection Sort(string[] names, IComparer comparer)
    content.vb: Public Overridable Function Sort(names As String(), comparer As IComparer) As EventDescriptorCollection
    parameters:
    - id: names
      type: System.String[]
      description: "\n<p>An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in the collection. </p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>An <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> to use to sort the <xref href=\"System.ComponentModel.EventDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "\n<p>The new <xref href=\"System.ComponentModel.EventDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.EventDescriptorCollection.Sort(System.String(), System.Collections.IComparer)
  name.vb: Sort(String(), IComparer)
  nameWithType: EventDescriptorCollection.Sort(String[], IComparer)
  nameWithType.vb: EventDescriptorCollection.Sort(String(), IComparer)
- uid: System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.ComponentModel.EventDescriptorCollection
  langs:
  - csharp
  - vb
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.CopyTo
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/EventDescriptorCollection.cs
    startLine: 154
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Copies the elements of the collection to an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at a particular <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> index.</p>\n"
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from collection. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  nameWithType: EventDescriptorCollection.ICollection.CopyTo(Array, Int32)
  nameWithType.vb: EventDescriptorCollection.System.Collections.ICollection.CopyTo(Array, Int32)
references:
- uid: System.ComponentModel
  isExternal: false
  name: "XXX"
  fullName: System.ComponentModel
  nameWithType: System.ComponentModel
  commentId: N:System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IList
  nameWithType: IList
  commentId: T:System.Collections.IList
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection
  nameWithType: ICollection
  commentId: T:System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerable
  nameWithType: IEnumerable
  commentId: T:System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: "XXX"
    fullName: System.Object.ToString
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.Equals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: "XXX"
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: "XXX"
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: "XXX"
    fullName: System.Object.GetType
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: "XXX"
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: "XXX"
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Queryable.AsQueryable()
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: ParallelEnumerable.AsParallel()
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Enumerable.Cast<TResult>()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: "XXX"
  fullName: System.Linq.Enumerable.OfType<TResult>()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
- uid: System
  isExternal: false
  name: "XXX"
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections
  nameWithType: System.Collections
  commentId: N:System.Collections
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Queryable.AsQueryable
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Queryable.AsQueryable(IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
- uid: System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.Queryable
  nameWithType: Queryable
  commentId: T:System.Linq.Queryable
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
- uid: System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.ParallelEnumerable
  nameWithType: ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
- uid: System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq.Enumerable
  nameWithType: Enumerable
  commentId: T:System.Linq.Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: "XXX"
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: "XXX"
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: "XXX"
    fullName: (
  - uid: System.Collections.IEnumerable
    name: "XXX"
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
- uid: System.Linq
  isExternal: false
  name: "XXX"
  fullName: System.Linq
  nameWithType: System.Linq
  commentId: N:System.Linq
- uid: System.ComponentModel.EventDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptorCollection
  nameWithType: EventDescriptorCollection
  commentId: T:System.ComponentModel.EventDescriptorCollection
- uid: System.ComponentModel.EventDescriptor[]
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptor[]
  fullname.vb: System.ComponentModel.EventDescriptor()
  name.vb: EventDescriptor()
  spec.csharp:
  - uid: System.ComponentModel.EventDescriptor
    name: "XXX"
    fullName: System.ComponentModel.EventDescriptor
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.ComponentModel.EventDescriptor
    name: "XXX"
    fullName: System.ComponentModel.EventDescriptor
  - name: "XXX"
    fullName: ()
  nameWithType: EventDescriptor[]
  nameWithType.vb: EventDescriptor()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: "XXX"
    fullName: System.Collections.IList.Add
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: "XXX"
    fullName: System.Collections.IList.Add
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IList.Add(Object)
  commentId: M:System.Collections.IList.Add(System.Object)
- uid: System.Int32
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: "XXX"
    fullName: System.Collections.IList.Contains
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: "XXX"
    fullName: System.Collections.IList.Contains
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IList.Contains(Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.Count
  nameWithType: ICollection.Count
  commentId: P:System.Collections.ICollection.Count
- uid: System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: "XXX"
    fullName: System.Collections.IList.IndexOf
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: "XXX"
    fullName: System.Collections.IList.IndexOf
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IList.IndexOf(Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: "XXX"
    fullName: System.Collections.IList.Insert
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: "XXX"
    fullName: System.Collections.IList.Insert
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: 'XXX '
    fullName: ', '
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IList.Insert(Int32, Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.IsSynchronized
  nameWithType: ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: "XXX"
  fullName: System.Collections.ICollection.SyncRoot
  nameWithType: ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
- uid: System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IList.IsFixedSize
  nameWithType: IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
- uid: System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IList.IsReadOnly
  nameWithType: IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
- uid: System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: "XXX"
    fullName: System.Collections.IList.Remove
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: "XXX"
    fullName: System.Collections.IList.Remove
  - name: "XXX"
    fullName: (
  - uid: System.Object
    name: "XXX"
    fullName: System.Object
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IList.Remove(Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
- uid: System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IList.Item[System.Int32]
  fullname.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: "XXX"
    fullName: System.Collections.IList.Item
  - name: 'XXX'
    fullName: '['
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: 'XXX'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: "XXX"
    fullName: System.Collections.IList.Item
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IList.Item[Int32]
  nameWithType.vb: IList.Item(Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
- uid: System.ComponentModel.EventDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: "XXX"
  fullName: System.ComponentModel.EventDescriptor
  nameWithType: EventDescriptor
  commentId: T:System.ComponentModel.EventDescriptor
- uid: System.String
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: "XXX"
    fullName: System.Collections.IList.Clear
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: "XXX"
    fullName: System.Collections.IList.Clear
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IList.Clear()
  commentId: M:System.Collections.IList.Clear
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: "XXX"
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: "XXX"
    fullName: (
  - name: "XXX"
    fullName: )
  nameWithType: IEnumerable.GetEnumerator()
  commentId: M:System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IEnumerator
  nameWithType: IEnumerator
  commentId: T:System.Collections.IEnumerator
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: "XXX"
  fullName: System.Collections.IComparer
  nameWithType: IComparer
  commentId: T:System.Collections.IComparer
- uid: System.String[]
  name: "XXX"
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: 'XXX'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: "XXX"
    fullName: System.String
    isExternal: true
  - name: "XXX"
    fullName: ()
  nameWithType: String[]
  nameWithType.vb: String()
- uid: System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: "XXX"
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: "XXX"
    fullName: System.Collections.IList.RemoveAt
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: "XXX"
    fullName: System.Collections.IList.RemoveAt
  - name: "XXX"
    fullName: (
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: IList.RemoveAt(Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: "XXX"
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: "XXX"
    fullName: System.Collections.ICollection.CopyTo
  - name: "XXX"
    fullName: (
  - uid: System.Array
    name: "XXX"
    fullName: System.Array
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: "XXX"
    fullName: System.Collections.ICollection.CopyTo
  - name: "XXX"
    fullName: (
  - uid: System.Array
    name: "XXX"
    fullName: System.Array
  - name: 'XXX '
    fullName: ', '
  - uid: System.Int32
    name: "XXX"
    fullName: System.Int32
    isExternal: true
  - name: "XXX"
    fullName: )
  nameWithType: ICollection.CopyTo(Array, Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.Array
  nameWithType: Array
  commentId: T:System.Array
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: "XXX"
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: "XXX"
  fullName: System.IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
